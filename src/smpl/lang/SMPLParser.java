
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.lang.*;
import smpl.lang.arith.*;
import smpl.lang.bool.*;
import smpl.lang.chars.*;
import smpl.lang.compound.*;
import smpl.lang.statements.*;
import smpl.lang.string.*;
import smpl.values.type.compound.SMPLSingleCase;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\007\003\000\002\010" +
    "\004\000\002\010\003\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\007\000\002\011\007\000" +
    "\002\011\006\000\002\011\006\000\002\011\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\010\000" +
    "\002\014\010\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\016\003\000\002\016" +
    "\006\000\002\016\010\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\012\000" +
    "\002\016\012\000\002\016\012\000\002\016\012\000\002" +
    "\016\012\000\002\016\012\000\002\016\012\000\002\016" +
    "\012\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\052\010\000\002\052\006\000" +
    "\002\053\016\000\002\017\006\000\002\051\005\000\002" +
    "\051\003\000\002\066\005\000\002\066\005\000\002\064" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\050\005\000" +
    "\002\050\005\000\002\047\003\000\002\047\003\000\002" +
    "\046\005\000\002\046\003\000\002\013\003\000\002\013" +
    "\003\000\002\015\011\000\002\015\005\000\002\065\005" +
    "\000\002\003\005\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\002\005\000\002\002\003\000\002\045" +
    "\003\000\002\045\003\000\002\044\005\000\002\044\003" +
    "\000\002\054\003\000\002\031\005\000\002\031\004\000" +
    "\002\031\005\000\002\031\005\000\002\031\004\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\033\003\000\002\033\005" +
    "\000\002\033\010\000\002\033\006\000\002\033\010\000" +
    "\002\033\010\000\002\041\003\000\002\041\003\000\002" +
    "\040\005\000\002\040\003\000\002\060\003\000\002\026" +
    "\003\000\002\027\003\000\002\030\003\000\002\030\003" +
    "\000\002\037\003\000\002\037\003\000\002\036\005\000" +
    "\002\036\003\000\002\057\003\000\002\023\003\000\002" +
    "\024\003\000\002\025\003\000\002\043\003\000\002\043" +
    "\003\000\002\042\005\000\002\042\003\000\002\056\003" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\020" +
    "\006\000\002\020\006\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\006\000" +
    "\002\022\006\000\002\022\005\000\002\061\003\000\002" +
    "\062\003\000\002\063\003\000\002\034\010\000\002\034" +
    "\006\000\002\034\005\000\002\035\005\000\002\006\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\102\005\050\006\077\010\037\013\016\014" +
    "\021\015\053\016\062\017\067\020\025\021\055\022\046" +
    "\023\023\024\063\025\052\027\060\030\014\031\015\037" +
    "\022\041\007\046\073\051\033\054\020\055\054\056\076" +
    "\057\065\060\066\061\026\062\072\063\011\064\036\070" +
    "\043\073\031\001\002\000\004\002\u014f\001\002\000\036" +
    "\026\uff67\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\040" +
    "\uffbe\041\uff66\042\uffbe\043\uffbe\044\uffbe\047\uffbe\065\uff87" +
    "\066\uffad\001\002\000\016\026\u014c\040\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\047\ufff5\001\002\000\066\005\050\010\037" +
    "\013\016\014\021\015\053\016\062\021\055\022\046\023" +
    "\023\024\063\025\052\031\015\037\022\041\007\042\uff60" +
    "\046\073\051\033\054\020\055\054\056\112\057\065\060" +
    "\066\061\026\062\072\063\011\064\036\001\002\000\120" +
    "\002\000\005\050\006\077\010\037\013\016\014\021\015" +
    "\053\016\062\017\067\020\025\021\055\022\046\023\023" +
    "\024\063\025\052\027\060\030\014\031\015\037\022\040" +
    "\000\041\007\042\000\043\000\044\000\046\073\047\000" +
    "\051\033\053\000\054\020\055\054\056\076\057\065\060" +
    "\066\061\026\062\072\063\011\064\036\070\043\073\031" +
    "\001\002\000\014\040\uff95\042\uff95\043\uff95\044\uff95\047" +
    "\uff95\001\002\000\022\040\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\047\uffa7\066\u0147\072\uffa7\001\002\000\014\040" +
    "\uff96\042\uff96\043\uff96\044\uff96\047\uff96\001\002\000\004" +
    "\037\u0144\001\002\000\004\052\u0138\001\002\000\004\037" +
    "\u0133\001\002\000\014\040\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\047\ufff0\001\002\000\036\032\uff6e\033\uff6e\034\uff6e\035" +
    "\uff6e\036\uff6e\040\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e" +
    "\047\uff6e\065\uff6e\066\uff6e\072\uff6e\001\002\000\004\037" +
    "\u012e\001\002\000\066\005\050\010\037\013\016\014\021" +
    "\015\053\016\062\021\055\022\046\023\023\024\063\025" +
    "\052\031\015\033\220\037\022\041\007\046\073\051\033" +
    "\054\020\055\054\056\112\057\065\060\066\061\026\062" +
    "\072\063\011\064\036\001\002\000\004\037\u0127\001\002" +
    "\000\016\032\153\033\155\034\157\035\156\036\152\065" +
    "\u0125\001\002\000\004\037\u0121\001\002\000\036\032\uff6c" +
    "\033\uff6c\034\uff6c\035\uff6c\036\uff6c\040\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\045\uff6c\047\uff6c\065\uff6c\066\uff6c\072\uff6c" +
    "\001\002\000\004\043\u0120\001\002\000\014\040\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\047\uff8d\001\002\000\004\056\u0114" +
    "\001\002\000\014\040\uff97\042\uff97\043\uff97\044\uff97\047" +
    "\uff97\001\002\000\046\005\050\010\037\013\016\014\021" +
    "\021\055\022\046\023\023\024\063\025\052\037\340\046" +
    "\073\051\033\054\020\055\054\056\112\060\066\061\026" +
    "\064\036\001\002\000\036\032\uff7e\033\uff7e\034\170\035" +
    "\167\036\166\040\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\047\uff7e\065\uff7e\066\uff7e\072\uff7e\001\002\000\014\040" +
    "\uffed\042\uffed\043\uffed\044\uffed\047\uffed\001\002\000\022" +
    "\040\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\047\uffa2\066" +
    "\uffa2\072\uffa2\001\002\000\004\037\u010d\001\002\000\014" +
    "\040\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\001\002\000" +
    "\004\043\u010c\001\002\000\016\040\ufff3\041\u0107\042\ufff3" +
    "\043\ufff3\044\ufff3\047\ufff3\001\002\000\046\005\050\010" +
    "\037\013\016\014\021\021\055\022\046\023\023\024\063" +
    "\025\052\037\340\046\073\051\033\054\020\055\054\056" +
    "\112\060\066\061\026\064\036\001\002\000\004\043\u0101" +
    "\001\002\000\036\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036" +
    "\uff6f\040\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\047\uff6f" +
    "\065\uff6f\066\uff6f\072\uff6f\001\002\000\004\037\374\001" +
    "\002\000\014\040\uff8e\042\uff8e\043\uff8e\044\uff8e\047\uff8e" +
    "\001\002\000\004\037\366\001\002\000\004\026\362\001" +
    "\002\000\004\037\357\001\002\000\004\037\352\001\002" +
    "\000\036\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\040" +
    "\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\047\uff6d\065\uff6d" +
    "\066\uff6d\072\uff6d\001\002\000\004\037\345\001\002\000" +
    "\004\066\335\001\002\000\024\032\207\033\211\040\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\331\047\ufff4\065\330\001" +
    "\002\000\004\037\325\001\002\000\014\040\uffef\042\uffef" +
    "\043\uffef\044\uffef\047\uffef\001\002\000\004\037\322\001" +
    "\002\000\004\037\264\001\002\000\014\040\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\047\ufff1\001\002\000\014\040\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\047\uff8c\001\002\000\036\032\uff6b" +
    "\033\uff6b\034\uff6b\035\uff6b\036\uff6b\040\uff6b\042\uff6b\043" +
    "\uff6b\044\uff6b\045\uff6b\047\uff6b\065\uff6b\066\uff6b\072\uff6b" +
    "\001\002\000\004\056\236\001\002\000\004\043\235\001" +
    "\002\000\004\041\143\001\002\000\014\040\uff94\042\uff94" +
    "\043\uff94\044\uff94\047\uff94\001\002\000\066\005\050\010" +
    "\037\013\016\014\021\015\053\016\062\021\055\022\046" +
    "\023\023\024\063\025\052\031\015\037\022\041\007\046" +
    "\073\047\uff60\051\033\054\020\055\054\056\112\057\065" +
    "\060\066\061\026\062\072\063\011\064\036\001\002\000" +
    "\014\040\uffbf\042\uffbf\043\uffbf\044\uffbf\047\uffbf\001\002" +
    "\000\022\040\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\047" +
    "\uffa3\066\uffa3\072\uffa3\001\002\000\034\004\136\026\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\113\041" +
    "\uffe6\043\uffe6\044\135\065\uffe6\066\uffe6\001\002\000\004" +
    "\037\131\001\002\000\014\040\uffee\042\uffee\043\uffee\044" +
    "\uffee\047\uffee\001\002\000\120\002\ufffe\005\ufffe\006\ufffe" +
    "\010\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\046\ufffe\047\ufffe\051\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\070\ufffe\073\ufffe\001\002\000\006\004\104" +
    "\044\103\001\002\000\004\056\130\001\002\000\006\037" +
    "\107\056\106\001\002\000\004\043\uffc9\001\002\000\004" +
    "\043\uffc8\001\002\000\064\005\050\010\037\013\016\014" +
    "\021\015\053\016\062\021\055\022\046\023\023\024\063" +
    "\025\052\031\015\037\022\041\007\046\073\051\033\054" +
    "\020\055\054\056\112\057\065\060\066\061\026\062\072" +
    "\063\011\064\036\001\002\000\006\040\126\044\125\001" +
    "\002\000\004\044\123\001\002\000\044\026\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\113\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6\065\uffe6" +
    "\066\uffe6\072\uffe6\001\002\000\066\005\050\010\037\013" +
    "\016\014\021\015\053\016\062\021\055\022\046\023\023" +
    "\024\063\025\052\031\015\037\022\040\uff60\041\007\046" +
    "\073\051\033\054\020\055\054\056\112\057\065\060\066" +
    "\061\026\062\072\063\011\064\036\001\002\000\010\040" +
    "\uffc2\042\uffc2\047\uffc2\001\002\000\004\040\122\001\002" +
    "\000\012\040\uffc3\042\uffc3\044\120\047\uffc3\001\002\000" +
    "\012\040\uffc0\042\uffc0\044\uffc0\047\uffc0\001\002\000\064" +
    "\005\050\010\037\013\016\014\021\015\053\016\062\021" +
    "\055\022\046\023\023\024\063\025\052\031\015\037\022" +
    "\041\007\046\073\051\033\054\020\055\054\056\112\057" +
    "\065\060\066\061\026\062\072\063\011\064\036\001\002" +
    "\000\012\040\uffc1\042\uffc1\044\uffc1\047\uffc1\001\002\000" +
    "\042\026\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\047" +
    "\uffe5\065\uffe5\066\uffe5\072\uffe5\001\002\000\064\005\050" +
    "\010\037\013\016\014\021\015\053\016\062\021\055\022" +
    "\046\023\023\024\063\025\052\031\015\037\022\041\007" +
    "\046\073\051\033\054\020\055\054\056\112\057\065\060" +
    "\066\061\026\062\072\063\011\064\036\001\002\000\006" +
    "\040\uffc4\044\uffc4\001\002\000\064\005\050\010\037\013" +
    "\016\014\021\015\053\016\062\021\055\022\046\023\023" +
    "\024\063\025\052\031\015\037\022\041\007\046\073\051" +
    "\033\054\020\055\054\056\112\057\065\060\066\061\026" +
    "\062\072\063\011\064\036\001\002\000\014\040\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\047\uffcb\001\002\000\006\040\uffc5" +
    "\044\uffc5\001\002\000\006\004\uffba\044\uffba\001\002\000" +
    "\064\005\050\010\037\013\016\014\021\015\053\016\062" +
    "\021\055\022\046\023\023\024\063\025\052\031\015\037" +
    "\022\041\007\046\073\051\033\054\020\055\054\056\112" +
    "\057\065\060\066\061\026\062\072\063\011\064\036\001" +
    "\002\000\004\040\133\001\002\000\004\043\134\001\002" +
    "\000\122\002\ufffa\005\ufffa\006\ufffa\010\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa" +
    "\047\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\070\ufffa" +
    "\071\ufffa\073\ufffa\001\002\000\004\056\140\001\002\000" +
    "\064\005\050\010\037\013\016\014\021\015\053\016\062" +
    "\021\055\022\046\023\023\024\063\025\052\031\015\037" +
    "\022\041\007\046\073\051\033\054\020\055\054\056\112" +
    "\057\065\060\066\061\026\062\072\063\011\064\036\001" +
    "\002\000\004\043\uffca\001\002\000\006\004\uffb9\044\uffb9" +
    "\001\002\000\004\047\142\001\002\000\016\040\uff61\041" +
    "\uff61\042\uff61\043\uff61\044\uff61\047\uff61\001\002\000\032" +
    "\005\050\010\037\013\016\014\021\024\063\037\147\046" +
    "\073\054\020\055\054\056\112\060\066\061\026\001\002" +
    "\000\010\032\207\033\211\042\231\001\002\000\004\041" +
    "\226\001\002\000\040\032\uff87\033\uff87\034\uff87\035\uff87" +
    "\036\uff87\040\uff87\041\uff66\042\uff87\043\uff87\044\uff87\045" +
    "\uff87\047\uff87\065\uff87\066\uff87\072\uff87\001\002\000\034" +
    "\005\050\010\037\013\016\014\021\024\063\033\220\037" +
    "\147\046\073\054\020\055\054\056\112\060\066\061\026" +
    "\001\002\000\004\041\203\001\002\000\016\032\153\033" +
    "\155\034\157\035\156\036\152\042\154\001\002\000\030" +
    "\010\037\013\016\014\021\024\063\037\147\046\073\054" +
    "\020\055\054\056\112\060\066\061\026\001\002\000\030" +
    "\010\037\013\016\014\021\024\063\037\147\046\073\054" +
    "\020\055\054\056\112\060\066\061\026\001\002\000\042" +
    "\026\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4" +
    "\065\uffd4\066\uffd4\072\uffd4\001\002\000\030\010\037\013" +
    "\016\014\021\024\063\037\147\046\073\054\020\055\054" +
    "\056\112\060\066\061\026\001\002\000\030\010\037\013" +
    "\016\014\021\024\063\037\147\046\073\054\020\055\054" +
    "\056\112\060\066\061\026\001\002\000\030\010\037\013" +
    "\016\014\021\024\063\037\147\046\073\054\020\055\054" +
    "\056\112\060\066\061\026\001\002\000\036\032\uff75\033" +
    "\uff75\034\uff75\035\uff75\036\uff75\040\uff75\042\uff75\043\uff75" +
    "\044\uff75\045\uff75\047\uff75\065\uff75\066\uff75\072\uff75\001" +
    "\002\000\036\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72" +
    "\040\uff72\042\uff72\043\uff72\044\uff72\045\uff72\047\uff72\065" +
    "\uff72\066\uff72\072\uff72\001\002\000\036\032\uff74\033\uff74" +
    "\034\uff74\035\uff74\036\uff74\040\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\047\uff74\065\uff74\066\uff74\072\uff74\001\002" +
    "\000\036\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\040" +
    "\uff71\042\uff71\043\uff71\044\uff71\045\uff71\047\uff71\065\uff71" +
    "\066\uff71\072\uff71\001\002\000\036\032\uff7f\033\uff7f\034" +
    "\157\035\156\036\152\040\uff7f\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\047\uff7f\065\uff7f\066\uff7f\072\uff7f\001\002\000" +
    "\036\032\uff83\033\uff83\034\170\035\167\036\166\040\uff83" +
    "\042\uff83\043\uff83\044\uff83\045\uff83\047\uff83\065\uff83\066" +
    "\uff83\072\uff83\001\002\000\030\010\037\013\016\014\021" +
    "\024\063\037\147\046\073\054\020\055\054\056\112\060" +
    "\066\061\026\001\002\000\030\010\037\013\016\014\021" +
    "\024\063\037\147\046\073\054\020\055\054\056\112\060" +
    "\066\061\026\001\002\000\030\010\037\013\016\014\021" +
    "\024\063\037\147\046\073\054\020\055\054\056\112\060" +
    "\066\061\026\001\002\000\036\032\uff7b\033\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\040\uff7b\042\uff7b\043\uff7b\044\uff7b\045" +
    "\uff7b\047\uff7b\065\uff7b\066\uff7b\072\uff7b\001\002\000\036" +
    "\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\040\uff78\042" +
    "\uff78\043\uff78\044\uff78\045\uff78\047\uff78\065\uff78\066\uff78" +
    "\072\uff78\001\002\000\036\032\uff7a\033\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\040\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\047\uff7a\065\uff7a\066\uff7a\072\uff7a\001\002\000\036\032" +
    "\uff77\033\uff77\034\uff77\035\uff77\036\uff77\040\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\047\uff77\065\uff77\066\uff77\072" +
    "\uff77\001\002\000\036\032\uff79\033\uff79\034\uff79\035\uff79" +
    "\036\uff79\040\uff79\042\uff79\043\uff79\044\uff79\045\uff79\047" +
    "\uff79\065\uff79\066\uff79\072\uff79\001\002\000\036\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\040\uff76\042\uff76\043" +
    "\uff76\044\uff76\045\uff76\047\uff76\065\uff76\066\uff76\072\uff76" +
    "\001\002\000\036\032\uff80\033\uff80\034\157\035\156\036" +
    "\152\040\uff80\042\uff80\043\uff80\044\uff80\045\uff80\047\uff80" +
    "\065\uff80\066\uff80\072\uff80\001\002\000\036\032\uff84\033" +
    "\uff84\034\170\035\167\036\166\040\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\047\uff84\065\uff84\066\uff84\072\uff84\001" +
    "\002\000\036\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73" +
    "\040\uff73\042\uff73\043\uff73\044\uff73\045\uff73\047\uff73\065" +
    "\uff73\066\uff73\072\uff73\001\002\000\036\032\uff70\033\uff70" +
    "\034\uff70\035\uff70\036\uff70\040\uff70\042\uff70\043\uff70\044" +
    "\uff70\045\uff70\047\uff70\065\uff70\066\uff70\072\uff70\001\002" +
    "\000\032\005\050\010\037\013\016\014\021\024\063\037" +
    "\147\046\073\054\020\055\054\056\112\060\066\061\026" +
    "\001\002\000\010\032\207\033\211\042\210\001\002\000" +
    "\016\032\153\033\155\034\157\035\156\036\152\042\206" +
    "\001\002\000\042\026\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\065\uffd5\066\uffd5\072\uffd5\001\002\000" +
    "\030\010\037\013\016\014\021\024\063\037\147\046\073" +
    "\054\020\055\054\056\112\060\066\061\026\001\002\000" +
    "\040\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7\065" +
    "\uffd7\066\uffd7\072\uffd7\001\002\000\030\010\037\013\016" +
    "\014\021\024\063\037\147\046\073\054\020\055\054\056" +
    "\112\060\066\061\026\001\002\000\036\032\uff81\033\uff81" +
    "\034\157\035\156\036\152\040\uff81\042\uff81\043\uff81\044" +
    "\uff81\045\uff81\047\uff81\065\uff81\066\uff81\072\uff81\001\002" +
    "\000\036\032\uff85\033\uff85\034\170\035\167\036\166\040" +
    "\uff85\042\uff85\043\uff85\044\uff85\045\uff85\047\uff85\065\uff85" +
    "\066\uff85\072\uff85\001\002\000\036\032\uff82\033\uff82\034" +
    "\157\035\156\036\152\040\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\047\uff82\065\uff82\066\uff82\072\uff82\001\002\000" +
    "\036\032\uff86\033\uff86\034\170\035\167\036\166\040\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\047\uff86\065\uff86\066" +
    "\uff86\072\uff86\001\002\000\010\032\207\033\211\040\225" +
    "\001\002\000\014\032\153\033\155\034\157\035\156\036" +
    "\152\001\002\000\030\010\037\013\016\014\021\024\063" +
    "\037\147\046\073\054\020\055\054\056\112\060\066\061" +
    "\026\001\002\000\012\034\157\035\156\036\152\040\224" +
    "\001\002\000\012\034\170\035\167\036\166\040\223\001" +
    "\002\000\036\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a" +
    "\040\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\047\uff6a\065" +
    "\uff6a\066\uff6a\072\uff6a\001\002\000\036\032\uff69\033\uff69" +
    "\034\uff69\035\uff69\036\uff69\040\uff69\042\uff69\043\uff69\044" +
    "\uff69\045\uff69\047\uff69\065\uff69\066\uff69\072\uff69\001\002" +
    "\000\036\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68\040" +
    "\uff68\042\uff68\043\uff68\044\uff68\045\uff68\047\uff68\065\uff68" +
    "\066\uff68\072\uff68\001\002\000\032\005\050\010\037\013" +
    "\016\014\021\024\063\037\147\046\073\054\020\055\054" +
    "\056\112\060\066\061\026\001\002\000\010\032\207\033" +
    "\211\042\230\001\002\000\040\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\047\uffd6\065\uffd6\066\uffd6\072\uffd6\001\002" +
    "\000\040\004\232\026\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\047\uffd6\065\uffd6\066\uffd6\001\002\000\064\005\050\010" +
    "\037\013\016\014\021\015\053\016\062\021\055\022\046" +
    "\023\023\024\063\025\052\031\015\037\022\041\007\046" +
    "\073\051\033\054\020\055\054\056\112\057\065\060\066" +
    "\061\026\062\072\063\011\064\036\001\002\000\024\026" +
    "\uff67\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\041\uff66" +
    "\065\uff87\066\uffad\001\002\000\014\040\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\047\uffeb\001\002\000\122\002\ufff6\005\ufff6" +
    "\006\ufff6\010\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\046\ufff6\047\ufff6\051\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\070\ufff6\071\ufff6\073\ufff6\001\002" +
    "\000\066\005\050\007\240\010\037\013\016\014\021\015" +
    "\053\016\062\021\055\022\046\023\023\024\063\025\052" +
    "\031\015\037\022\041\007\046\073\051\033\054\020\055" +
    "\054\056\112\057\065\060\066\061\026\062\072\063\011" +
    "\064\036\001\002\000\004\043\uffc6\001\002\000\012\011" +
    "\246\012\243\037\245\056\242\001\002\000\004\043\uffc7" +
    "\001\002\000\106\005\uffb4\006\uffb4\010\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\044\uffb4\046\uffb4\051\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\070\uffb4\073\uffb4\001\002\000\004\056\263" +
    "\001\002\000\102\005\050\006\077\010\037\013\016\014" +
    "\021\015\053\016\062\017\067\020\025\021\055\022\046" +
    "\023\023\024\063\025\052\027\060\030\014\031\015\037" +
    "\022\041\007\046\073\051\033\054\020\055\054\056\076" +
    "\057\065\060\066\061\026\062\072\063\011\064\036\070" +
    "\043\073\031\001\002\000\012\011\246\012\243\040\uff60" +
    "\056\242\001\002\000\004\056\247\001\002\000\106\005" +
    "\uffb6\006\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\044\uffb6\046\uffb6\051\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\070\uffb6" +
    "\073\uffb6\001\002\000\006\040\uffb8\044\260\001\002\000" +
    "\004\040\254\001\002\000\006\040\uffb2\044\uffb2\001\002" +
    "\000\004\040\uffb7\001\002\000\004\052\255\001\002\000" +
    "\102\005\050\006\077\010\037\013\016\014\021\015\053" +
    "\016\062\017\067\020\025\021\055\022\046\023\023\024" +
    "\063\025\052\027\060\030\014\031\015\037\022\041\007" +
    "\046\073\051\033\054\020\055\054\056\076\057\065\060" +
    "\066\061\026\062\072\063\011\064\036\070\043\073\031" +
    "\001\002\000\004\053\257\001\002\000\014\040\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\047\uffbd\001\002\000\010\011\246" +
    "\012\243\056\242\001\002\000\006\040\uffb3\044\uffb3\001" +
    "\002\000\014\040\uffbc\042\uffbc\043\uffbc\044\uffbc\047\uffbc" +
    "\001\002\000\106\005\uffb5\006\uffb5\010\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\044\uffb5\046\uffb5\051\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\070\uffb5\073\uffb5\001\002\000\020\010\037" +
    "\013\016\014\021\024\063\046\073\056\112\057\065\001" +
    "\002\000\006\041\uff66\044\uff8f\001\002\000\004\044\305" +
    "\001\002\000\004\044\270\001\002\000\032\005\050\010" +
    "\037\013\016\014\021\024\063\037\147\046\073\054\020" +
    "\055\054\056\112\060\066\061\026\001\002\000\010\032" +
    "\207\033\211\044\300\001\002\000\016\032\153\033\155" +
    "\034\157\035\156\036\152\044\273\001\002\000\032\005" +
    "\050\010\037\013\016\014\021\024\063\037\147\046\073" +
    "\054\020\055\054\056\112\060\066\061\026\001\002\000" +
    "\010\032\207\033\211\040\277\001\002\000\016\032\153" +
    "\033\155\034\157\035\156\036\152\040\276\001\002\000" +
    "\042\026\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\047" +
    "\uffde\065\uffde\066\uffde\072\uffde\001\002\000\042\026\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\065\uffdc" +
    "\066\uffdc\072\uffdc\001\002\000\032\005\050\010\037\013" +
    "\016\014\021\024\063\037\147\046\073\054\020\055\054" +
    "\056\112\060\066\061\026\001\002\000\010\032\207\033" +
    "\211\040\304\001\002\000\016\032\153\033\155\034\157" +
    "\035\156\036\152\040\303\001\002\000\042\026\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047\uffdd\065\uffdd\066" +
    "\uffdd\072\uffdd\001\002\000\042\026\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\047\uffdf\065\uffdf\066\uffdf\072\uffdf" +
    "\001\002\000\032\005\050\010\037\013\016\014\021\024" +
    "\063\037\147\046\073\054\020\055\054\056\112\060\066" +
    "\061\026\001\002\000\010\032\207\033\211\044\315\001" +
    "\002\000\016\032\153\033\155\034\157\035\156\036\152" +
    "\044\310\001\002\000\032\005\050\010\037\013\016\014" +
    "\021\024\063\037\147\046\073\054\020\055\054\056\112" +
    "\060\066\061\026\001\002\000\010\032\207\033\211\040" +
    "\314\001\002\000\016\032\153\033\155\034\157\035\156" +
    "\036\152\040\313\001\002\000\042\026\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\047\uffda\065\uffda\066\uffda\072" +
    "\uffda\001\002\000\042\026\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\047\uffd8\065\uffd8\066\uffd8\072\uffd8\001\002" +
    "\000\032\005\050\010\037\013\016\014\021\024\063\037" +
    "\147\046\073\054\020\055\054\056\112\060\066\061\026" +
    "\001\002\000\010\032\207\033\211\040\321\001\002\000" +
    "\016\032\153\033\155\034\157\035\156\036\152\040\320" +
    "\001\002\000\042\026\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\047\uffd9\065\uffd9\066\uffd9\072\uffd9\001\002\000" +
    "\042\026\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047" +
    "\uffdb\065\uffdb\066\uffdb\072\uffdb\001\002\000\066\005\050" +
    "\010\037\013\016\014\021\015\053\016\062\021\055\022" +
    "\046\023\023\024\063\025\052\031\015\037\022\040\uff60" +
    "\041\007\046\073\051\033\054\020\055\054\056\112\057" +
    "\065\060\066\061\026\062\072\063\011\064\036\001\002" +
    "\000\004\040\324\001\002\000\016\026\uff63\040\uff63\042" +
    "\uff63\043\uff63\044\uff63\047\uff63\001\002\000\004\040\326" +
    "\001\002\000\004\043\327\001\002\000\122\002\ufff7\005" +
    "\ufff7\006\ufff7\010\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\046\ufff7\047\ufff7\051\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\070\ufff7\071\ufff7\073\ufff7\001" +
    "\002\000\032\005\050\010\037\013\016\014\021\024\063" +
    "\037\147\046\073\054\020\055\054\056\112\060\066\061" +
    "\026\001\002\000\004\007\240\001\002\000\014\040\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\047\uffbb\001\002\000\026\032" +
    "\207\033\211\040\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\047\uffa6\066\uffa6\072\uffa6\001\002\000\034\032\153\033" +
    "\155\034\157\035\156\036\152\040\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\047\uffa4\066\uffa4\072\uffa4\001\002\000" +
    "\046\005\050\010\037\013\016\014\021\021\055\022\046" +
    "\023\023\024\063\025\052\037\340\046\073\051\033\054" +
    "\020\055\054\056\112\060\066\061\026\064\036\001\002" +
    "\000\010\032\207\033\211\065\330\001\002\000\040\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\036\uff87\040\uffad\041\uff66" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad\065\uff87\066" +
    "\uffad\072\uffad\001\002\000\050\005\050\010\037\013\016" +
    "\014\021\021\055\022\046\023\023\024\063\025\052\033" +
    "\220\037\340\046\073\051\033\054\020\055\054\056\112" +
    "\060\066\061\026\064\036\001\002\000\020\040\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa\072\uffaa\001\002" +
    "\000\012\032\207\033\211\040\225\065\330\001\002\000" +
    "\004\040\344\001\002\000\022\040\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\047\uffa1\066\uffa1\072\uffa1\001\002\000" +
    "\064\005\050\010\037\013\016\014\021\015\053\016\062" +
    "\021\055\022\046\023\023\024\063\025\052\031\015\037" +
    "\022\041\007\046\073\051\033\054\020\055\054\056\112" +
    "\057\065\060\066\061\026\062\072\063\011\064\036\001" +
    "\002\000\004\044\347\001\002\000\064\005\050\010\037" +
    "\013\016\014\021\015\053\016\062\021\055\022\046\023" +
    "\023\024\063\025\052\031\015\037\022\041\007\046\073" +
    "\051\033\054\020\055\054\056\112\057\065\060\066\061" +
    "\026\062\072\063\011\064\036\001\002\000\004\040\351" +
    "\001\002\000\022\040\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\047\uff9e\066\uff9e\072\uff9e\001\002\000\064\005\050" +
    "\010\037\013\016\014\021\015\053\016\062\021\055\022" +
    "\046\023\023\024\063\025\052\031\015\037\022\041\007" +
    "\046\073\051\033\054\020\055\054\056\112\057\065\060" +
    "\066\061\026\062\072\063\011\064\036\001\002\000\004" +
    "\044\354\001\002\000\064\005\050\010\037\013\016\014" +
    "\021\015\053\016\062\021\055\022\046\023\023\024\063" +
    "\025\052\031\015\037\022\041\007\046\073\051\033\054" +
    "\020\055\054\056\112\057\065\060\066\061\026\062\072" +
    "\063\011\064\036\001\002\000\004\040\356\001\002\000" +
    "\016\026\uff64\040\uff64\042\uff64\043\uff64\044\uff64\047\uff64" +
    "\001\002\000\064\005\050\010\037\013\016\014\021\015" +
    "\053\016\062\021\055\022\046\023\023\024\063\025\052" +
    "\031\015\037\022\041\007\046\073\051\033\054\020\055" +
    "\054\056\112\057\065\060\066\061\026\062\072\063\011" +
    "\064\036\001\002\000\004\040\361\001\002\000\022\040" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\047\uff9f\066\uff9f" +
    "\072\uff9f\001\002\000\024\010\037\013\016\014\021\015" +
    "\053\016\062\024\063\041\007\046\073\056\112\001\002" +
    "\000\016\040\uff67\041\uff66\042\uff67\043\uff67\044\uff67\047" +
    "\uff67\001\002\000\014\040\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\047\uffe7\001\002\000\014\040\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\047\uffe9\001\002\000\016\010\037\013\016\014\021" +
    "\024\063\046\073\056\112\001\002\000\006\040\uff66\041" +
    "\uff66\001\002\000\006\040\373\041\203\001\002\000\006" +
    "\040\372\041\226\001\002\000\030\032\uff7c\033\uff7c\040" +
    "\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\047\uff7c\065\uff7c" +
    "\066\uff7c\072\uff7c\001\002\000\030\032\uff7d\033\uff7d\040" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\047\uff7d\065\uff7d" +
    "\066\uff7d\072\uff7d\001\002\000\064\005\050\010\037\013" +
    "\016\014\021\015\053\016\062\021\055\022\046\023\023" +
    "\024\063\025\052\031\015\037\022\041\007\046\073\051" +
    "\033\054\020\055\054\056\112\057\065\060\066\061\026" +
    "\062\072\063\011\064\036\001\002\000\004\044\376\001" +
    "\002\000\064\005\050\010\037\013\016\014\021\015\053" +
    "\016\062\021\055\022\046\023\023\024\063\025\052\031" +
    "\015\037\022\041\007\046\073\051\033\054\020\055\054" +
    "\056\112\057\065\060\066\061\026\062\072\063\011\064" +
    "\036\001\002\000\004\040\u0100\001\002\000\022\040\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d\066\uff9d\072" +
    "\uff9d\001\002\000\122\002\ufffb\005\ufffb\006\ufffb\010\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\046\ufffb\047\ufffb\051\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\070\ufffb\071\ufffb\073\ufffb\001\002\000\004\072\u0103" +
    "\001\002\000\102\005\050\006\077\010\037\013\016\014" +
    "\021\015\053\016\062\017\067\020\025\021\055\022\046" +
    "\023\023\024\063\025\052\027\060\030\014\031\015\037" +
    "\022\041\007\046\073\051\033\054\020\055\054\056\076" +
    "\057\065\060\066\061\026\062\072\063\011\064\036\070" +
    "\043\073\031\001\002\000\006\043\uffd2\071\u0105\001\002" +
    "\000\102\005\050\006\077\010\037\013\016\014\021\015" +
    "\053\016\062\017\067\020\025\021\055\022\046\023\023" +
    "\024\063\025\052\027\060\030\014\031\015\037\022\041" +
    "\007\046\073\051\033\054\020\055\054\056\076\057\065" +
    "\060\066\061\026\062\072\063\011\064\036\070\043\073" +
    "\031\001\002\000\004\043\uffd3\001\002\000\032\005\050" +
    "\010\037\013\016\014\021\024\063\037\147\046\073\054" +
    "\020\055\054\056\112\060\066\061\026\001\002\000\010" +
    "\032\207\033\211\042\u0109\001\002\000\040\004\u010a\026" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\047\uffd7\065\uffd7\066" +
    "\uffd7\001\002\000\064\005\050\010\037\013\016\014\021" +
    "\015\053\016\062\021\055\022\046\023\023\024\063\025" +
    "\052\031\015\037\022\041\007\046\073\051\033\054\020" +
    "\055\054\056\112\057\065\060\066\061\026\062\072\063" +
    "\011\064\036\001\002\000\014\040\uffec\042\uffec\043\uffec" +
    "\044\uffec\047\uffec\001\002\000\122\002\ufffd\005\ufffd\006" +
    "\ufffd\010\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\046\ufffd\047\ufffd\051\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\064\ufffd\070\ufffd\071\ufffd\073\ufffd\001\002\000" +
    "\004\056\u010e\001\002\000\004\044\u010f\001\002\000\064" +
    "\005\050\010\037\013\016\014\021\015\053\016\062\021" +
    "\055\022\046\023\023\024\063\025\052\031\015\037\022" +
    "\041\007\046\073\051\033\054\020\055\054\056\112\057" +
    "\065\060\066\061\026\062\072\063\011\064\036\001\002" +
    "\000\004\040\u0111\001\002\000\042\026\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\047\uffe4\065\uffe4\066\uffe4\072" +
    "\uffe4\001\002\000\022\040\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\047\uffa8\066\335\072\uffa8\001\002\000\020\040" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\047\uffab\072\uffab" +
    "\001\002\000\004\074\u0115\001\002\000\004\075\u0116\001" +
    "\002\000\004\037\u0117\001\002\000\032\005\050\010\037" +
    "\013\016\014\021\024\063\037\147\046\073\054\020\055" +
    "\054\056\112\060\066\061\026\001\002\000\010\032\207" +
    "\033\211\044\u0119\001\002\000\032\005\050\010\037\013" +
    "\016\014\021\024\063\037\147\046\073\054\020\055\054" +
    "\056\112\060\066\061\026\001\002\000\010\032\207\033" +
    "\211\040\u011b\001\002\000\004\052\u011c\001\002\000\102" +
    "\005\050\006\077\010\037\013\016\014\021\015\053\016" +
    "\062\017\067\020\025\021\055\022\046\023\023\024\063" +
    "\025\052\027\060\030\014\031\015\037\022\041\007\046" +
    "\073\051\033\054\020\055\054\056\076\057\065\060\066" +
    "\061\026\062\072\063\011\064\036\070\043\073\031\001" +
    "\002\000\104\005\050\006\077\010\037\013\016\014\021" +
    "\015\053\016\062\017\067\020\025\021\055\022\046\023" +
    "\023\024\063\025\052\027\060\030\014\031\015\037\022" +
    "\041\007\046\073\051\033\053\u011e\054\020\055\054\056" +
    "\076\057\065\060\066\061\026\062\072\063\011\064\036" +
    "\070\043\073\031\001\002\000\004\043\uffd1\001\002\000" +
    "\120\002\uffff\005\uffff\006\uffff\010\uffff\013\uffff\014\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\024\uffff\025\uffff\027\uffff\030\uffff\031\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\046\uffff\047" +
    "\uffff\051\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff" +
    "\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff\070\uffff\073" +
    "\uffff\001\002\000\122\002\ufffc\005\ufffc\006\ufffc\010\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\046\ufffc\047\ufffc\051\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\070\ufffc\071\ufffc\073\ufffc\001\002\000\064\005\050" +
    "\010\037\013\016\014\021\015\053\016\062\021\055\022" +
    "\046\023\023\024\063\025\052\031\015\037\022\041\007" +
    "\046\073\051\033\054\020\055\054\056\112\057\065\060" +
    "\066\061\026\062\072\063\011\064\036\001\002\000\004" +
    "\040\u0123\001\002\000\004\043\u0124\001\002\000\122\002" +
    "\ufff9\005\ufff9\006\ufff9\010\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\051" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\070\ufff9\071\ufff9\073" +
    "\ufff9\001\002\000\032\005\050\010\037\013\016\014\021" +
    "\024\063\037\147\046\073\054\020\055\054\056\112\060" +
    "\066\061\026\001\002\000\026\032\207\033\211\040\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\047\uffa5\066\uffa5\072" +
    "\uffa5\001\002\000\064\005\050\010\037\013\016\014\021" +
    "\015\053\016\062\021\055\022\046\023\023\024\063\025" +
    "\052\031\015\037\022\041\007\046\073\051\033\054\020" +
    "\055\054\056\112\057\065\060\066\061\026\062\072\063" +
    "\011\064\036\001\002\000\004\044\u0129\001\002\000\064" +
    "\005\050\010\037\013\016\014\021\015\053\016\062\021" +
    "\055\022\046\023\023\024\063\025\052\031\015\037\022" +
    "\041\007\046\073\051\033\054\020\055\054\056\112\057" +
    "\065\060\066\061\026\062\072\063\011\064\036\001\002" +
    "\000\004\040\u012b\001\002\000\022\040\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\047\uffa0\066\uffa0\072\uffa0\001\002" +
    "\000\006\040\344\044\ufff0\001\002\000\016\032\207\033" +
    "\211\040\225\044\ufff4\045\331\065\330\001\002\000\024" +
    "\010\037\013\016\014\021\015\053\016\062\024\063\041" +
    "\007\046\073\056\112\001\002\000\004\040\u0132\001\002" +
    "\000\004\040\u0131\001\002\000\042\026\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\047\uffe1\065\uffe1\066\uffe1\072" +
    "\uffe1\001\002\000\042\026\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\047\uffe0\065\uffe0\066\uffe0\072\uffe0\001\002" +
    "\000\024\010\037\013\016\014\021\015\053\016\062\024" +
    "\063\041\007\046\073\056\112\001\002\000\004\040\u0137" +
    "\001\002\000\004\040\u0136\001\002\000\042\026\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\065\uffe3\066" +
    "\uffe3\072\uffe3\001\002\000\042\026\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\047\uffe2\065\uffe2\066\uffe2\072\uffe2" +
    "\001\002\000\050\005\050\010\037\013\016\014\021\021" +
    "\055\022\046\023\023\024\063\025\052\037\340\046\073" +
    "\051\033\054\020\055\054\056\112\060\066\061\026\064" +
    "\036\071\u013a\001\002\000\006\044\uffce\053\uffce\001\002" +
    "\000\004\045\u0142\001\002\000\006\044\u013f\053\u0140\001" +
    "\002\000\004\045\u013d\001\002\000\102\005\050\006\077" +
    "\010\037\013\016\014\021\015\053\016\062\017\067\020" +
    "\025\021\055\022\046\023\023\024\063\025\052\027\060" +
    "\030\014\031\015\037\022\041\007\046\073\051\033\054" +
    "\020\055\054\056\076\057\065\060\066\061\026\062\072" +
    "\063\011\064\036\070\043\073\031\001\002\000\106\005" +
    "\050\006\077\010\037\013\016\014\021\015\053\016\062" +
    "\017\067\020\025\021\055\022\046\023\023\024\063\025" +
    "\052\027\060\030\014\031\015\037\022\041\007\044\uffcd" +
    "\046\073\051\033\053\uffcd\054\020\055\054\056\076\057" +
    "\065\060\066\061\026\062\072\063\011\064\036\070\043" +
    "\073\031\001\002\000\050\005\050\010\037\013\016\014" +
    "\021\021\055\022\046\023\023\024\063\025\052\037\340" +
    "\046\073\051\033\054\020\055\054\056\112\060\066\061" +
    "\026\064\036\071\u013a\001\002\000\014\040\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\047\uffd0\001\002\000\006\044\uffcf\053" +
    "\uffcf\001\002\000\102\005\050\006\077\010\037\013\016" +
    "\014\021\015\053\016\062\017\067\020\025\021\055\022" +
    "\046\023\023\024\063\025\052\027\060\030\014\031\015" +
    "\037\022\041\007\046\073\051\033\054\020\055\054\056" +
    "\076\057\065\060\066\061\026\062\072\063\011\064\036" +
    "\070\043\073\031\001\002\000\106\005\050\006\077\010" +
    "\037\013\016\014\021\015\053\016\062\017\067\020\025" +
    "\021\055\022\046\023\023\024\063\025\052\027\060\030" +
    "\014\031\015\037\022\041\007\044\uffcc\046\073\051\033" +
    "\053\uffcc\054\020\055\054\056\076\057\065\060\066\061" +
    "\026\062\072\063\011\064\036\070\043\073\031\001\002" +
    "\000\004\040\u0145\001\002\000\004\043\u0146\001\002\000" +
    "\122\002\ufff8\005\ufff8\006\ufff8\010\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\047" +
    "\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\070\ufff8\071" +
    "\ufff8\073\ufff8\001\002\000\046\005\050\010\037\013\016" +
    "\014\021\021\055\022\046\023\023\024\063\025\052\037" +
    "\340\046\073\051\033\054\020\055\054\056\112\060\066" +
    "\061\026\064\036\001\002\000\022\040\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\047\uffa9\066\335\072\uffa9\001\002" +
    "\000\020\040\uffac\042\uffac\043\uffac\044\uffac\045\uffac\047" +
    "\uffac\072\uffac\001\002\000\004\042\u014b\001\002\000\016" +
    "\026\uff62\040\uff62\042\uff62\043\uff62\044\uff62\047\uff62\001" +
    "\002\000\024\010\037\013\016\014\021\015\053\016\062" +
    "\024\063\041\007\046\073\056\112\001\002\000\014\040" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\047\uffe8\001\002\000\014" +
    "\040\uffea\042\uffea\043\uffea\044\uffea\047\uffea\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\100\003\101\007\003\010\007\011\100\012" +
    "\040\013\067\014\073\016\004\017\034\020\056\021\033" +
    "\022\044\023\037\024\046\025\027\026\063\027\031\030" +
    "\012\031\016\032\011\033\074\034\005\035\041\052\026" +
    "\053\043\054\055\056\023\061\050\062\070\064\060\065" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\006\113\013\116\014\073\016\004\017" +
    "\034\020\056\021\033\022\044\023\037\024\046\025\027" +
    "\026\063\027\031\030\012\031\016\032\011\033\074\034" +
    "\005\035\041\046\115\047\u0149\054\055\056\023\061\050" +
    "\062\070\064\060\065\077\001\001\000\074\003\101\011" +
    "\u011e\012\040\013\067\014\073\016\004\017\034\020\056" +
    "\021\033\022\044\023\037\024\046\025\027\026\063\027" +
    "\031\030\012\031\016\032\011\033\074\034\005\035\041" +
    "\052\026\053\043\054\055\056\023\061\050\062\070\064" +
    "\060\065\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\013\110\014\073\016\004\017\034\020" +
    "\u012c\021\033\022\044\023\037\024\046\025\027\026\063" +
    "\027\031\030\012\031\u012b\032\011\033\074\034\005\035" +
    "\041\050\107\054\055\056\023\061\050\062\070\064\060" +
    "\065\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\016" +
    "\336\020\335\021\033\022\044\031\u0112\032\011\033\074" +
    "\035\147\054\u0111\056\023\062\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\336\020\335\021\033\022\044\031\u0101\032\011" +
    "\033\074\035\147\054\055\056\023\062\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\006\113\013\116\014\073\016\004\017\034\020" +
    "\056\021\033\022\044\023\037\024\046\025\027\026\063" +
    "\027\031\030\012\031\016\032\011\033\074\034\005\035" +
    "\041\046\115\047\140\054\055\056\023\061\050\062\070" +
    "\064\060\065\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\013\110\014\073\016\004\017\034\020\056\021" +
    "\033\022\044\023\037\024\046\025\027\026\063\027\031" +
    "\030\012\031\016\032\011\033\074\034\005\035\041\050" +
    "\107\054\055\056\023\061\050\062\070\064\060\065\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\006\113\013\116\014\073\016\004\017\034" +
    "\020\056\021\033\022\044\023\037\024\046\025\027\026" +
    "\063\027\031\030\012\031\016\032\011\033\074\034\005" +
    "\035\041\046\115\047\114\054\055\056\023\061\050\062" +
    "\070\064\060\065\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\013" +
    "\120\014\073\016\004\017\034\020\056\021\033\022\044" +
    "\023\037\024\046\025\027\026\063\027\031\030\012\031" +
    "\016\032\011\033\074\034\005\035\041\054\055\056\023" +
    "\061\050\062\070\064\060\065\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\013\123\014\073\016\004" +
    "\017\034\020\056\021\033\022\044\023\037\024\046\025" +
    "\027\026\063\027\031\030\012\031\016\032\011\033\074" +
    "\034\005\035\041\054\055\056\023\061\050\062\070\064" +
    "\060\065\077\001\001\000\002\001\001\000\062\013\126" +
    "\014\073\016\004\017\034\020\056\021\033\022\044\023" +
    "\037\024\046\025\027\026\063\027\031\030\012\031\016" +
    "\032\011\033\074\034\005\035\041\054\055\056\023\061" +
    "\050\062\070\064\060\065\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\013\131\014" +
    "\073\016\004\017\034\020\056\021\033\022\044\023\037" +
    "\024\046\025\027\026\063\027\031\030\012\031\016\032" +
    "\011\033\074\034\005\035\041\054\055\056\023\061\050" +
    "\062\070\064\060\065\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\013\136\014\073\016\004\017\034\020\056\021\033\022" +
    "\044\023\037\024\046\025\027\026\063\027\031\030\012" +
    "\031\016\032\011\033\074\034\005\035\041\054\055\056" +
    "\023\061\050\062\070\064\060\065\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\145\020\143\021\033\022\044\035\147" +
    "\056\150\062\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\145\020\215\021\033" +
    "\022\044\035\147\056\216\062\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\145\022\200\035\147" +
    "\056\201\062\144\001\001\000\016\016\145\021\177\022" +
    "\044\035\147\056\176\062\144\001\001\000\002\001\001" +
    "\000\016\016\145\021\164\022\044\035\147\056\163\062" +
    "\144\001\001\000\014\016\145\022\161\035\147\056\162" +
    "\062\144\001\001\000\014\016\145\022\157\035\147\056" +
    "\160\062\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\145\022\174\035\147\056\175" +
    "\062\144\001\001\000\014\016\145\022\172\035\147\056" +
    "\173\062\144\001\001\000\014\016\145\022\170\035\147" +
    "\056\171\062\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\145\020\203" +
    "\021\033\022\044\035\147\056\204\062\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\145\021\214\022\044\035\147\056\213\062\144\001" +
    "\001\000\002\001\001\000\016\016\145\021\212\022\044" +
    "\035\147\056\211\062\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\145\021\221\022" +
    "\044\035\147\056\220\062\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\145\020\226\021\033\022\044" +
    "\035\147\056\150\062\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\014\233\016\232" +
    "\017\034\020\056\021\033\022\044\023\037\024\046\025" +
    "\027\026\063\027\031\030\012\031\016\032\011\033\074" +
    "\034\005\035\041\054\055\056\023\061\050\062\070\064" +
    "\060\065\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\013\240\014\073\015\236\016" +
    "\004\017\034\020\056\021\033\022\044\023\037\024\046" +
    "\025\027\026\063\027\031\030\012\031\016\032\011\033" +
    "\074\034\005\035\041\054\055\056\023\061\050\062\070" +
    "\064\060\065\077\001\001\000\002\001\001\000\004\005" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\003\101\007\261\010\007\011\100\012" +
    "\040\013\067\014\073\016\004\017\034\020\056\021\033" +
    "\022\044\023\037\024\046\025\027\026\063\027\031\030" +
    "\012\031\016\032\011\033\074\034\005\035\041\052\026" +
    "\053\043\054\055\056\023\061\050\062\070\064\060\065" +
    "\077\001\001\000\012\002\247\004\250\005\251\006\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\101\007\255\010\007\011" +
    "\100\012\040\013\067\014\073\016\004\017\034\020\056" +
    "\021\033\022\044\023\037\024\046\025\027\026\063\027" +
    "\031\030\012\031\016\032\011\033\074\034\005\035\041" +
    "\052\026\053\043\054\055\056\023\061\050\062\070\064" +
    "\060\065\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\264\023\266\024\046" +
    "\025\027\035\147\057\265\062\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\145" +
    "\020\270\021\033\022\044\035\147\056\271\062\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\145" +
    "\020\273\021\033\022\044\035\147\056\274\062\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\145\020\300\021\033\022" +
    "\044\035\147\056\301\062\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\145\020\305\021\033\022\044\035\147\056\306" +
    "\062\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\145\020\310\021\033\022\044\035\147\056\311" +
    "\062\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\145\020\315" +
    "\021\033\022\044\035\147\056\316\062\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\006\113\013\116\014\073\016\004\017" +
    "\034\020\056\021\033\022\044\023\037\024\046\025\027" +
    "\026\063\027\031\030\012\031\016\032\011\033\074\034" +
    "\005\035\041\046\115\047\322\054\055\056\023\061\050" +
    "\062\070\064\060\065\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\145\020\332\021\033\022\044\035" +
    "\147\056\333\062\144\001\001\000\004\015\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\336\020\335\021\033\022\044\031\340\032\011" +
    "\033\074\035\147\054\055\056\023\062\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\336\020\341" +
    "\021\033\022\044\031\342\032\011\033\074\035\147\054" +
    "\055\056\023\062\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\013" +
    "\345\014\073\016\004\017\034\020\056\021\033\022\044" +
    "\023\037\024\046\025\027\026\063\027\031\030\012\031" +
    "\016\032\011\033\074\034\005\035\041\054\055\056\023" +
    "\061\050\062\070\064\060\065\077\001\001\000\002\001" +
    "\001\000\062\013\347\014\073\016\004\017\034\020\056" +
    "\021\033\022\044\023\037\024\046\025\027\026\063\027" +
    "\031\030\012\031\016\032\011\033\074\034\005\035\041" +
    "\054\055\056\023\061\050\062\070\064\060\065\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\013\352" +
    "\014\073\016\004\017\034\020\056\021\033\022\044\023" +
    "\037\024\046\025\027\026\063\027\031\030\012\031\016" +
    "\032\011\033\074\034\005\035\041\054\055\056\023\061" +
    "\050\062\070\064\060\065\077\001\001\000\002\001\001" +
    "\000\062\013\354\014\073\016\004\017\034\020\056\021" +
    "\033\022\044\023\037\024\046\025\027\026\063\027\031" +
    "\030\012\031\016\032\011\033\074\034\005\035\041\054" +
    "\055\056\023\061\050\062\070\064\060\065\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\013\357\014" +
    "\073\016\004\017\034\020\056\021\033\022\044\023\037" +
    "\024\046\025\027\026\063\027\031\030\012\031\016\032" +
    "\011\033\074\034\005\035\041\054\055\056\023\061\050" +
    "\062\070\064\060\065\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\362\034\364\035\147\061\363" +
    "\062\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\366\035\367\062\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\013\374\014\073" +
    "\016\004\017\034\020\056\021\033\022\044\023\037\024" +
    "\046\025\027\026\063\027\031\030\012\031\016\032\011" +
    "\033\074\034\005\035\041\054\055\056\023\061\050\062" +
    "\070\064\060\065\077\001\001\000\002\001\001\000\062" +
    "\013\376\014\073\016\004\017\034\020\056\021\033\022" +
    "\044\023\037\024\046\025\027\026\063\027\031\030\012" +
    "\031\016\032\011\033\074\034\005\035\041\054\055\056" +
    "\023\061\050\062\070\064\060\065\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\101\011\u0103\012\040\013\067\014\073" +
    "\016\004\017\034\020\056\021\033\022\044\023\037\024" +
    "\046\025\027\026\063\027\031\030\012\031\016\032\011" +
    "\033\074\034\005\035\041\052\026\053\043\054\055\056" +
    "\023\061\050\062\070\064\060\065\077\001\001\000\002" +
    "\001\001\000\074\003\101\011\u0105\012\040\013\067\014" +
    "\073\016\004\017\034\020\056\021\033\022\044\023\037" +
    "\024\046\025\027\026\063\027\031\030\012\031\016\032" +
    "\011\033\074\034\005\035\041\052\026\053\043\054\055" +
    "\056\023\061\050\062\070\064\060\065\077\001\001\000" +
    "\002\001\001\000\020\016\145\020\u0107\021\033\022\044" +
    "\035\147\056\204\062\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\014\u010a\016\232\017\034\020\056" +
    "\021\033\022\044\023\037\024\046\025\027\026\063\027" +
    "\031\030\012\031\016\032\011\033\074\034\005\035\041" +
    "\054\055\056\023\061\050\062\070\064\060\065\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\013\u010f\014\073\016\004\017" +
    "\034\020\056\021\033\022\044\023\037\024\046\025\027" +
    "\026\063\027\031\030\012\031\016\032\011\033\074\034" +
    "\005\035\041\054\055\056\023\061\050\062\070\064\060" +
    "\065\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\145\020\u0117\021" +
    "\033\022\044\035\147\056\216\062\144\001\001\000\002" +
    "\001\001\000\020\016\145\020\u0119\021\033\022\044\035" +
    "\147\056\216\062\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\101\010\u011c\011\100\012\040\013" +
    "\067\014\073\016\004\017\034\020\056\021\033\022\044" +
    "\023\037\024\046\025\027\026\063\027\031\030\012\031" +
    "\016\032\011\033\074\034\005\035\041\052\026\053\043" +
    "\054\055\056\023\061\050\062\070\064\060\065\077\001" +
    "\001\000\074\003\101\011\u011e\012\040\013\067\014\073" +
    "\016\004\017\034\020\056\021\033\022\044\023\037\024" +
    "\046\025\027\026\063\027\031\030\012\031\016\032\011" +
    "\033\074\034\005\035\041\052\026\053\043\054\055\056" +
    "\023\061\050\062\070\064\060\065\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\013" +
    "\u0121\014\073\016\004\017\034\020\056\021\033\022\044" +
    "\023\037\024\046\025\027\026\063\027\031\030\012\031" +
    "\016\032\011\033\074\034\005\035\041\054\055\056\023" +
    "\061\050\062\070\064\060\065\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\145" +
    "\020\u0125\021\033\022\044\035\147\056\216\062\144\001" +
    "\001\000\002\001\001\000\062\013\u0127\014\073\016\004" +
    "\017\034\020\056\021\033\022\044\023\037\024\046\025" +
    "\027\026\063\027\031\030\012\031\016\032\011\033\074" +
    "\034\005\035\041\054\055\056\023\061\050\062\070\064" +
    "\060\065\077\001\001\000\002\001\001\000\062\013\u0129" +
    "\014\073\016\004\017\034\020\056\021\033\022\044\023" +
    "\037\024\046\025\027\026\063\027\031\030\012\031\016" +
    "\032\011\033\074\034\005\035\041\054\055\056\023\061" +
    "\050\062\070\064\060\065\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\362\034\u012f\035\147\061\u012e\062\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\362\034\u0134\035\147\061\u0133" +
    "\062\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\016\336\020\335" +
    "\021\033\022\044\031\u013b\032\011\033\074\035\147\051" +
    "\u013a\054\055\056\023\062\144\066\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\003\101\010\u013d\011\100\012\040\013\067" +
    "\014\073\016\004\017\034\020\056\021\033\022\044\023" +
    "\037\024\046\025\027\026\063\027\031\030\012\031\016" +
    "\032\011\033\074\034\005\035\041\052\026\053\043\054" +
    "\055\056\023\061\050\062\070\064\060\065\077\001\001" +
    "\000\074\003\101\011\u011e\012\040\013\067\014\073\016" +
    "\004\017\034\020\056\021\033\022\044\023\037\024\046" +
    "\025\027\026\063\027\031\030\012\031\016\032\011\033" +
    "\074\034\005\035\041\052\026\053\043\054\055\056\023" +
    "\061\050\062\070\064\060\065\077\001\001\000\032\016" +
    "\336\020\335\021\033\022\044\031\u013b\032\011\033\074" +
    "\035\147\054\055\056\023\062\144\066\u0140\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\003\101\010\u0142" +
    "\011\100\012\040\013\067\014\073\016\004\017\034\020" +
    "\056\021\033\022\044\023\037\024\046\025\027\026\063" +
    "\027\031\030\012\031\016\032\011\033\074\034\005\035" +
    "\041\052\026\053\043\054\055\056\023\061\050\062\070" +
    "\064\060\065\077\001\001\000\074\003\101\011\u011e\012" +
    "\040\013\067\014\073\016\004\017\034\020\056\021\033" +
    "\022\044\023\037\024\046\025\027\026\063\027\031\030" +
    "\012\031\016\032\011\033\074\034\005\035\041\052\026" +
    "\053\043\054\055\056\023\061\050\062\070\064\060\065" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\016\336\020\335\021\033\022\044\031" +
    "\u0148\032\011\033\074\035\147\054\u0147\056\023\062\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\362\034\u014d\035\147" +
    "\061\u014c\062\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // No longer necessary    
    
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
        System.out.println(ioe.getMessage());
        throw ioe;
    }
    
    }


    SMPLLexer lexer;

    public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

    public SMPLParser(String file) throws FileNotFoundException {
              this(new SMPLLexer(new FileReader(file)));
    }

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(new InputStreamReader(is)));
                }

    public void report_error(String message, Object info) {
        System.err.println(message + info);
    }

    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error while reading: ", cur_token);
        System.err.println ("Last token read is " +
           lexer.getText());
    }
      

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {

          
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram start_val = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SIRProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SIRProgram(seq);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              SIRSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              SIRSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            SIRSequence seq = new SIRSequence();
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment SEMI 
            {
              SIRStatement RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement assign = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = assign; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IFCond SEMI 
            {
              SIRStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ConditionalStatement cond = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = cond; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= FORLoop SEMI 
            {
              SIRStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ForStatement f = (ForStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= PRINT LPAREN smplExp RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new PrintStmt(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= PRINTLN LPAREN smplExp RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new PrintStmt(exp, true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= READINT LPAREN RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		 RESULT = new SMPLReadInt(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= READ LPAREN RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		 RESULT = new SMPLReadStr(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= smplExp SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressions ::= pairExp 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pair; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressions ::= arithExp 
            {
              SIRObj RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = aExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressions ::= vectorExp 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = vector; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expressions ::= stringExp 
            {
              SIRObj RESULT =null;
		int sExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp sExp = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = sExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expressions ::= charExp 
            {
              SIRObj RESULT =null;
		int chExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp chExp = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = chExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressions ::= boolExp 
            {
              SIRObj RESULT =null;
		int bExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bExp = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressions ::= tupleExp 
            {
              SIRObj RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = tuple; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressions ::= subvecExp 
            {
              SIRObj RESULT =null;
		int svExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int svExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SubvectorExp svExp = (SubvectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = svExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressions ::= caseCondExp 
            {
              SIRObj RESULT =null;
		int cCondleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cCondright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj cCond = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cCond; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressions ::= vectorExp LBRACKET arithExp RBRACKET ASSIGN expressions 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp pos = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRFunctionExp("replace", vector, pos, exp);
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions ::= vectorVar LBRACKET arithExp RBRACKET ASSIGN expressions 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp pos = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRFunctionExp("replace", vector, pos, exp);
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= pairExp CONCAT pairExp 
            {
              SIRObj RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		PairExp p1 = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp p2 = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairExp(new SIRFunctionExp("concat", p1, p2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressions ::= pairVar CONCAT pairExp 
            {
              SIRObj RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		CompoundExp p1 = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp p2 = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairExp(new SIRFunctionExp("concat", p1, p2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressions ::= pairExp CONCAT pairVar 
            {
              SIRObj RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		PairExp p1 = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CompoundExp p2 = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairExp(new SIRFunctionExp("concat", p1, p2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressions ::= pairVar CONCAT pairVar 
            {
              SIRObj RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		CompoundExp p1 = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CompoundExp p2 = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairExp(new SIRFunctionExp("concat", p1, p2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literals ::= VAR 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRVar(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literals ::= VAR LPAREN smplExpListE RPAREN 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> exp = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("call", new SIRVar(id), exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literals ::= CALL LPAREN VAR COMMA smplExp RPAREN 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literals ::= CAR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // literals ::= CAR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literals ::= CDR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literals ::= CDR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literals ::= SUBSTR LPAREN stringExp COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literals ::= SUBSTR LPAREN stringExp COMMA arithVar COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literals ::= SUBSTR LPAREN stringExp COMMA arithExp COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literals ::= SUBSTR LPAREN stringExp COMMA arithVar COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literals ::= SUBSTR LPAREN stringVar COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literals ::= SUBSTR LPAREN stringVar COMMA arithVar COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literals ::= SUBSTR LPAREN stringVar COMMA arithExp COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literals ::= SUBSTR LPAREN stringVar COMMA arithVar COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literals ::= vectorExp LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literals ::= vectorVar LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literals ::= vectorExp LBRACKET arithVar RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literals ::= vectorVar LBRACKET arithVar RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IFCond ::= IF boolExp THEN stmt ELSE stmt 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRStatement s1 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s2 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new ConditionalStatement(bool, s1, s2);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IFCond ::= IF boolExp THEN stmt 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new ConditionalStatement(bool, s);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FORLoop ::= FOR VAR IN RANGE LPAREN arithExp COMMA arithExp RPAREN LCURL stmtList RCURL 
            {
              ForStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-10)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).right;
		AIRExp low = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		AIRExp high = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRSequence s = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ForStatement(id, low, high, s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("FORLoop",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-11)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // caseCondExp ::= CASE LCURL caseList RCURL 
            {
              SIRObj RESULT =null;
		int cLstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cLstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SMPLSingleCase> cLst = (ArrayList<SMPLSingleCase>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CaseCondExp(cLst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseCondExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // caseList ::= caseList COMMA singleCase 
            {
              ArrayList<SMPLSingleCase> RESULT =null;
		int cLstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cLstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SMPLSingleCase> cLst = (ArrayList<SMPLSingleCase>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sCaseleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sCaseright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSingleCase sCase = (SMPLSingleCase)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            cLst.add(sCase);
                                            RESULT = cLst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // caseList ::= singleCase 
            {
              ArrayList<SMPLSingleCase> RESULT =null;
		int sCaseleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sCaseright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSingleCase sCase = (SMPLSingleCase)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            ArrayList<SMPLSingleCase> cLst = new ArrayList<>();
                                            cLst.add(sCase);
                                            RESULT = cLst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // singleCase ::= boolExp COLON stmtList 
            {
              SMPLSingleCase RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp exp = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLSingleCase(exp, seq); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("singleCase",52, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // singleCase ::= ELSE COLON stmtList 
            {
              SMPLSingleCase RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLSingleCase(new BoolLit(true), seq); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("singleCase",52, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tupleExp ::= LPAREN tupleExpList RPAREN 
            {
              TupleExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		  
                                            RESULT = new TupleExp(lst);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExp",50, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment ::= VAR ASSIGN smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SMPLAssignment(id, exp);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignment ::= ids ASSIGN tupleExp 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new TupleAssignment(lst, tuple); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment ::= ids ASSIGN VAR 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = new TupleAssignment(lst, new TupleExp(new SIRVar<CompoundExp>(id)));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= DEF VAR smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment ::= DEF VAR procDefn 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj proc = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, proc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tupleExpList ::= tupleExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tupleExpList ::= smplExp COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            lst.add(exp1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // smplExpListE ::= smplExpList 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // smplExpListE ::= empty 
            {
              ArrayList<SIRObj> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // smplExpList ::= smplExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // smplExpList ::= smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // smplExp ::= expressions 
            {
              SIRObj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj expr = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // smplExp ::= literals 
            {
              SIRObj RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lit; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procDefn ::= PROC LPAREN paramListE RPAREN LCURL program RCURL 
            {
              SIRObj RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<SIRParam> params = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ProcExp(params, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // procDefn ::= PROC paramExp program 
            {
              SIRObj RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ProcExp(param, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // subvecExp ::= arithExp COLON procDefn 
            {
              SubvectorExp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj proc = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
					RESULT = new SubvectorExp(new SIRFunctionExp("subvector", exp, proc)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subvecExp",51, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ids ::= ids COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ids ::= VAR COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            lst.add(id1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramListE ::= paramList 
            {
              ArrayList<SIRParam> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRParam> lst = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // paramListE ::= empty 
            {
              ArrayList<SIRParam> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramExp ::= LAZY VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, "lazy"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // paramExp ::= REF VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, "ref"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // paramExp ::= VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // paramList ::= paramList COMMA paramExp 
            {
              ArrayList<SIRParam> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRParam> lst = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(param);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // paramList ::= paramExp 
            {
              ArrayList<SIRParam> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRParam> lst = new ArrayList<>();
                                            lst.add(param);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bExpListE ::= bExpList 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bExpListE ::= empty 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bExpList ::= bExpList COMMA boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bExpList ::= boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolVar ::= literals 
            {
              BoolExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BoolLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolVar",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // boolExp ::= boolTerm LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // boolExp ::= NOT boolExp 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // boolExp ::= boolVar LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolExp ::= boolTerm LOGIC boolVar 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boolExp ::= NOT boolVar 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // boolExp ::= boolTerm 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // boolTerm ::= arithExp RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // boolTerm ::= arithVar RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // boolTerm ::= arithExp RATIONAL arithVar 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolTerm ::= boolFactor 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolFactor ::= BOOL 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            if (bool.equals("#t")) {
                                                RESULT = new BoolLit(true); 
                                            } else {
                                                RESULT = new BoolLit(false);
                                            }
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolFactor ::= LPAREN boolExp RPAREN 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolFactor ::= GREATER LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("greater?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolFactor ::= ISPAIR LPAREN smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("pair?", exp)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolFactor ::= EQV LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("eqv?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // boolFactor ::= EQUAL LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("equal?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cExpListE ::= cExpList 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cExpListE ::= empty 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cExpList ::= cExpList COMMA charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cExpList ::= charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // charVar ::= literals 
            {
              CharExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charVar",46, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // charExp ::= charTerm 
            {
              CharExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp t = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charExp",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // charTerm ::= charFactor 
            {
              CharExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp f = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charTerm",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // charFactor ::= CHAR 
            {
              CharExp RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(ch.charAt(0), "#c"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // charFactor ::= UNICODE 
            {
              CharExp RESULT =null;
		int unileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String uni = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(uni, "#u"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // strExpListE ::= strExpListE 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // strExpListE ::= empty 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // strExpList ::= strExpList COMMA stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // strExpList ::= stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stringVar ::= literals 
            {
              StringExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringVar",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stringExp ::= stringTerm 
            {
              StringExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp t = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // stringTerm ::= stringFactor 
            {
              StringExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp f = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringTerm",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // stringFactor ::= STRING 
            {
              StringExp RESULT =null;
		int sLitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sLitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String sLit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(sLit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringFactor",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // aExpListE ::= aExpList 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // aExpListE ::= empty 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // aExpList ::= aExpList COMMA arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // aExpList ::= arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithVar ::= literals 
            {
              AIRExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithVar",44, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arithExp ::= arithExp PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithExp ::= arithExp MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arithExp ::= arithVar PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arithExp ::= arithVar MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // arithExp ::= arithExp PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arithExp ::= arithExp MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arithExp ::= arithVar PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arithExp ::= arithVar MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arithExp ::= arithTerm 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arithExp ::= SIZE LPAREN vectorExp RPAREN 
            {
              AIRExp RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AIRFunction(new SIRFunctionExp("size", vector)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arithExp ::= SIZE LPAREN vectorVar RPAREN 
            {
              AIRExp RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new AIRFunction(new SIRFunctionExp("size", vector)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arithTerm ::= arithTerm DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arithTerm ::= arithTerm MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithTerm ::= arithTerm TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithTerm ::= arithTerm DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithTerm ::= arithTerm MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arithTerm ::= arithVar TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arithTerm ::= arithVar DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arithTerm ::= arithVar MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arithTerm ::= arithVar TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arithTerm ::= arithVar DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arithTerm ::= arithVar MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arithTerm ::= arithFactor 
            {
              AIRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arithFactor ::= INTEGER 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer alit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arithFactor ::= REAL 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double alit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, "#r"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arithFactor ::= HEX 
            {
              AIRExp RESULT =null;
		int hexleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hexright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer hex = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(hex, "#x"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // arithFactor ::= BINARY 
            {
              AIRExp RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer bin = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(bin, "#b"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // arithFactor ::= LPAREN MINUS arithTerm RPAREN 
            {
              AIRExp RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aExp);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arithFactor ::= LPAREN MINUS arithVar RPAREN 
            {
              AIRExp RESULT =null;
		int aVarleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aVarright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aVar = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aVar);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arithFactor ::= LPAREN arithExp RPAREN 
            {
              AIRExp RESULT =null;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aexp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = aexp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // pairVar ::= literals 
            {
              CompoundExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairVar",47, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // vectorVar ::= literals 
            {
              CompoundExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VectorLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorVar",48, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // subvectorVar ::= VAR 
            {
              CompoundExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SubvectorLit(new SIRVar<CompoundExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("subvectorVar",49, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // pairExp ::= PAIR LPAREN smplExp COMMA smplExp RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj e1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj e2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new PairExp(new SIRFunctionExp("pair", e1, e2) );
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // pairExp ::= LIST LPAREN smplExpListE RPAREN 
            {
              PairExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PairExp(new SIRFunctionExp("list", lst)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // pairExp ::= LBRACKET smplExpListE RBRACKET 
            {
              PairExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PairExp(new SIRFunctionExp("list", lst)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // vectorExp ::= LBCOLON smplExpListE RBCOLON 
            {
              VectorExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
						SIRObj[] result = new SIRObj[lst.size()];
						result = lst.toArray(result);
						RESULT = new VectorExp(new SIRFunctionExp("vector", result)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
