
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.lang.*;
import smpl.lang.arith.*;
import smpl.lang.bool.*;
import smpl.lang.chars.*;
import smpl.lang.compound.*;
import smpl.lang.statements.*;
import smpl.lang.string.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\006\003\000\002\007" +
    "\005\000\002\007\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\006\000\002\010\006\000\002\010\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\012\000\002\013\012\000" +
    "\002\013\006\000\002\013\006\000\002\015\003\000\002" +
    "\015\006\000\002\047\010\000\002\047\007\000\002\057" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\046\005\000" +
    "\002\046\005\000\002\045\003\000\002\045\003\000\002" +
    "\044\005\000\002\044\003\000\002\012\003\000\002\012" +
    "\003\000\002\014\011\000\002\014\007\000\002\003\005" +
    "\000\002\003\005\000\002\004\003\000\002\004\003\000" +
    "\002\002\005\000\002\002\003\000\002\043\003\000\002" +
    "\043\003\000\002\042\005\000\002\042\003\000\002\050" +
    "\003\000\002\027\005\000\002\027\004\000\002\027\005" +
    "\000\002\027\004\000\002\027\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\005\000\002\031\007\000\002\031" +
    "\011\000\002\031\011\000\002\037\003\000\002\037\003" +
    "\000\002\036\005\000\002\036\003\000\002\054\003\000" +
    "\002\024\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\035\003\000\002\035\003\000\002\034" +
    "\005\000\002\034\003\000\002\053\003\000\002\021\003" +
    "\000\002\022\003\000\002\023\003\000\002\041\003\000" +
    "\002\041\003\000\002\040\005\000\002\040\003\000\002" +
    "\052\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\006\000" +
    "\002\020\006\000\002\020\005\000\002\055\003\000\002" +
    "\056\003\000\002\032\010\000\002\033\005\000\002\005" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\056\006\062\011\013\012\016\013\040\015" +
    "\052\016\021\017\042\020\036\021\046\030\017\037\056" +
    "\042\026\045\015\046\041\047\060\050\050\051\051\052" +
    "\022\053\055\054\010\055\030\060\034\001\002\000\004" +
    "\002\340\001\002\000\014\031\uffd9\034\uffd9\035\uffd9\040" +
    "\uffd9\061\uffd9\001\002\000\014\031\ufff8\034\ufff8\035\ufff8" +
    "\040\ufff8\061\ufff8\001\002\000\062\002\000\006\062\011" +
    "\013\012\016\013\040\015\052\016\021\017\042\020\036" +
    "\021\046\030\017\037\056\042\026\044\000\045\015\046" +
    "\041\047\060\050\050\051\051\052\022\053\055\054\010" +
    "\055\030\060\034\001\002\000\014\031\uffb5\034\uffb5\035" +
    "\uffb5\040\uffb5\061\uffb5\001\002\000\020\031\uffc6\034\uffc6" +
    "\035\uffc6\040\uffc6\057\334\061\uffc6\062\uffc6\001\002\000" +
    "\014\031\uffb6\034\uffb6\035\uffb6\040\uffb6\061\uffb6\001\002" +
    "\000\004\030\327\001\002\000\014\031\ufff3\034\ufff3\035" +
    "\ufff3\040\ufff3\061\ufff3\001\002\000\036\023\uff95\024\uff95" +
    "\025\uff95\026\uff95\027\uff95\031\uff95\033\uff95\034\uff95\035" +
    "\uff95\040\uff95\056\uff95\057\uff95\061\uff95\062\uff95\001\002" +
    "\000\004\030\320\001\002\000\050\011\013\012\016\013" +
    "\040\017\042\020\036\021\046\024\132\030\017\037\056" +
    "\042\026\045\015\046\041\047\074\050\050\051\051\052" +
    "\022\053\055\054\010\055\030\001\002\000\016\023\167" +
    "\024\170\025\154\026\153\027\152\056\314\001\002\000" +
    "\004\030\311\001\002\000\036\023\uff93\024\uff93\025\uff93" +
    "\026\uff93\027\uff93\031\uff93\033\uff93\034\uff93\035\uff93\040" +
    "\uff93\056\uff93\057\uff93\061\uff93\062\uff93\001\002\000\006" +
    "\034\ufffc\061\ufffc\001\002\000\014\031\uffad\034\uffad\035" +
    "\uffad\040\uffad\061\uffad\001\002\000\014\031\uffb7\034\uffb7" +
    "\035\uffb7\040\uffb7\061\uffb7\001\002\000\030\013\245\017" +
    "\042\020\036\030\242\042\026\045\015\046\041\047\243" +
    "\051\051\052\022\055\030\001\002\000\036\023\uffa0\024" +
    "\uffa0\025\143\026\142\027\141\031\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\040\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0\001" +
    "\002\000\020\031\uffc1\034\uffc1\035\uffc1\040\uffc1\057\uffc1" +
    "\061\uffc1\062\uffc1\001\002\000\006\034\ufffd\061\ufffd\001" +
    "\002\000\014\031\ufff5\034\ufff5\035\ufff5\040\ufff5\061\ufff5" +
    "\001\002\000\016\031\ufff6\032\304\034\ufff6\035\ufff6\040" +
    "\ufff6\061\ufff6\001\002\000\030\013\245\017\042\020\036" +
    "\030\242\042\026\045\015\046\041\047\243\051\051\052" +
    "\022\055\030\001\002\000\036\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\027\uff96\031\uff96\033\uff96\034\uff96\035\uff96\040" +
    "\uff96\056\uff96\057\uff96\061\uff96\062\uff96\001\002\000\004" +
    "\041\270\001\002\000\014\031\uffae\034\uffae\035\uffae\040" +
    "\uffae\061\uffae\001\002\000\006\030\263\041\246\001\002" +
    "\000\036\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\031" +
    "\uff94\033\uff94\034\uff94\035\uff94\040\uff94\056\uff94\057\uff94" +
    "\061\uff94\062\uff94\001\002\000\004\041\255\001\002\000" +
    "\004\057\240\001\002\000\022\023\135\024\136\031\ufff7" +
    "\034\ufff7\035\ufff7\040\ufff7\056\235\061\ufff7\001\002\000" +
    "\014\031\ufff2\034\ufff2\035\ufff2\040\ufff2\061\ufff2\001\002" +
    "\000\004\030\217\001\002\000\014\031\ufff4\034\ufff4\035" +
    "\ufff4\040\ufff4\061\ufff4\001\002\000\014\031\uffac\034\uffac" +
    "\035\uffac\040\uffac\061\uffac\001\002\000\036\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\031\uff92\033\uff92\034\uff92" +
    "\035\uff92\040\uff92\056\uff92\057\uff92\061\uff92\062\uff92\001" +
    "\002\000\004\047\174\001\002\000\006\034\ufff9\061\ufff9" +
    "\001\002\000\004\032\125\001\002\000\014\031\uffb4\034" +
    "\uffb4\035\uffb4\040\uffb4\061\uffb4\001\002\000\050\011\013" +
    "\012\016\013\040\017\042\020\036\021\046\030\017\037" +
    "\056\040\uff8a\042\026\045\015\046\041\047\074\050\050" +
    "\051\051\052\022\053\055\054\010\055\030\001\002\000" +
    "\014\031\uffd8\034\uffd8\035\uffd8\040\uffd8\061\uffd8\001\002" +
    "\000\034\004\120\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\075\032\uff8d\034\uffe9\035\117\056\uffa7\057\uffcb" +
    "\061\uffe9\001\002\000\020\031\uffc2\034\uffc2\035\uffc2\040" +
    "\uffc2\057\uffc2\061\uffc2\062\uffc2\001\002\000\004\030\114" +
    "\001\002\000\004\034\113\001\002\000\006\004\066\035" +
    "\065\001\002\000\004\047\112\001\002\000\006\030\071" +
    "\047\070\001\002\000\006\034\uffe3\061\uffe3\001\002\000" +
    "\006\034\uffe2\061\uffe2\001\002\000\046\011\013\012\016" +
    "\013\040\017\042\020\036\021\046\030\017\037\056\042" +
    "\026\045\015\046\041\047\074\050\050\051\051\052\022" +
    "\053\055\054\010\055\030\001\002\000\006\031\110\035" +
    "\107\001\002\000\004\035\105\001\002\000\036\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\075\031\uffe9\032" +
    "\uff8d\034\uffe9\035\uffe9\040\uffe9\056\uffa7\057\uffcb\061\uffe9" +
    "\001\002\000\050\011\013\012\016\013\040\017\042\020" +
    "\036\021\046\030\017\031\uff8a\037\056\042\026\045\015" +
    "\046\041\047\074\050\050\051\051\052\022\053\055\054" +
    "\010\055\030\001\002\000\006\031\uffdc\040\uffdc\001\002" +
    "\000\004\031\104\001\002\000\010\031\uffdd\035\102\040" +
    "\uffdd\001\002\000\010\031\uffda\035\uffda\040\uffda\001\002" +
    "\000\046\011\013\012\016\013\040\017\042\020\036\021" +
    "\046\030\017\037\056\042\026\045\015\046\041\047\074" +
    "\050\050\051\051\052\022\053\055\054\010\055\030\001" +
    "\002\000\010\031\uffdb\035\uffdb\040\uffdb\001\002\000\014" +
    "\031\uffe8\034\uffe8\035\uffe8\040\uffe8\061\uffe8\001\002\000" +
    "\046\011\013\012\016\013\040\017\042\020\036\021\046" +
    "\030\017\037\056\042\026\045\015\046\041\047\074\050" +
    "\050\051\051\052\022\053\055\054\010\055\030\001\002" +
    "\000\006\031\uffde\035\uffde\001\002\000\046\011\013\012" +
    "\016\013\040\017\042\020\036\021\046\030\017\037\056" +
    "\042\026\045\015\046\041\047\074\050\050\051\051\052" +
    "\022\053\055\054\010\055\030\001\002\000\014\031\uffe5" +
    "\034\uffe5\035\uffe5\040\uffe5\061\uffe5\001\002\000\006\031" +
    "\uffdf\035\uffdf\001\002\000\006\004\uffd5\035\uffd5\001\002" +
    "\000\062\002\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\030\ufffe\037\ufffe" +
    "\042\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\060\ufffe\001\002" +
    "\000\046\011\013\012\016\013\040\017\042\020\036\021" +
    "\046\030\017\037\056\042\026\045\015\046\041\047\074" +
    "\050\050\051\051\052\022\053\055\054\010\055\030\001" +
    "\002\000\004\031\116\001\002\000\006\034\ufffb\061\ufffb" +
    "\001\002\000\004\047\122\001\002\000\046\011\013\012" +
    "\016\013\040\017\042\020\036\021\046\030\017\037\056" +
    "\042\026\045\015\046\041\047\074\050\050\051\051\052" +
    "\022\053\055\054\010\055\030\001\002\000\006\034\uffe4" +
    "\061\uffe4\001\002\000\006\004\uffd4\035\uffd4\001\002\000" +
    "\004\040\124\001\002\000\016\031\uff8b\032\uff8b\034\uff8b" +
    "\035\uff8b\040\uff8b\061\uff8b\001\002\000\016\030\131\045" +
    "\015\046\041\047\127\051\051\052\022\001\002\000\014" +
    "\023\167\024\170\025\154\026\153\027\152\001\002\000" +
    "\036\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\031\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\040\uffa7\056\uffa7\057\uffa7\061" +
    "\uffa7\062\uffa7\001\002\000\010\023\135\024\136\033\166" +
    "\001\002\000\020\024\132\030\131\045\015\046\041\047" +
    "\127\051\051\052\022\001\002\000\016\030\131\045\015" +
    "\046\041\047\127\051\051\052\022\001\002\000\010\023" +
    "\135\024\136\031\134\001\002\000\036\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\031\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\040\uff8f\056\uff8f\057\uff8f\061\uff8f\062\uff8f\001\002" +
    "\000\016\030\131\045\015\046\041\047\127\051\051\052" +
    "\022\001\002\000\016\030\131\045\015\046\041\047\127" +
    "\051\051\052\022\001\002\000\036\023\uffa1\024\uffa1\025" +
    "\154\026\153\027\152\031\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\040\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1\001\002\000" +
    "\036\023\uffa5\024\uffa5\025\143\026\142\027\141\031\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\040\uffa5\056\uffa5\057\uffa5\061" +
    "\uffa5\062\uffa5\001\002\000\016\030\131\045\015\046\041" +
    "\047\127\051\051\052\022\001\002\000\016\030\131\045" +
    "\015\046\041\047\127\051\051\052\022\001\002\000\016" +
    "\030\131\045\015\046\041\047\127\051\051\052\022\001" +
    "\002\000\036\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\031\uff9f\033\uff9f\034\uff9f\035\uff9f\040\uff9f\056\uff9f\057" +
    "\uff9f\061\uff9f\062\uff9f\001\002\000\036\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\031\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\040\uff9c\056\uff9c\057\uff9c\061\uff9c\062\uff9c\001\002" +
    "\000\036\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\031" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\040\uff9e\056\uff9e\057\uff9e" +
    "\061\uff9e\062\uff9e\001\002\000\036\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\040\uff9b\056\uff9b\057\uff9b\061\uff9b\062\uff9b\001\002\000" +
    "\036\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\031\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\040\uff9d\056\uff9d\057\uff9d\061" +
    "\uff9d\062\uff9d\001\002\000\036\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\040" +
    "\uff9a\056\uff9a\057\uff9a\061\uff9a\062\uff9a\001\002\000\014" +
    "\030\131\045\015\046\041\051\051\052\022\001\002\000" +
    "\014\030\131\045\015\046\041\051\051\052\022\001\002" +
    "\000\014\030\131\045\015\046\041\051\051\052\022\001" +
    "\002\000\036\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\031\uff99\033\uff99\034\uff99\035\uff99\040\uff99\056\uff99\057" +
    "\uff99\061\uff99\062\uff99\001\002\000\036\023\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\031\uff98\033\uff98\034\uff98\035" +
    "\uff98\040\uff98\056\uff98\057\uff98\061\uff98\062\uff98\001\002" +
    "\000\036\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\031" +
    "\uff97\033\uff97\034\uff97\035\uff97\040\uff97\056\uff97\057\uff97" +
    "\061\uff97\062\uff97\001\002\000\036\023\uffa2\024\uffa2\025" +
    "\154\026\153\027\152\031\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\040\uffa2\056\uffa2\057\uffa2\061\uffa2\062\uffa2\001\002\000" +
    "\036\023\uffa6\024\uffa6\025\143\026\142\027\141\031\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\040\uffa6\056\uffa6\057\uffa6\061" +
    "\uffa6\062\uffa6\001\002\000\012\025\154\026\153\027\152" +
    "\031\165\001\002\000\012\025\143\026\142\027\141\031" +
    "\164\001\002\000\036\023\uff91\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\031\uff91\033\uff91\034\uff91\035\uff91\040\uff91\056" +
    "\uff91\057\uff91\061\uff91\062\uff91\001\002\000\036\023\uff90" +
    "\024\uff90\025\uff90\026\uff90\027\uff90\031\uff90\033\uff90\034" +
    "\uff90\035\uff90\040\uff90\056\uff90\057\uff90\061\uff90\062\uff90" +
    "\001\002\000\014\031\uffea\034\uffea\035\uffea\040\uffea\061" +
    "\uffea\001\002\000\016\030\131\045\015\046\041\047\127" +
    "\051\051\052\022\001\002\000\016\030\131\045\015\046" +
    "\041\047\127\051\051\052\022\001\002\000\010\025\154" +
    "\026\153\027\152\001\002\000\036\023\uffa3\024\uffa3\025" +
    "\143\026\142\027\141\031\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\040\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3\001\002\000" +
    "\036\023\uffa4\024\uffa4\025\143\026\142\027\141\031\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\040\uffa4\056\uffa4\057\uffa4\061" +
    "\uffa4\062\uffa4\001\002\000\050\007\176\011\013\012\016" +
    "\013\040\017\042\020\036\021\046\030\017\037\056\042" +
    "\026\045\015\046\041\047\074\050\050\051\051\052\022" +
    "\053\055\054\010\055\030\001\002\000\006\034\uffe0\061" +
    "\uffe0\001\002\000\006\030\201\047\200\001\002\000\006" +
    "\034\uffe1\061\uffe1\001\002\000\004\043\214\001\002\000" +
    "\006\031\uff8a\047\202\001\002\000\006\031\uffd0\035\uffd0" +
    "\001\002\000\006\031\uffd3\035\212\001\002\000\004\031" +
    "\206\001\002\000\004\031\uffd2\001\002\000\004\043\207" +
    "\001\002\000\056\006\062\011\013\012\016\013\040\015" +
    "\052\016\021\017\042\020\036\021\046\030\017\037\056" +
    "\042\026\045\015\046\041\047\060\050\050\051\051\052" +
    "\022\053\055\054\010\055\030\060\034\001\002\000\004" +
    "\044\211\001\002\000\006\034\uffd7\061\uffd7\001\002\000" +
    "\004\047\213\001\002\000\006\031\uffd1\035\uffd1\001\002" +
    "\000\056\006\062\011\013\012\016\013\040\015\052\016" +
    "\021\017\042\020\036\021\046\030\017\037\056\042\026" +
    "\045\015\046\041\047\060\050\050\051\051\052\022\053" +
    "\055\054\010\055\030\060\034\001\002\000\004\044\216" +
    "\001\002\000\006\034\uffd6\061\uffd6\001\002\000\006\047" +
    "\220\050\050\001\002\000\004\035\uffaf\001\002\000\004" +
    "\035\230\001\002\000\004\035\223\001\002\000\016\030" +
    "\131\045\015\046\041\047\127\051\051\052\022\001\002" +
    "\000\010\023\135\024\136\035\225\001\002\000\016\030" +
    "\131\045\015\046\041\047\127\051\051\052\022\001\002" +
    "\000\010\023\135\024\136\031\227\001\002\000\014\031" +
    "\uffec\034\uffec\035\uffec\040\uffec\061\uffec\001\002\000\016" +
    "\030\131\045\015\046\041\047\127\051\051\052\022\001" +
    "\002\000\010\023\135\024\136\035\232\001\002\000\016" +
    "\030\131\045\015\046\041\047\127\051\051\052\022\001" +
    "\002\000\010\023\135\024\136\031\234\001\002\000\014" +
    "\031\uffed\034\uffed\035\uffed\040\uffed\061\uffed\001\002\000" +
    "\016\030\131\045\015\046\041\047\127\051\051\052\022" +
    "\001\002\000\032\023\167\024\170\025\154\026\153\027" +
    "\152\031\uffc3\034\uffc3\035\uffc3\040\uffc3\057\uffc3\061\uffc3" +
    "\062\uffc3\001\002\000\024\023\135\024\136\031\uffc5\034" +
    "\uffc5\035\uffc5\040\uffc5\057\uffc5\061\uffc5\062\uffc5\001\002" +
    "\000\030\013\245\017\042\020\036\030\242\042\026\045" +
    "\015\046\041\047\243\051\051\052\022\055\030\001\002" +
    "\000\010\023\135\024\136\056\235\001\002\000\032\013" +
    "\245\017\042\020\036\024\132\030\242\042\026\045\015" +
    "\046\041\047\243\051\051\052\022\055\030\001\002\000" +
    "\034\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\031\uffcb" +
    "\034\uffcb\035\uffcb\040\uffcb\056\uffa7\057\uffcb\061\uffcb\062" +
    "\uffcb\001\002\000\016\031\uffc8\034\uffc8\035\uffc8\040\uffc8" +
    "\061\uffc8\062\uffc8\001\002\000\004\041\246\001\002\000" +
    "\004\030\247\001\002\000\046\011\013\012\016\013\040" +
    "\017\042\020\036\021\046\030\017\037\056\042\026\045" +
    "\015\046\041\047\074\050\050\051\051\052\022\053\055" +
    "\054\010\055\030\001\002\000\004\031\251\001\002\000" +
    "\020\031\uffbf\034\uffbf\035\uffbf\040\uffbf\057\uffbf\061\uffbf" +
    "\062\uffbf\001\002\000\012\023\135\024\136\031\134\056" +
    "\235\001\002\000\004\031\254\001\002\000\020\031\uffc0" +
    "\034\uffc0\035\uffc0\040\uffc0\057\uffc0\061\uffc0\062\uffc0\001" +
    "\002\000\004\030\256\001\002\000\046\011\013\012\016" +
    "\013\040\017\042\020\036\021\046\030\017\037\056\042" +
    "\026\045\015\046\041\047\074\050\050\051\051\052\022" +
    "\053\055\054\010\055\030\001\002\000\004\035\260\001" +
    "\002\000\046\011\013\012\016\013\040\017\042\020\036" +
    "\021\046\030\017\037\056\042\026\045\015\046\041\047" +
    "\074\050\050\051\051\052\022\053\055\054\010\055\030" +
    "\001\002\000\004\031\262\001\002\000\020\031\uffbe\034" +
    "\uffbe\035\uffbe\040\uffbe\057\uffbe\061\uffbe\062\uffbe\001\002" +
    "\000\046\011\013\012\016\013\040\017\042\020\036\021" +
    "\046\030\017\037\056\042\026\045\015\046\041\047\074" +
    "\050\050\051\051\052\022\053\055\054\010\055\030\001" +
    "\002\000\004\035\265\001\002\000\046\011\013\012\016" +
    "\013\040\017\042\020\036\021\046\030\017\037\056\042" +
    "\026\045\015\046\041\047\074\050\050\051\051\052\022" +
    "\053\055\054\010\055\030\001\002\000\004\031\267\001" +
    "\002\000\014\031\uff8c\034\uff8c\035\uff8c\040\uff8c\061\uff8c" +
    "\001\002\000\004\030\271\001\002\000\046\011\013\012" +
    "\016\013\040\017\042\020\036\021\046\030\017\037\056" +
    "\042\026\045\015\046\041\047\074\050\050\051\051\052" +
    "\022\053\055\054\010\055\030\001\002\000\004\035\273" +
    "\001\002\000\046\011\013\012\016\013\040\017\042\020" +
    "\036\021\046\030\017\037\056\042\026\045\015\046\041" +
    "\047\074\050\050\051\051\052\022\053\055\054\010\055" +
    "\030\001\002\000\004\031\275\001\002\000\020\031\uffbd" +
    "\034\uffbd\035\uffbd\040\uffbd\057\uffbd\061\uffbd\062\uffbd\001" +
    "\002\000\004\062\277\001\002\000\056\006\062\011\013" +
    "\012\016\013\040\015\052\016\021\017\042\020\036\021" +
    "\046\030\017\037\056\042\026\045\015\046\041\047\060" +
    "\050\050\051\051\052\022\053\055\054\010\055\030\060" +
    "\034\001\002\000\006\034\302\061\301\001\002\000\056" +
    "\006\062\011\013\012\016\013\040\015\052\016\021\017" +
    "\042\020\036\021\046\030\017\037\056\042\026\045\015" +
    "\046\041\047\060\050\050\051\051\052\022\053\055\054" +
    "\010\055\030\060\034\001\002\000\006\034\uffe6\061\uffe6" +
    "\001\002\000\006\034\uffe7\061\uffe7\001\002\000\016\030" +
    "\131\045\015\046\041\047\127\051\051\052\022\001\002" +
    "\000\010\023\135\024\136\033\306\001\002\000\014\031" +
    "\uffeb\034\uffeb\035\uffeb\040\uffeb\061\uffeb\001\002\000\020" +
    "\031\uffc7\034\uffc7\035\uffc7\040\uffc7\057\240\061\uffc7\062" +
    "\uffc7\001\002\000\016\031\uffc9\034\uffc9\035\uffc9\040\uffc9" +
    "\061\uffc9\062\uffc9\001\002\000\046\011\013\012\016\013" +
    "\040\017\042\020\036\021\046\030\017\037\056\042\026" +
    "\045\015\046\041\047\074\050\050\051\051\052\022\053" +
    "\055\054\010\055\030\001\002\000\004\031\313\001\002" +
    "\000\006\034\ufffa\061\ufffa\001\002\000\016\030\131\045" +
    "\015\046\041\047\127\051\051\052\022\001\002\000\024" +
    "\023\135\024\136\031\uffc4\034\uffc4\035\uffc4\040\uffc4\057" +
    "\uffc4\061\uffc4\062\uffc4\001\002\000\006\031\254\035\ufff3" +
    "\001\002\000\014\023\135\024\136\031\134\035\ufff7\056" +
    "\235\001\002\000\006\013\323\047\321\001\002\000\004" +
    "\031\uff8e\001\002\000\004\031\326\001\002\000\004\030" +
    "\263\001\002\000\004\031\325\001\002\000\014\031\uffef" +
    "\034\uffef\035\uffef\040\uffef\061\uffef\001\002\000\014\031" +
    "\uffee\034\uffee\035\uffee\040\uffee\061\uffee\001\002\000\006" +
    "\013\323\047\321\001\002\000\004\031\333\001\002\000" +
    "\004\031\332\001\002\000\014\031\ufff1\034\ufff1\035\ufff1" +
    "\040\ufff1\061\ufff1\001\002\000\014\031\ufff0\034\ufff0\035" +
    "\ufff0\040\ufff0\061\ufff0\001\002\000\030\013\245\017\042" +
    "\020\036\030\242\042\026\045\015\046\041\047\243\051" +
    "\051\052\022\055\030\001\002\000\016\031\uffca\034\uffca" +
    "\035\uffca\040\uffca\061\uffca\062\uffca\001\002\000\004\034" +
    "\337\001\002\000\062\002\uffff\006\uffff\011\uffff\012\uffff" +
    "\013\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\030" +
    "\uffff\037\uffff\042\uffff\044\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\060" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\070\003\063\006\003\007\006\010\062\011" +
    "\030\012\052\013\056\015\004\016\043\017\026\020\034" +
    "\021\031\022\036\023\023\024\046\025\024\026\011\027" +
    "\013\030\010\031\060\032\005\033\032\047\022\050\042" +
    "\052\017\056\053\057\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\063\010\335" +
    "\011\030\012\052\013\056\015\004\016\043\017\026\020" +
    "\034\021\031\022\036\023\023\024\046\025\024\026\011" +
    "\027\013\030\010\031\060\032\005\033\032\047\022\050" +
    "\042\052\017\056\053\057\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\012\072\013\056\015\004\016\316\017\026\020\034\021" +
    "\031\022\036\023\023\024\046\025\024\026\011\027\315" +
    "\030\010\031\060\032\005\033\032\046\071\050\042\052" +
    "\017\056\053\057\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\240\017\026\020\034" +
    "\027\307\030\010\031\060\050\306\052\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\240\017\026\020" +
    "\034\027\275\030\010\031\060\050\042\052\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\005\075\012\100\013\056\015\004" +
    "\016\043\017\026\020\034\021\031\022\036\023\023\024" +
    "\046\025\024\026\011\027\013\030\010\031\060\032\005" +
    "\033\032\044\077\045\122\050\042\052\017\056\053\057" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\012\072\013\056\015" +
    "\004\016\043\017\026\020\034\021\031\022\036\023\023" +
    "\024\046\025\024\026\011\027\013\030\010\031\060\032" +
    "\005\033\032\046\071\050\042\052\017\056\053\057\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\005\075\012\100\013\056\015\004\016\043" +
    "\017\026\020\034\021\031\022\036\023\023\024\046\025" +
    "\024\026\011\027\013\030\010\031\060\032\005\033\032" +
    "\044\077\045\076\050\042\052\017\056\053\057\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\012\102\013\056\015\004\016" +
    "\043\017\026\020\034\021\031\022\036\023\023\024\046" +
    "\025\024\026\011\027\013\030\010\031\060\032\005\033" +
    "\032\050\042\052\017\056\053\057\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\012\105\013\056\015" +
    "\004\016\043\017\026\020\034\021\031\022\036\023\023" +
    "\024\046\025\024\026\011\027\013\030\010\031\060\032" +
    "\005\033\032\050\042\052\017\056\053\057\044\001\001" +
    "\000\002\001\001\000\054\012\110\013\056\015\004\016" +
    "\043\017\026\020\034\021\031\022\036\023\023\024\046" +
    "\025\024\026\011\027\013\030\010\031\060\032\005\033" +
    "\032\050\042\052\017\056\053\057\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\012\114\013\056\015\004\016\043\017\026" +
    "\020\034\021\031\022\036\023\023\024\046\025\024\026" +
    "\011\027\013\030\010\031\060\032\005\033\032\050\042" +
    "\052\017\056\053\057\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\012\120\013\056" +
    "\015\004\016\043\017\026\020\034\021\031\022\036\023" +
    "\023\024\046\025\024\026\011\027\013\030\010\031\060" +
    "\032\005\033\032\050\042\052\017\056\053\057\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\127\017\026\020\034\052" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\132\017\026\020\034\052\125\001" +
    "\001\000\010\017\162\020\034\052\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\160\020\034\052" +
    "\157\001\001\000\010\017\137\020\034\052\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\147\052" +
    "\150\001\001\000\006\020\145\052\146\001\001\000\006" +
    "\020\143\052\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\156\001\001\000\004\020" +
    "\155\001\001\000\004\020\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\172\020\034\052\170\001\001\000\010\017\171\020\034" +
    "\052\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\012\176\013\056\014\174\015\004" +
    "\016\043\017\026\020\034\021\031\022\036\023\023\024" +
    "\046\025\024\026\011\027\013\030\010\031\060\032\005" +
    "\033\032\050\042\052\017\056\053\057\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\202\004\203\005\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\063\006\207\007" +
    "\006\010\062\011\030\012\052\013\056\015\004\016\043" +
    "\017\026\020\034\021\031\022\036\023\023\024\046\025" +
    "\024\026\011\027\013\030\010\031\060\032\005\033\032" +
    "\047\022\050\042\052\017\056\053\057\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\003\063\006\214\007\006\010\062\011" +
    "\030\012\052\013\056\015\004\016\043\017\026\020\034" +
    "\021\031\022\036\023\023\024\046\025\024\026\011\027" +
    "\013\030\010\031\060\032\005\033\032\047\022\050\042" +
    "\052\017\056\053\057\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\220\022\036\023\023\053\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\223\017\026\020\034\052\125\001\001" +
    "\000\002\001\001\000\012\016\225\017\026\020\034\052" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\230\017\026\020\034\052\125\001\001\000\002\001" +
    "\001\000\012\016\232\017\026\020\034\052\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\236\017" +
    "\026\020\034\052\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\240\017\026\020\034\027\243\030" +
    "\010\031\060\050\042\052\017\001\001\000\002\001\001" +
    "\000\022\016\251\017\026\020\034\027\252\030\010\031" +
    "\060\050\042\052\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\012" +
    "\247\013\056\015\004\016\043\017\026\020\034\021\031" +
    "\022\036\023\023\024\046\025\024\026\011\027\013\030" +
    "\010\031\060\032\005\033\032\050\042\052\017\056\053" +
    "\057\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\012\256\013\056\015\004\016\043\017" +
    "\026\020\034\021\031\022\036\023\023\024\046\025\024" +
    "\026\011\027\013\030\010\031\060\032\005\033\032\050" +
    "\042\052\017\056\053\057\044\001\001\000\002\001\001" +
    "\000\054\012\260\013\056\015\004\016\043\017\026\020" +
    "\034\021\031\022\036\023\023\024\046\025\024\026\011" +
    "\027\013\030\010\031\060\032\005\033\032\050\042\052" +
    "\017\056\053\057\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\012\263\013\056\015\004\016\043\017" +
    "\026\020\034\021\031\022\036\023\023\024\046\025\024" +
    "\026\011\027\013\030\010\031\060\032\005\033\032\050" +
    "\042\052\017\056\053\057\044\001\001\000\002\001\001" +
    "\000\054\012\265\013\056\015\004\016\043\017\026\020" +
    "\034\021\031\022\036\023\023\024\046\025\024\026\011" +
    "\027\013\030\010\031\060\032\005\033\032\050\042\052" +
    "\017\056\053\057\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\012\271\013\056\015" +
    "\004\016\043\017\026\020\034\021\031\022\036\023\023" +
    "\024\046\025\024\026\011\027\013\030\010\031\060\032" +
    "\005\033\032\050\042\052\017\056\053\057\044\001\001" +
    "\000\002\001\001\000\054\012\273\013\056\015\004\016" +
    "\043\017\026\020\034\021\031\022\036\023\023\024\046" +
    "\025\024\026\011\027\013\030\010\031\060\032\005\033" +
    "\032\050\042\052\017\056\053\057\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\063\010\277\011\030\012\052\013\056\015\004\016\043" +
    "\017\026\020\034\021\031\022\036\023\023\024\046\025" +
    "\024\026\011\027\013\030\010\031\060\032\005\033\032" +
    "\047\022\050\042\052\017\056\053\057\044\001\001\000" +
    "\002\001\001\000\064\003\063\010\302\011\030\012\052" +
    "\013\056\015\004\016\043\017\026\020\034\021\031\022" +
    "\036\023\023\024\046\025\024\026\011\027\013\030\010" +
    "\031\060\032\005\033\032\047\022\050\042\052\017\056" +
    "\053\057\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\304\017\026\020\034\052\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\012\311\013\056\015\004\016\043\017" +
    "\026\020\034\021\031\022\036\023\023\024\046\025\024" +
    "\026\011\027\013\030\010\031\060\032\005\033\032\050" +
    "\042\052\017\056\053\057\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\314\017\026\020\034\052" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\323\055\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\330\055" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\240\017\026\020" +
    "\034\027\334\030\010\031\060\050\042\052\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // No longer necessary    
    
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
        System.out.println(ioe.getMessage());
        throw ioe;
    }
    
    }


    SMPLLexer lexer;

    public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

    public SMPLParser(String file) throws FileNotFoundException {
              this(new SMPLLexer(new FileReader(file)));
    }

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(new InputStreamReader(is)));
                }

    public void report_error(String message, Object info) {
        System.err.println(message + info);
    }

    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error while reading: ", cur_token);
        System.err.println ("Last token read is " +
           lexer.getText());
    }
      

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {

          
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram start_val = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SIRProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SIRProgram(seq);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt SEMI 
            {
              SIRSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt SEMI 
            {
              SIRSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            SIRSequence seq = new SIRSequence();
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment 
            {
              SIRStatement RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement assign = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = assign;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IFCond 
            {
              SIRStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ConditionalStatement cond = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = cond;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= PRINT LPAREN smplExp RPAREN 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintStmt(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= PRINTLN LPAREN smplExp RPAREN 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintStmt(exp, true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= smplExp 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Statement(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expressions ::= pairExp 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pair; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressions ::= arithExp 
            {
              SIRObj RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = aExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressions ::= vectorExp 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (VectorExp) vector; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressions ::= stringExp 
            {
              SIRObj RESULT =null;
		int sExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp sExp = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = sExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressions ::= charExp 
            {
              SIRObj RESULT =null;
		int chExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp chExp = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = chExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressions ::= boolExp 
            {
              SIRObj RESULT =null;
		int bExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bExp = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expressions ::= tupleExp 
            {
              SIRObj RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = tuple; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expressions ::= CAR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressions ::= CAR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressions ::= CDR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressions ::= CDR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressions ::= SUBSTR LPAREN stringExp COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressions ::= SUBSTR LPAREN stringVar COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions ::= vectorExp LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= vectorVar LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literals ::= VAR 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRVar(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literals ::= VAR LPAREN smplExpListE RPAREN 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> exp = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("call", new SIRVar(id), exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFCond ::= IF boolExp THEN stmt ELSE stmt 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRStatement s1 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s2 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new ConditionalStatement(bool, s1, s2);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IFCond ::= IF boolExp THEN stmt SEMI 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new ConditionalStatement(bool, s);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tupleExp ::= LPAREN tupleExpList RPAREN 
            {
              TupleExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		  
                                            RESULT = new TupleExp(lst);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExp",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment ::= VAR ASSIGN smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SMPLAssignment(id, exp);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= ids ASSIGN tupleExp 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new TupleAssignment(lst, tuple); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment ::= ids ASSIGN VAR 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = new TupleAssignment(lst, new TupleExp(new SIRVar<CompoundExp>(id)));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignment ::= DEF VAR smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignment ::= DEF VAR procDefn 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj proc = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, proc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tupleExpList ::= tupleExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tupleExpList ::= smplExp COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            lst.add(exp1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // smplExpListE ::= smplExpList 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // smplExpListE ::= empty 
            {
              ArrayList<SIRObj> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // smplExpList ::= smplExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // smplExpList ::= smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // smplExp ::= literals 
            {
              SIRObj RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lit; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // smplExp ::= expressions 
            {
              SIRObj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj expr = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procDefn ::= PROC LPAREN paramListE RPAREN LCURL program RCURL 
            {
              SIRObj RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ProcExp(params, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procDefn ::= PROC VAR LCURL program RCURL 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ProcExp(id, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ids ::= ids COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ids ::= VAR COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            lst.add(id1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bExpListE ::= bExpList 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bExpListE ::= empty 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bExpList ::= bExpList COMMA boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bExpList ::= boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolVar ::= VAR 
            {
              BoolExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BoolLit(new SIRVar<BoolExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolVar",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // boolExp ::= boolTerm LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // boolExp ::= NOT boolExp 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boolExp ::= boolVar LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boolExp ::= NOT boolVar 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // boolExp ::= boolTerm 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // boolTerm ::= arithExp RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // boolTerm ::= arithVar RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolTerm ::= arithExp RATIONAL arithVar 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolTerm ::= boolFactor 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolFactor ::= BOOL 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            if (bool.equals("#t")) {
                                                RESULT = new BoolLit(true); 
                                            } else {
                                                RESULT = new BoolLit(false);
                                            }
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolFactor ::= LPAREN boolExp RPAREN 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolFactor ::= PAIR QUES LPAREN smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("pair?", exp)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolFactor ::= EQV QUES LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("eqv?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolFactor ::= EQUAL QUES LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("equal?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cExpListE ::= cExpList 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cExpListE ::= empty 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cExpList ::= cExpList COMMA charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cExpList ::= charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // charVar ::= VAR 
            {
              CharExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(new SIRVar<CharExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charVar",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // charExp ::= charTerm 
            {
              CharExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp t = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charExp",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // charTerm ::= charFactor 
            {
              CharExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp f = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charTerm",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // charFactor ::= CHAR 
            {
              CharExp RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(ch.charAt(0), "#c"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // charFactor ::= UNICODE 
            {
              CharExp RESULT =null;
		int unileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String uni = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(uni, "#u"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // strExpListE ::= strExpListE 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // strExpListE ::= empty 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // strExpList ::= strExpList COMMA stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // strExpList ::= stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stringVar ::= VAR 
            {
              StringExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(new SIRVar<StringExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringVar",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stringExp ::= stringTerm 
            {
              StringExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp t = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stringTerm ::= stringFactor 
            {
              StringExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp f = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringTerm",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stringFactor ::= STRING 
            {
              StringExp RESULT =null;
		int sLitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sLitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String sLit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(sLit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringFactor",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // aExpListE ::= aExpList 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // aExpListE ::= empty 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // aExpList ::= aExpList COMMA arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // aExpList ::= arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arithVar ::= VAR 
            {
              AIRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(new SIRVar<AIRExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithVar",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arithExp ::= arithExp PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arithExp ::= arithExp MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arithExp ::= arithVar PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arithExp ::= arithVar MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arithExp ::= arithExp PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // arithExp ::= arithExp MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // arithExp ::= arithTerm 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // arithTerm ::= arithTerm DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arithTerm ::= arithTerm MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // arithTerm ::= arithTerm TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // arithTerm ::= arithTerm DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arithTerm ::= arithTerm MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arithTerm ::= arithVar TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arithTerm ::= arithVar DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arithTerm ::= arithVar MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arithTerm ::= arithFactor 
            {
              AIRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arithFactor ::= INTEGER 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer alit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arithFactor ::= REAL 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double alit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, "#r"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arithFactor ::= HEX 
            {
              AIRExp RESULT =null;
		int hexleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hexright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer hex = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(hex, "#x"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arithFactor ::= BINARY 
            {
              AIRExp RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer bin = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(bin, "#b"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arithFactor ::= LPAREN MINUS arithTerm RPAREN 
            {
              AIRExp RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aExp);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arithFactor ::= LPAREN MINUS arithVar RPAREN 
            {
              AIRExp RESULT =null;
		int aVarleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aVarright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aVar = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aVar);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // arithFactor ::= LPAREN arithExp RPAREN 
            {
              AIRExp RESULT =null;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aexp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = aexp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pairVar ::= VAR 
            {
              CompoundExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairLit(new SIRVar<CompoundExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairVar",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // vectorVar ::= VAR 
            {
              CompoundExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VectorLit(new SIRVar<CompoundExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorVar",44, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // pairExp ::= PAIR LPAREN smplExp COMMA smplExp RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj e1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj e2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new PairExp(new SIRFunctionExp("pair", e1, e2) );
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // vectorExp ::= LBCOLON smplExpListE RBCOLON 
            {
              VectorExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
						SIRObj[] result = new SIRObj[lst.size()];
						result = lst.toArray(result);
						RESULT = new VectorExp(new SIRFunctionExp("vector", result)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
