
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.lang.*;
import smpl.lang.arith.*;
import smpl.lang.bool.*;
import smpl.lang.chars.*;
import smpl.lang.compound.*;
import smpl.lang.statements.*;
import smpl.lang.string.*;
import smpl.values.type.compound.SMPLSingleCase;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\007\003\000\002\010" +
    "\004\000\002\010\003\000\002\011\004\000\002\011\004" +
    "\000\002\011\007\000\002\011\007\000\002\011\006\000" +
    "\002\011\006\000\002\011\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\016\003\000\002\016\006\000\002\016\010\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\012\000\002\016\012\000\002\016" +
    "\012\000\002\016\012\000\002\016\012\000\002\016\012" +
    "\000\002\016\012\000\002\016\012\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\005\000\002\052\010\000\002\052" +
    "\006\000\002\017\006\000\002\051\005\000\002\051\003" +
    "\000\002\063\005\000\002\063\005\000\002\062\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\050\005\000\002\050" +
    "\005\000\002\047\003\000\002\047\003\000\002\046\005" +
    "\000\002\046\003\000\002\013\003\000\002\013\003\000" +
    "\002\015\011\000\002\015\005\000\002\003\005\000\002" +
    "\003\005\000\002\004\003\000\002\004\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\002\005" +
    "\000\002\002\003\000\002\045\003\000\002\045\003\000" +
    "\002\044\005\000\002\044\003\000\002\053\003\000\002" +
    "\031\005\000\002\031\004\000\002\031\005\000\002\031" +
    "\005\000\002\031\004\000\002\031\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\003\000" +
    "\002\033\003\000\002\033\005\000\002\033\006\000\002" +
    "\033\010\000\002\033\010\000\002\041\003\000\002\041" +
    "\003\000\002\040\005\000\002\040\003\000\002\057\003" +
    "\000\002\026\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\037\003\000\002\037\003\000\002" +
    "\036\005\000\002\036\003\000\002\056\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\024\003\000\002\025\003\000" +
    "\002\043\003\000\002\043\003\000\002\042\005\000\002" +
    "\042\003\000\002\055\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\006\000\002\022" +
    "\006\000\002\022\005\000\002\060\003\000\002\061\003" +
    "\000\002\034\010\000\002\035\005\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\076\005\045\006\074\010\035\013\016\014" +
    "\021\015\047\016\056\017\063\020\024\021\051\022\044" +
    "\023\057\024\046\026\054\027\014\030\015\036\022\040" +
    "\006\045\070\050\031\053\020\054\050\055\073\056\061" +
    "\057\062\060\025\061\067\062\011\063\034\067\041\001" +
    "\002\000\004\002\u0128\001\002\000\036\025\uff98\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uffc5\040\uff6d\041" +
    "\uffc5\042\uffc5\043\uffc5\046\uffc5\064\uff8c\065\uffb5\001\002" +
    "\000\064\005\045\010\035\013\016\014\021\015\047\016" +
    "\056\021\051\022\044\023\057\024\046\030\015\036\022" +
    "\040\006\041\uff6a\045\070\050\031\053\020\054\050\055" +
    "\106\056\061\057\062\060\025\061\067\062\011\063\034" +
    "\001\002\000\014\037\ufff6\041\ufff6\042\ufff6\043\ufff6\046" +
    "\ufff6\001\002\000\104\002\000\005\045\006\074\010\035" +
    "\013\016\014\021\015\047\016\056\017\063\020\024\021" +
    "\051\022\044\023\057\024\046\026\054\027\014\030\015" +
    "\036\022\040\006\042\000\045\070\050\031\052\000\053" +
    "\020\054\050\055\073\056\061\057\062\060\025\061\067" +
    "\062\011\063\034\067\041\001\002\000\014\037\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\046\uff9e\001\002\000\022\037\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\065\u0123\071" +
    "\uffaf\001\002\000\014\037\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\046\uff9f\001\002\000\004\036\u0120\001\002\000\004\051" +
    "\u0113\001\002\000\004\036\u010e\001\002\000\014\037\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\046\ufff1\001\002\000\036\031" +
    "\uff75\032\uff75\033\uff75\034\uff75\035\uff75\037\uff75\041\uff75" +
    "\042\uff75\043\uff75\044\uff75\046\uff75\064\uff75\065\uff75\071" +
    "\uff75\001\002\000\004\036\u0108\001\002\000\064\005\045" +
    "\010\035\013\016\014\021\015\047\016\056\021\051\022" +
    "\044\023\057\024\046\030\015\032\207\036\022\040\006" +
    "\045\070\050\031\053\020\054\050\055\106\056\061\057" +
    "\062\060\025\061\067\062\011\063\034\001\002\000\016" +
    "\031\146\032\147\033\151\034\150\035\145\064\u0104\001" +
    "\002\000\004\036\u0100\001\002\000\036\031\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\037\uff73\041\uff73\042\uff73\043" +
    "\uff73\044\uff73\046\uff73\064\uff73\065\uff73\071\uff73\001\002" +
    "\000\004\042\377\001\002\000\016\025\uff92\037\uff92\041" +
    "\uff92\042\uff92\043\uff92\046\uff92\001\002\000\014\037\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\046\uffa0\001\002\000\050\005" +
    "\045\010\035\013\016\014\021\016\056\021\051\022\044" +
    "\023\057\024\046\036\325\040\006\045\070\050\031\053" +
    "\020\054\050\055\106\057\062\060\025\063\034\001\002" +
    "\000\036\031\uff83\032\uff83\033\162\034\161\035\160\037" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\046\uff83\064\uff83" +
    "\065\uff83\071\uff83\001\002\000\014\037\uffef\041\uffef\042" +
    "\uffef\043\uffef\046\uffef\001\002\000\022\037\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\046\uffaa\065\uffaa\071\uffaa\001" +
    "\002\000\004\036\370\001\002\000\004\042\367\001\002" +
    "\000\016\025\255\037\ufff3\041\ufff3\042\ufff3\043\ufff3\046" +
    "\ufff3\001\002\000\016\037\ufff4\040\175\041\ufff4\042\ufff4" +
    "\043\ufff4\046\ufff4\001\002\000\050\005\045\010\035\013" +
    "\016\014\021\016\056\021\051\022\044\023\057\024\046" +
    "\036\325\040\006\045\070\050\031\053\020\054\050\055" +
    "\106\057\062\060\025\063\034\001\002\000\036\031\uff76" +
    "\032\uff76\033\uff76\034\uff76\035\uff76\037\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\046\uff76\064\uff76\065\uff76\071\uff76" +
    "\001\002\000\016\025\uff93\037\uff93\041\uff93\042\uff93\043" +
    "\uff93\046\uff93\001\002\000\004\036\355\001\002\000\004" +
    "\036\347\001\002\000\004\036\344\001\002\000\004\036" +
    "\337\001\002\000\036\031\uff74\032\uff74\033\uff74\034\uff74" +
    "\035\uff74\037\uff74\041\uff74\042\uff74\043\uff74\044\uff74\046" +
    "\uff74\064\uff74\065\uff74\071\uff74\001\002\000\004\036\332" +
    "\001\002\000\004\065\322\001\002\000\022\031\177\032" +
    "\201\037\ufff5\041\ufff5\042\ufff5\043\ufff5\046\ufff5\064\317" +
    "\001\002\000\004\036\314\001\002\000\014\037\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\046\ufff0\001\002\000\004\036\311" +
    "\001\002\000\004\036\251\001\002\000\014\037\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\046\ufff2\001\002\000\016\025\uff91" +
    "\037\uff91\041\uff91\042\uff91\043\uff91\046\uff91\001\002\000" +
    "\036\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\037\uff72" +
    "\041\uff72\042\uff72\043\uff72\044\uff72\046\uff72\064\uff72\065" +
    "\uff72\071\uff72\001\002\000\004\055\223\001\002\000\004" +
    "\025\217\001\002\000\004\042\216\001\002\000\004\040" +
    "\137\001\002\000\014\037\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\046\uff9d\001\002\000\064\005\045\010\035\013\016\014" +
    "\021\015\047\016\056\021\051\022\044\023\057\024\046" +
    "\030\015\036\022\040\006\045\070\046\uff6a\050\031\053" +
    "\020\054\050\055\106\056\061\057\062\060\025\061\067" +
    "\062\011\063\034\001\002\000\014\037\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\046\uffc6\001\002\000\022\037\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\046\uffab\065\uffab\071\uffab\001" +
    "\002\000\034\004\132\025\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\107\040\uffee\042\uffee\043\131\064" +
    "\uffee\065\uffee\001\002\000\004\036\125\001\002\000\106" +
    "\002\ufffe\005\ufffe\006\ufffe\010\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\026\ufffe\027\ufffe\030\ufffe\036\ufffe\040\ufffe\042" +
    "\ufffe\043\ufffe\045\ufffe\050\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\067\ufffe\001\002\000\006\004\100\043\077\001\002" +
    "\000\004\055\124\001\002\000\006\036\103\055\102\001" +
    "\002\000\004\042\uffd0\001\002\000\004\042\uffcf\001\002" +
    "\000\062\005\045\010\035\013\016\014\021\015\047\016" +
    "\056\021\051\022\044\023\057\024\046\030\015\036\022" +
    "\040\006\045\070\050\031\053\020\054\050\055\106\056" +
    "\061\057\062\060\025\061\067\062\011\063\034\001\002" +
    "\000\006\037\122\043\121\001\002\000\004\043\117\001" +
    "\002\000\044\025\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\107\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\046\uffee\064\uffee\065\uffee\071\uffee\001\002" +
    "\000\064\005\045\010\035\013\016\014\021\015\047\016" +
    "\056\021\051\022\044\023\057\024\046\030\015\036\022" +
    "\037\uff6a\040\006\045\070\050\031\053\020\054\050\055" +
    "\106\056\061\057\062\060\025\061\067\062\011\063\034" +
    "\001\002\000\010\037\uffc9\041\uffc9\046\uffc9\001\002\000" +
    "\004\037\116\001\002\000\012\037\uffca\041\uffca\043\114" +
    "\046\uffca\001\002\000\012\037\uffc7\041\uffc7\043\uffc7\046" +
    "\uffc7\001\002\000\062\005\045\010\035\013\016\014\021" +
    "\015\047\016\056\021\051\022\044\023\057\024\046\030" +
    "\015\036\022\040\006\045\070\050\031\053\020\054\050" +
    "\055\106\056\061\057\062\060\025\061\067\062\011\063" +
    "\034\001\002\000\012\037\uffc8\041\uffc8\043\uffc8\046\uffc8" +
    "\001\002\000\042\025\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\046\uffed\064\uffed\065\uffed\071\uffed\001\002\000" +
    "\062\005\045\010\035\013\016\014\021\015\047\016\056" +
    "\021\051\022\044\023\057\024\046\030\015\036\022\040" +
    "\006\045\070\050\031\053\020\054\050\055\106\056\061" +
    "\057\062\060\025\061\067\062\011\063\034\001\002\000" +
    "\006\037\uffcb\043\uffcb\001\002\000\062\005\045\010\035" +
    "\013\016\014\021\015\047\016\056\021\051\022\044\023" +
    "\057\024\046\030\015\036\022\040\006\045\070\050\031" +
    "\053\020\054\050\055\106\056\061\057\062\060\025\061" +
    "\067\062\011\063\034\001\002\000\014\037\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\046\uffd2\001\002\000\006\037\uffcc\043" +
    "\uffcc\001\002\000\006\004\uffc2\043\uffc2\001\002\000\062" +
    "\005\045\010\035\013\016\014\021\015\047\016\056\021" +
    "\051\022\044\023\057\024\046\030\015\036\022\040\006" +
    "\045\070\050\031\053\020\054\050\055\106\056\061\057" +
    "\062\060\025\061\067\062\011\063\034\001\002\000\004" +
    "\037\127\001\002\000\004\042\130\001\002\000\110\002" +
    "\ufffb\005\ufffb\006\ufffb\010\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\036\ufffb\040\ufffb\042\ufffb" +
    "\043\ufffb\045\ufffb\050\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\067\ufffb\070\ufffb\001\002\000\004\055\134\001\002\000" +
    "\062\005\045\010\035\013\016\014\021\015\047\016\056" +
    "\021\051\022\044\023\057\024\046\030\015\036\022\040" +
    "\006\045\070\050\031\053\020\054\050\055\106\056\061" +
    "\057\062\060\025\061\067\062\011\063\034\001\002\000" +
    "\004\042\uffd1\001\002\000\006\004\uffc1\043\uffc1\001\002" +
    "\000\004\046\136\001\002\000\016\037\uff6b\040\uff6b\041" +
    "\uff6b\042\uff6b\043\uff6b\046\uff6b\001\002\000\036\005\045" +
    "\010\035\013\016\014\021\016\056\023\057\036\142\040" +
    "\006\045\070\053\020\054\050\055\106\057\062\060\025" +
    "\001\002\000\010\031\177\032\201\041\215\001\002\000" +
    "\040\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c" +
    "\040\uff6d\041\uff8c\042\uff8c\043\uff8c\044\uff8c\046\uff8c\064" +
    "\uff8c\065\uff8c\071\uff8c\001\002\000\040\005\045\010\035" +
    "\013\016\014\021\016\056\023\057\032\207\036\142\040" +
    "\006\045\070\053\020\054\050\055\106\057\062\060\025" +
    "\001\002\000\004\040\175\001\002\000\014\031\146\032" +
    "\147\033\151\034\150\035\145\001\002\000\036\005\045" +
    "\010\035\013\016\014\021\016\056\023\057\036\142\040" +
    "\006\045\070\053\020\054\050\055\106\057\062\060\025" +
    "\001\002\000\036\005\045\010\035\013\016\014\021\016" +
    "\056\023\057\036\142\040\006\045\070\053\020\054\050" +
    "\055\106\057\062\060\025\001\002\000\036\005\045\010" +
    "\035\013\016\014\021\016\056\023\057\036\142\040\006" +
    "\045\070\053\020\054\050\055\106\057\062\060\025\001" +
    "\002\000\036\005\045\010\035\013\016\014\021\016\056" +
    "\023\057\036\142\040\006\045\070\053\020\054\050\055" +
    "\106\057\062\060\025\001\002\000\036\005\045\010\035" +
    "\013\016\014\021\016\056\023\057\036\142\040\006\045" +
    "\070\053\020\054\050\055\106\057\062\060\025\001\002" +
    "\000\036\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\037" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\046\uff7c\064\uff7c" +
    "\065\uff7c\071\uff7c\001\002\000\036\031\uff79\032\uff79\033" +
    "\uff79\034\uff79\035\uff79\037\uff79\041\uff79\042\uff79\043\uff79" +
    "\044\uff79\046\uff79\064\uff79\065\uff79\071\uff79\001\002\000" +
    "\036\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\037\uff7b" +
    "\041\uff7b\042\uff7b\043\uff7b\044\uff7b\046\uff7b\064\uff7b\065" +
    "\uff7b\071\uff7b\001\002\000\036\031\uff78\032\uff78\033\uff78" +
    "\034\uff78\035\uff78\037\uff78\041\uff78\042\uff78\043\uff78\044" +
    "\uff78\046\uff78\064\uff78\065\uff78\071\uff78\001\002\000\036" +
    "\031\uff88\032\uff88\033\162\034\161\035\160\037\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\046\uff88\064\uff88\065\uff88" +
    "\071\uff88\001\002\000\036\031\uff84\032\uff84\033\151\034" +
    "\150\035\145\037\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\046\uff84\064\uff84\065\uff84\071\uff84\001\002\000\036\005" +
    "\045\010\035\013\016\014\021\016\056\023\057\036\142" +
    "\040\006\045\070\053\020\054\050\055\106\057\062\060" +
    "\025\001\002\000\036\005\045\010\035\013\016\014\021" +
    "\016\056\023\057\036\142\040\006\045\070\053\020\054" +
    "\050\055\106\057\062\060\025\001\002\000\036\005\045" +
    "\010\035\013\016\014\021\016\056\023\057\036\142\040" +
    "\006\045\070\053\020\054\050\055\106\057\062\060\025" +
    "\001\002\000\036\031\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\037\uff82\041\uff82\042\uff82\043\uff82\044\uff82\046\uff82" +
    "\064\uff82\065\uff82\071\uff82\001\002\000\036\031\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\037\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\046\uff7f\064\uff7f\065\uff7f\071\uff7f\001" +
    "\002\000\036\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81" +
    "\037\uff81\041\uff81\042\uff81\043\uff81\044\uff81\046\uff81\064" +
    "\uff81\065\uff81\071\uff81\001\002\000\036\031\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\037\uff7e\041\uff7e\042\uff7e\043" +
    "\uff7e\044\uff7e\046\uff7e\064\uff7e\065\uff7e\071\uff7e\001\002" +
    "\000\036\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\037" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\046\uff80\064\uff80" +
    "\065\uff80\071\uff80\001\002\000\036\031\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\035\uff7d\037\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\046\uff7d\064\uff7d\065\uff7d\071\uff7d\001\002\000" +
    "\036\031\uff89\032\uff89\033\162\034\161\035\160\037\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\046\uff89\064\uff89\065" +
    "\uff89\071\uff89\001\002\000\036\031\uff85\032\uff85\033\151" +
    "\034\150\035\145\037\uff85\041\uff85\042\uff85\043\uff85\044" +
    "\uff85\046\uff85\064\uff85\065\uff85\071\uff85\001\002\000\036" +
    "\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\037\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\044\uff7a\046\uff7a\064\uff7a\065\uff7a" +
    "\071\uff7a\001\002\000\036\031\uff77\032\uff77\033\uff77\034" +
    "\uff77\035\uff77\037\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\046\uff77\064\uff77\065\uff77\071\uff77\001\002\000\036\005" +
    "\045\010\035\013\016\014\021\016\056\023\057\036\142" +
    "\040\006\045\070\053\020\054\050\055\106\057\062\060" +
    "\025\001\002\000\010\031\177\032\201\041\200\001\002" +
    "\000\036\005\045\010\035\013\016\014\021\016\056\023" +
    "\057\036\142\040\006\045\070\053\020\054\050\055\106" +
    "\057\062\060\025\001\002\000\042\025\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\046\uffdf\064\uffdf\065\uffdf\071" +
    "\uffdf\001\002\000\036\005\045\010\035\013\016\014\021" +
    "\016\056\023\057\036\142\040\006\045\070\053\020\054" +
    "\050\055\106\057\062\060\025\001\002\000\036\031\uff8a" +
    "\032\uff8a\033\162\034\161\035\160\037\uff8a\041\uff8a\042" +
    "\uff8a\043\uff8a\044\uff8a\046\uff8a\064\uff8a\065\uff8a\071\uff8a" +
    "\001\002\000\036\031\uff86\032\uff86\033\151\034\150\035" +
    "\145\037\uff86\041\uff86\042\uff86\043\uff86\044\uff86\046\uff86" +
    "\064\uff86\065\uff86\071\uff86\001\002\000\036\031\uff8b\032" +
    "\uff8b\033\162\034\161\035\160\037\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\046\uff8b\064\uff8b\065\uff8b\071\uff8b\001" +
    "\002\000\036\031\uff87\032\uff87\033\151\034\150\035\145" +
    "\037\uff87\041\uff87\042\uff87\043\uff87\044\uff87\046\uff87\064" +
    "\uff87\065\uff87\071\uff87\001\002\000\010\031\177\032\201" +
    "\037\214\001\002\000\036\005\045\010\035\013\016\014" +
    "\021\016\056\023\057\036\142\040\006\045\070\053\020" +
    "\054\050\055\106\057\062\060\025\001\002\000\012\033" +
    "\162\034\161\035\160\037\213\001\002\000\012\033\151" +
    "\034\150\035\145\037\212\001\002\000\036\031\uff70\032" +
    "\uff70\033\uff70\034\uff70\035\uff70\037\uff70\041\uff70\042\uff70" +
    "\043\uff70\044\uff70\046\uff70\064\uff70\065\uff70\071\uff70\001" +
    "\002\000\036\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71" +
    "\037\uff71\041\uff71\042\uff71\043\uff71\044\uff71\046\uff71\064" +
    "\uff71\065\uff71\071\uff71\001\002\000\036\031\uff6f\032\uff6f" +
    "\033\uff6f\034\uff6f\035\uff6f\037\uff6f\041\uff6f\042\uff6f\043" +
    "\uff6f\044\uff6f\046\uff6f\064\uff6f\065\uff6f\071\uff6f\001\002" +
    "\000\042\025\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\046\uffde\064\uffde\065\uffde\071\uffde\001\002\000\110\002" +
    "\ufff7\005\ufff7\006\ufff7\010\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\036\ufff7\040\ufff7\042\ufff7" +
    "\043\ufff7\045\ufff7\050\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\067\ufff7\070\ufff7\001\002\000\026\005\045\010\035\013" +
    "\016\014\021\016\056\023\057\040\006\045\070\055\106" +
    "\056\061\001\002\000\020\025\uff98\037\uff98\040\uff6d\041" +
    "\uff98\042\uff98\043\uff98\046\uff98\001\002\000\016\025\uff96" +
    "\037\uff96\041\uff96\042\uff96\043\uff96\046\uff96\001\002\000" +
    "\016\025\uff94\037\uff94\041\uff94\042\uff94\043\uff94\046\uff94" +
    "\001\002\000\064\005\045\007\225\010\035\013\016\014" +
    "\021\015\047\016\056\021\051\022\044\023\057\024\046" +
    "\030\015\036\022\040\006\045\070\050\031\053\020\054" +
    "\050\055\106\056\061\057\062\060\025\061\067\062\011" +
    "\063\034\001\002\000\004\042\uffcd\001\002\000\012\011" +
    "\233\012\230\036\232\055\227\001\002\000\004\042\uffce" +
    "\001\002\000\102\005\uffbc\006\uffbc\010\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\043\uffbc\045\uffbc\050\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\067\uffbc\001\002\000\004\055\250\001\002\000\076" +
    "\005\045\006\074\010\035\013\016\014\021\015\047\016" +
    "\056\017\063\020\024\021\051\022\044\023\057\024\046" +
    "\026\054\027\014\030\015\036\022\040\006\045\070\050" +
    "\031\053\020\054\050\055\073\056\061\057\062\060\025" +
    "\061\067\062\011\063\034\067\041\001\002\000\012\011" +
    "\233\012\230\037\uff6a\055\227\001\002\000\004\055\234" +
    "\001\002\000\102\005\uffbe\006\uffbe\010\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\043\uffbe\045\uffbe\050\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\067\uffbe\001\002\000\006\037\uffc0\043\245\001\002" +
    "\000\004\037\241\001\002\000\006\037\uffba\043\uffba\001" +
    "\002\000\004\037\uffbf\001\002\000\004\051\242\001\002" +
    "\000\076\005\045\006\074\010\035\013\016\014\021\015" +
    "\047\016\056\017\063\020\024\021\051\022\044\023\057" +
    "\024\046\026\054\027\014\030\015\036\022\040\006\045" +
    "\070\050\031\053\020\054\050\055\073\056\061\057\062" +
    "\060\025\061\067\062\011\063\034\067\041\001\002\000" +
    "\004\052\244\001\002\000\004\042\uffc4\001\002\000\010" +
    "\011\233\012\230\055\227\001\002\000\006\037\uffbb\043" +
    "\uffbb\001\002\000\004\042\uffc3\001\002\000\102\005\uffbd" +
    "\006\uffbd\010\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\036\uffbd\037\uffbd\040\uffbd\043\uffbd\045" +
    "\uffbd\050\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\067\uffbd\001\002\000" +
    "\026\005\045\010\035\013\016\014\021\016\056\023\057" +
    "\040\006\045\070\055\106\056\061\001\002\000\006\025" +
    "\217\043\274\001\002\000\006\025\255\043\254\001\002" +
    "\000\036\005\045\010\035\013\016\014\021\016\056\023" +
    "\057\036\142\040\006\045\070\053\020\054\050\055\106" +
    "\057\062\060\025\001\002\000\026\005\045\010\035\013" +
    "\016\014\021\016\056\023\057\040\006\045\070\055\106" +
    "\056\061\001\002\000\016\025\uff97\037\uff97\041\uff97\042" +
    "\uff97\043\uff97\046\uff97\001\002\000\016\025\uff95\037\uff95" +
    "\041\uff95\042\uff95\043\uff95\046\uff95\001\002\000\010\031" +
    "\177\032\201\043\267\001\002\000\016\031\146\032\147" +
    "\033\151\034\150\035\145\043\262\001\002\000\036\005" +
    "\045\010\035\013\016\014\021\016\056\023\057\036\142" +
    "\040\006\045\070\053\020\054\050\055\106\057\062\060" +
    "\025\001\002\000\010\031\177\032\201\037\266\001\002" +
    "\000\016\031\146\032\147\033\151\034\150\035\145\037" +
    "\265\001\002\000\042\025\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\064\uffe6\065\uffe6\071\uffe6\001\002" +
    "\000\042\025\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\046\uffe4\064\uffe4\065\uffe4\071\uffe4\001\002\000\036\005" +
    "\045\010\035\013\016\014\021\016\056\023\057\036\142" +
    "\040\006\045\070\053\020\054\050\055\106\057\062\060" +
    "\025\001\002\000\010\031\177\032\201\037\273\001\002" +
    "\000\016\031\146\032\147\033\151\034\150\035\145\037" +
    "\272\001\002\000\042\025\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\046\uffe5\064\uffe5\065\uffe5\071\uffe5\001\002" +
    "\000\042\025\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\046\uffe7\064\uffe7\065\uffe7\071\uffe7\001\002\000\036\005" +
    "\045\010\035\013\016\014\021\016\056\023\057\036\142" +
    "\040\006\045\070\053\020\054\050\055\106\057\062\060" +
    "\025\001\002\000\010\031\177\032\201\043\304\001\002" +
    "\000\016\031\146\032\147\033\151\034\150\035\145\043" +
    "\277\001\002\000\036\005\045\010\035\013\016\014\021" +
    "\016\056\023\057\036\142\040\006\045\070\053\020\054" +
    "\050\055\106\057\062\060\025\001\002\000\010\031\177" +
    "\032\201\037\303\001\002\000\016\031\146\032\147\033" +
    "\151\034\150\035\145\037\302\001\002\000\042\025\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\064\uffe2" +
    "\065\uffe2\071\uffe2\001\002\000\042\025\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\046\uffe0\064\uffe0\065\uffe0\071" +
    "\uffe0\001\002\000\036\005\045\010\035\013\016\014\021" +
    "\016\056\023\057\036\142\040\006\045\070\053\020\054" +
    "\050\055\106\057\062\060\025\001\002\000\010\031\177" +
    "\032\201\037\310\001\002\000\016\031\146\032\147\033" +
    "\151\034\150\035\145\037\307\001\002\000\042\025\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\064\uffe1" +
    "\065\uffe1\071\uffe1\001\002\000\042\025\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\046\uffe3\064\uffe3\065\uffe3\071" +
    "\uffe3\001\002\000\064\005\045\010\035\013\016\014\021" +
    "\015\047\016\056\021\051\022\044\023\057\024\046\030" +
    "\015\036\022\037\uff6a\040\006\045\070\050\031\053\020" +
    "\054\050\055\106\056\061\057\062\060\025\061\067\062" +
    "\011\063\034\001\002\000\004\037\313\001\002\000\042" +
    "\025\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb" +
    "\064\uffdb\065\uffdb\071\uffdb\001\002\000\004\037\315\001" +
    "\002\000\004\042\316\001\002\000\110\002\ufff8\005\ufff8" +
    "\006\ufff8\010\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\036\ufff8\040\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\067\ufff8\070" +
    "\ufff8\001\002\000\036\005\045\010\035\013\016\014\021" +
    "\016\056\023\057\036\142\040\006\045\070\053\020\054" +
    "\050\055\106\057\062\060\025\001\002\000\026\031\177" +
    "\032\201\037\uffae\041\uffae\042\uffae\043\uffae\044\uffae\046" +
    "\uffae\065\uffae\071\uffae\001\002\000\034\031\146\032\147" +
    "\033\151\034\150\035\145\037\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\046\uffac\065\uffac\071\uffac\001\002\000\050" +
    "\005\045\010\035\013\016\014\021\016\056\021\051\022" +
    "\044\023\057\024\046\036\325\040\006\045\070\050\031" +
    "\053\020\054\050\055\106\057\062\060\025\063\034\001" +
    "\002\000\010\031\177\032\201\064\317\001\002\000\040" +
    "\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uffb5\040" +
    "\uff6d\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\064\uff8c" +
    "\065\uffb5\071\uffb5\001\002\000\052\005\045\010\035\013" +
    "\016\014\021\016\056\021\051\022\044\023\057\024\046" +
    "\032\207\036\325\040\006\045\070\050\031\053\020\054" +
    "\050\055\106\057\062\060\025\063\034\001\002\000\020" +
    "\037\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\071" +
    "\uffb2\001\002\000\012\031\177\032\201\037\214\064\317" +
    "\001\002\000\004\037\331\001\002\000\022\037\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9\065\uffa9\071\uffa9" +
    "\001\002\000\062\005\045\010\035\013\016\014\021\015" +
    "\047\016\056\021\051\022\044\023\057\024\046\030\015" +
    "\036\022\040\006\045\070\050\031\053\020\054\050\055" +
    "\106\056\061\057\062\060\025\061\067\062\011\063\034" +
    "\001\002\000\004\043\334\001\002\000\062\005\045\010" +
    "\035\013\016\014\021\015\047\016\056\021\051\022\044" +
    "\023\057\024\046\030\015\036\022\040\006\045\070\050" +
    "\031\053\020\054\050\055\106\056\061\057\062\060\025" +
    "\061\067\062\011\063\034\001\002\000\004\037\336\001" +
    "\002\000\022\037\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\046\uffa7\065\uffa7\071\uffa7\001\002\000\062\005\045\010" +
    "\035\013\016\014\021\015\047\016\056\021\051\022\044" +
    "\023\057\024\046\030\015\036\022\040\006\045\070\050" +
    "\031\053\020\054\050\055\106\056\061\057\062\060\025" +
    "\061\067\062\011\063\034\001\002\000\004\043\341\001" +
    "\002\000\062\005\045\010\035\013\016\014\021\015\047" +
    "\016\056\021\051\022\044\023\057\024\046\030\015\036" +
    "\022\040\006\045\070\050\031\053\020\054\050\055\106" +
    "\056\061\057\062\060\025\061\067\062\011\063\034\001" +
    "\002\000\004\037\343\001\002\000\014\037\uff6c\041\uff6c" +
    "\042\uff6c\043\uff6c\046\uff6c\001\002\000\062\005\045\010" +
    "\035\013\016\014\021\015\047\016\056\021\051\022\044" +
    "\023\057\024\046\030\015\036\022\040\006\045\070\050" +
    "\031\053\020\054\050\055\106\056\061\057\062\060\025" +
    "\061\067\062\011\063\034\001\002\000\004\037\346\001" +
    "\002\000\022\037\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\046\uffa8\065\uffa8\071\uffa8\001\002\000\024\005\045\010" +
    "\035\013\016\014\021\016\056\023\057\040\006\045\070" +
    "\055\106\001\002\000\006\037\uff6d\040\uff6d\001\002\000" +
    "\006\037\354\040\175\001\002\000\006\037\353\040\137" +
    "\001\002\000\042\025\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\046\uffdc\064\uffdc\065\uffdc\071\uffdc\001\002\000" +
    "\042\025\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046" +
    "\uffdd\064\uffdd\065\uffdd\071\uffdd\001\002\000\062\005\045" +
    "\010\035\013\016\014\021\015\047\016\056\021\051\022" +
    "\044\023\057\024\046\030\015\036\022\040\006\045\070" +
    "\050\031\053\020\054\050\055\106\056\061\057\062\060" +
    "\025\061\067\062\011\063\034\001\002\000\004\043\357" +
    "\001\002\000\062\005\045\010\035\013\016\014\021\015" +
    "\047\016\056\021\051\022\044\023\057\024\046\030\015" +
    "\036\022\040\006\045\070\050\031\053\020\054\050\055" +
    "\106\056\061\057\062\060\025\061\067\062\011\063\034" +
    "\001\002\000\004\037\361\001\002\000\022\037\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\046\uffa6\065\uffa6\071\uffa6" +
    "\001\002\000\004\071\363\001\002\000\076\005\045\006" +
    "\074\010\035\013\016\014\021\015\047\016\056\017\063" +
    "\020\024\021\051\022\044\023\057\024\046\026\054\027" +
    "\014\030\015\036\022\040\006\045\070\050\031\053\020" +
    "\054\050\055\073\056\061\057\062\060\025\061\067\062" +
    "\011\063\034\067\041\001\002\000\006\042\uffd8\070\365" +
    "\001\002\000\076\005\045\006\074\010\035\013\016\014" +
    "\021\015\047\016\056\017\063\020\024\021\051\022\044" +
    "\023\057\024\046\026\054\027\014\030\015\036\022\040" +
    "\006\045\070\050\031\053\020\054\050\055\073\056\061" +
    "\057\062\060\025\061\067\062\011\063\034\067\041\001" +
    "\002\000\004\042\uffd9\001\002\000\110\002\ufffd\005\ufffd" +
    "\006\ufffd\010\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\036\ufffd\040\ufffd\042\ufffd\043\ufffd\045" +
    "\ufffd\050\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\067\ufffd\070" +
    "\ufffd\001\002\000\004\055\371\001\002\000\004\043\372" +
    "\001\002\000\062\005\045\010\035\013\016\014\021\015" +
    "\047\016\056\021\051\022\044\023\057\024\046\030\015" +
    "\036\022\040\006\045\070\050\031\053\020\054\050\055" +
    "\106\056\061\057\062\060\025\061\067\062\011\063\034" +
    "\001\002\000\004\037\374\001\002\000\042\025\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\046\uffec\064\uffec\065" +
    "\uffec\071\uffec\001\002\000\022\037\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\046\uffb0\065\322\071\uffb0\001\002\000" +
    "\020\037\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3" +
    "\071\uffb3\001\002\000\110\002\ufffc\005\ufffc\006\ufffc\010" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\036\ufffc\040\ufffc\042\ufffc\043\ufffc\045\ufffc\050\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\067\ufffc\070\ufffc\001\002" +
    "\000\062\005\045\010\035\013\016\014\021\015\047\016" +
    "\056\021\051\022\044\023\057\024\046\030\015\036\022" +
    "\040\006\045\070\050\031\053\020\054\050\055\106\056" +
    "\061\057\062\060\025\061\067\062\011\063\034\001\002" +
    "\000\004\037\u0102\001\002\000\004\042\u0103\001\002\000" +
    "\110\002\ufffa\005\ufffa\006\ufffa\010\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\036\ufffa\040\ufffa" +
    "\042\ufffa\043\ufffa\045\ufffa\050\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\067\ufffa\070\ufffa\001\002\000\036\005\045\010" +
    "\035\013\016\014\021\016\056\023\057\036\142\040\006" +
    "\045\070\053\020\054\050\055\106\057\062\060\025\001" +
    "\002\000\026\031\177\032\201\037\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\046\uffad\065\uffad\071\uffad\001\002\000" +
    "\006\037\331\043\ufff1\001\002\000\014\031\177\032\201" +
    "\037\214\043\ufff5\064\317\001\002\000\026\005\045\010" +
    "\035\013\016\014\021\015\047\016\056\023\057\040\006" +
    "\045\070\055\106\001\002\000\006\037\uff6e\040\uff6d\001" +
    "\002\000\004\037\u010d\001\002\000\004\037\u010c\001\002" +
    "\000\042\025\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\046\uffe9\064\uffe9\065\uffe9\071\uffe9\001\002\000\042\025" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\064" +
    "\uffe8\065\uffe8\071\uffe8\001\002\000\026\005\045\010\035" +
    "\013\016\014\021\015\047\016\056\023\057\040\006\045" +
    "\070\055\106\001\002\000\004\037\u0112\001\002\000\004" +
    "\037\u0111\001\002\000\042\025\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\046\uffeb\064\uffeb\065\uffeb\071\uffeb\001" +
    "\002\000\042\025\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\046\uffea\064\uffea\065\uffea\071\uffea\001\002\000\052" +
    "\005\045\010\035\013\016\014\021\016\056\021\051\022" +
    "\044\023\057\024\046\036\325\040\006\045\070\050\031" +
    "\053\020\054\050\055\106\057\062\060\025\063\034\070" +
    "\u0115\001\002\000\006\043\uffd5\052\uffd5\001\002\000\004" +
    "\044\u011e\001\002\000\006\043\u011b\052\u011c\001\002\000" +
    "\004\044\u0118\001\002\000\076\005\045\006\074\010\035" +
    "\013\016\014\021\015\047\016\056\017\063\020\024\021" +
    "\051\022\044\023\057\024\046\026\054\027\014\030\015" +
    "\036\022\040\006\045\070\050\031\053\020\054\050\055" +
    "\073\056\061\057\062\060\025\061\067\062\011\063\034" +
    "\067\041\001\002\000\102\005\045\006\074\010\035\013" +
    "\016\014\021\015\047\016\056\017\063\020\024\021\051" +
    "\022\044\023\057\024\046\026\054\027\014\030\015\036" +
    "\022\040\006\043\uffd4\045\070\050\031\052\uffd4\053\020" +
    "\054\050\055\073\056\061\057\062\060\025\061\067\062" +
    "\011\063\034\067\041\001\002\000\106\002\uffff\005\uffff" +
    "\006\uffff\010\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\026\uffff" +
    "\027\uffff\030\uffff\036\uffff\040\uffff\042\uffff\043\uffff\045" +
    "\uffff\050\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\067\uffff\001" +
    "\002\000\052\005\045\010\035\013\016\014\021\016\056" +
    "\021\051\022\044\023\057\024\046\036\325\040\006\045" +
    "\070\050\031\053\020\054\050\055\106\057\062\060\025" +
    "\063\034\070\u0115\001\002\000\014\037\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\046\uffd7\001\002\000\006\043\uffd6\052\uffd6" +
    "\001\002\000\076\005\045\006\074\010\035\013\016\014" +
    "\021\015\047\016\056\017\063\020\024\021\051\022\044" +
    "\023\057\024\046\026\054\027\014\030\015\036\022\040" +
    "\006\045\070\050\031\053\020\054\050\055\073\056\061" +
    "\057\062\060\025\061\067\062\011\063\034\067\041\001" +
    "\002\000\102\005\045\006\074\010\035\013\016\014\021" +
    "\015\047\016\056\017\063\020\024\021\051\022\044\023" +
    "\057\024\046\026\054\027\014\030\015\036\022\040\006" +
    "\043\uffd3\045\070\050\031\052\uffd3\053\020\054\050\055" +
    "\073\056\061\057\062\060\025\061\067\062\011\063\034" +
    "\067\041\001\002\000\004\037\u0121\001\002\000\004\042" +
    "\u0122\001\002\000\110\002\ufff9\005\ufff9\006\ufff9\010\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\036\ufff9\040\ufff9\042\ufff9\043\ufff9\045\ufff9\050\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\067\ufff9\070\ufff9\001\002\000" +
    "\050\005\045\010\035\013\016\014\021\016\056\021\051" +
    "\022\044\023\057\024\046\036\325\040\006\045\070\050" +
    "\031\053\020\054\050\055\106\057\062\060\025\063\034" +
    "\001\002\000\022\037\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\046\uffb1\065\322\071\uffb1\001\002\000\020\037\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\071\uffb4\001" +
    "\002\000\004\041\u0127\001\002\000\042\025\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\046\uffda\064\uffda\065\uffda" +
    "\071\uffda\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\074\003\075\007\003\010\007\011\074\012" +
    "\035\013\064\014\070\016\004\017\032\020\052\021\031" +
    "\022\041\023\036\024\042\025\026\026\057\027\027\030" +
    "\012\031\016\032\011\033\071\034\006\035\037\052\025" +
    "\053\051\055\022\056\063\061\065\062\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\006\107\013\112" +
    "\014\070\016\004\017\032\020\052\021\031\022\041\023" +
    "\036\024\042\025\026\026\057\027\027\030\012\031\016" +
    "\032\011\033\071\034\006\035\037\046\111\047\u0125\053" +
    "\051\055\022\056\063\061\065\062\054\001\001\000\002" +
    "\001\001\000\070\003\075\011\u0119\012\035\013\064\014" +
    "\070\016\004\017\032\020\052\021\031\022\041\023\036" +
    "\024\042\025\026\026\057\027\027\030\012\031\016\032" +
    "\011\033\071\034\006\035\037\052\025\053\051\055\022" +
    "\056\063\061\065\062\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\013\104\014\070\016\004" +
    "\017\032\020\u0106\021\031\022\041\023\036\024\042\025" +
    "\026\026\057\027\027\030\012\031\u0105\032\011\033\071" +
    "\034\006\035\037\050\103\053\051\055\022\056\063\061" +
    "\065\062\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\016\323\020\322\021\031\022\041" +
    "\031\375\032\011\033\071\035\142\053\374\055\022\061" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\323\020\322\021\031" +
    "\022\041\031\361\032\011\033\071\035\142\053\051\055" +
    "\022\061\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\006\107\013\112\014\070\016\004\017" +
    "\032\020\052\021\031\022\041\023\036\024\042\025\026" +
    "\026\057\027\027\030\012\031\016\032\011\033\071\034" +
    "\006\035\037\046\111\047\134\053\051\055\022\056\063" +
    "\061\065\062\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\013\104" +
    "\014\070\016\004\017\032\020\052\021\031\022\041\023" +
    "\036\024\042\025\026\026\057\027\027\030\012\031\016" +
    "\032\011\033\071\034\006\035\037\050\103\053\051\055" +
    "\022\056\063\061\065\062\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\006\107\013" +
    "\112\014\070\016\004\017\032\020\052\021\031\022\041" +
    "\023\036\024\042\025\026\026\057\027\027\030\012\031" +
    "\016\032\011\033\071\034\006\035\037\046\111\047\110" +
    "\053\051\055\022\056\063\061\065\062\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\013\114\014\070\016\004\017\032\020" +
    "\052\021\031\022\041\023\036\024\042\025\026\026\057" +
    "\027\027\030\012\031\016\032\011\033\071\034\006\035" +
    "\037\053\051\055\022\056\063\061\065\062\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\013\117\014" +
    "\070\016\004\017\032\020\052\021\031\022\041\023\036" +
    "\024\042\025\026\026\057\027\027\030\012\031\016\032" +
    "\011\033\071\034\006\035\037\053\051\055\022\056\063" +
    "\061\065\062\054\001\001\000\002\001\001\000\060\013" +
    "\122\014\070\016\004\017\032\020\052\021\031\022\041" +
    "\023\036\024\042\025\026\026\057\027\027\030\012\031" +
    "\016\032\011\033\071\034\006\035\037\053\051\055\022" +
    "\056\063\061\065\062\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\013\125\014\070" +
    "\016\004\017\032\020\052\021\031\022\041\023\036\024" +
    "\042\025\026\026\057\027\027\030\012\031\016\032\011" +
    "\033\071\034\006\035\037\053\051\055\022\056\063\061" +
    "\065\062\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\013\132\014" +
    "\070\016\004\017\032\020\052\021\031\022\041\023\036" +
    "\024\042\025\026\026\057\027\027\030\012\031\016\032" +
    "\011\033\071\034\006\035\037\053\051\055\022\056\063" +
    "\061\065\062\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\140" +
    "\020\137\021\031\022\041\035\142\055\143\061\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\140" +
    "\020\205\021\031\022\041\035\142\055\143\061\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\140" +
    "\022\172\035\142\055\173\061\065\001\001\000\016\016" +
    "\140\021\170\022\041\035\142\055\171\061\065\001\001" +
    "\000\016\016\140\021\155\022\041\035\142\055\156\061" +
    "\065\001\001\000\014\016\140\022\153\035\142\055\154" +
    "\061\065\001\001\000\014\016\140\022\151\035\142\055" +
    "\152\061\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\140\022\166\035\142\055\167" +
    "\061\065\001\001\000\014\016\140\022\164\035\142\055" +
    "\165\061\065\001\001\000\014\016\140\022\162\035\142" +
    "\055\163\061\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\140\020\175" +
    "\021\031\022\041\035\142\055\143\061\065\001\001\000" +
    "\002\001\001\000\016\016\140\021\203\022\041\035\142" +
    "\055\204\061\065\001\001\000\002\001\001\000\016\016" +
    "\140\021\201\022\041\035\142\055\202\061\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\140\021\207" +
    "\022\041\035\142\055\210\061\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\217\024\220\025\026\035\142\056\221\061\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\013\225\014\070\015\223\016\004\017\032" +
    "\020\052\021\031\022\041\023\036\024\042\025\026\026" +
    "\057\027\027\030\012\031\016\032\011\033\071\034\006" +
    "\035\037\053\051\055\022\056\063\061\065\062\054\001" +
    "\001\000\002\001\001\000\004\005\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
    "\075\007\246\010\007\011\074\012\035\013\064\014\070" +
    "\016\004\017\032\020\052\021\031\022\041\023\036\024" +
    "\042\025\026\026\057\027\027\030\012\031\016\032\011" +
    "\033\071\034\006\035\037\052\025\053\051\055\022\056" +
    "\063\061\065\062\054\001\001\000\012\002\234\004\235" +
    "\005\236\006\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\003\075\007" +
    "\242\010\007\011\074\012\035\013\064\014\070\016\004" +
    "\017\032\020\052\021\031\022\041\023\036\024\042\025" +
    "\026\026\057\027\027\030\012\031\016\032\011\033\071" +
    "\034\006\035\037\052\025\053\051\055\022\056\063\061" +
    "\065\062\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\217\023\252\024\042" +
    "\025\026\035\142\056\251\061\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\140\020\257\021\031" +
    "\022\041\035\142\055\260\061\065\001\001\000\016\016" +
    "\217\024\255\025\026\035\142\056\256\061\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\140\020\262\021\031\022\041" +
    "\035\142\055\263\061\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\140\020\267\021\031\022\041\035\142\055\270\061" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\140\020\274\021" +
    "\031\022\041\035\142\055\275\061\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\140\020\277\021" +
    "\031\022\041\035\142\055\300\061\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\140\020\304\021\031\022\041\035\142" +
    "\055\305\061\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\006\107" +
    "\013\112\014\070\016\004\017\032\020\052\021\031\022" +
    "\041\023\036\024\042\025\026\026\057\027\027\030\012" +
    "\031\016\032\011\033\071\034\006\035\037\046\111\047" +
    "\311\053\051\055\022\056\063\061\065\062\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\140\020\317" +
    "\021\031\022\041\035\142\055\320\061\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\016\323\020\322" +
    "\021\031\022\041\031\325\032\011\033\071\035\142\053" +
    "\051\055\022\061\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\016\323\020\326\021\031\022\041\031" +
    "\327\032\011\033\071\035\142\053\051\055\022\061\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\013\332\014\070\016\004" +
    "\017\032\020\052\021\031\022\041\023\036\024\042\025" +
    "\026\026\057\027\027\030\012\031\016\032\011\033\071" +
    "\034\006\035\037\053\051\055\022\056\063\061\065\062" +
    "\054\001\001\000\002\001\001\000\060\013\334\014\070" +
    "\016\004\017\032\020\052\021\031\022\041\023\036\024" +
    "\042\025\026\026\057\027\027\030\012\031\016\032\011" +
    "\033\071\034\006\035\037\053\051\055\022\056\063\061" +
    "\065\062\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\013\337\014\070\016\004\017\032\020\052\021" +
    "\031\022\041\023\036\024\042\025\026\026\057\027\027" +
    "\030\012\031\016\032\011\033\071\034\006\035\037\053" +
    "\051\055\022\056\063\061\065\062\054\001\001\000\002" +
    "\001\001\000\060\013\341\014\070\016\004\017\032\020" +
    "\052\021\031\022\041\023\036\024\042\025\026\026\057" +
    "\027\027\030\012\031\016\032\011\033\071\034\006\035" +
    "\037\053\051\055\022\056\063\061\065\062\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\013\344\014" +
    "\070\016\004\017\032\020\052\021\031\022\041\023\036" +
    "\024\042\025\026\026\057\027\027\030\012\031\016\032" +
    "\011\033\071\034\006\035\037\053\051\055\022\056\063" +
    "\061\065\062\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\347\035\350\061\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\013\355\014\070\016\004" +
    "\017\032\020\052\021\031\022\041\023\036\024\042\025" +
    "\026\026\057\027\027\030\012\031\016\032\011\033\071" +
    "\034\006\035\037\053\051\055\022\056\063\061\065\062" +
    "\054\001\001\000\002\001\001\000\060\013\357\014\070" +
    "\016\004\017\032\020\052\021\031\022\041\023\036\024" +
    "\042\025\026\026\057\027\027\030\012\031\016\032\011" +
    "\033\071\034\006\035\037\053\051\055\022\056\063\061" +
    "\065\062\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\003\075\011\363\012\035\013" +
    "\064\014\070\016\004\017\032\020\052\021\031\022\041" +
    "\023\036\024\042\025\026\026\057\027\027\030\012\031" +
    "\016\032\011\033\071\034\006\035\037\052\025\053\051" +
    "\055\022\056\063\061\065\062\054\001\001\000\002\001" +
    "\001\000\070\003\075\011\365\012\035\013\064\014\070" +
    "\016\004\017\032\020\052\021\031\022\041\023\036\024" +
    "\042\025\026\026\057\027\027\030\012\031\016\032\011" +
    "\033\071\034\006\035\037\052\025\053\051\055\022\056" +
    "\063\061\065\062\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\013" +
    "\372\014\070\016\004\017\032\020\052\021\031\022\041" +
    "\023\036\024\042\025\026\026\057\027\027\030\012\031" +
    "\016\032\011\033\071\034\006\035\037\053\051\055\022" +
    "\056\063\061\065\062\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\013\u0100\014\070\016\004\017\032\020" +
    "\052\021\031\022\041\023\036\024\042\025\026\026\057" +
    "\027\027\030\012\031\016\032\011\033\071\034\006\035" +
    "\037\053\051\055\022\056\063\061\065\062\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\140\020\u0104\021\031\022\041\035\142\055\143" +
    "\061\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\u0108\034\u010a\035\142\060\u0109" +
    "\061\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\u0108\034\u010f\035\142\060\u010e\061\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\016\323\020\322\021\031\022\041\031" +
    "\u0116\032\011\033\071\035\142\051\u0115\053\051\055\022" +
    "\061\065\063\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\003\075" +
    "\010\u0118\011\074\012\035\013\064\014\070\016\004\017" +
    "\032\020\052\021\031\022\041\023\036\024\042\025\026" +
    "\026\057\027\027\030\012\031\016\032\011\033\071\034" +
    "\006\035\037\052\025\053\051\055\022\056\063\061\065" +
    "\062\054\001\001\000\070\003\075\011\u0119\012\035\013" +
    "\064\014\070\016\004\017\032\020\052\021\031\022\041" +
    "\023\036\024\042\025\026\026\057\027\027\030\012\031" +
    "\016\032\011\033\071\034\006\035\037\052\025\053\051" +
    "\055\022\056\063\061\065\062\054\001\001\000\002\001" +
    "\001\000\032\016\323\020\322\021\031\022\041\031\u0116" +
    "\032\011\033\071\035\142\053\051\055\022\061\065\063" +
    "\u011c\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\003\075\010\u011e\011\074\012\035\013\064\014\070\016" +
    "\004\017\032\020\052\021\031\022\041\023\036\024\042" +
    "\025\026\026\057\027\027\030\012\031\016\032\011\033" +
    "\071\034\006\035\037\052\025\053\051\055\022\056\063" +
    "\061\065\062\054\001\001\000\070\003\075\011\u0119\012" +
    "\035\013\064\014\070\016\004\017\032\020\052\021\031" +
    "\022\041\023\036\024\042\025\026\026\057\027\027\030" +
    "\012\031\016\032\011\033\071\034\006\035\037\052\025" +
    "\053\051\055\022\056\063\061\065\062\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\016\323\020\322\021\031\022\041\031\u0124\032\011\033" +
    "\071\035\142\053\u0123\055\022\061\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // No longer necessary    
    
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
        System.out.println(ioe.getMessage());
        throw ioe;
    }
    
    }


    SMPLLexer lexer;

    public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

    public SMPLParser(String file) throws FileNotFoundException {
              this(new SMPLLexer(new FileReader(file)));
    }

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(new InputStreamReader(is)));
                }

    public void report_error(String message, Object info) {
        System.err.println(message + info);
    }

    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error while reading: ", cur_token);
        System.err.println ("Last token read is " +
           lexer.getText());
    }
      

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {

          
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram start_val = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SIRProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SIRProgram(seq);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              SIRSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              SIRSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            SIRSequence seq = new SIRSequence();
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment SEMI 
            {
              SIRStatement RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement assign = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = assign; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IFCond SEMI 
            {
              SIRStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ConditionalStatement cond = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = cond; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= PRINT LPAREN smplExp RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new PrintStmt(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= PRINTLN LPAREN smplExp RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new PrintStmt(exp, true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= READINT LPAREN RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		 RESULT = new SMPLReadInt(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= READ LPAREN RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		 RESULT = new SMPLReadStr(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= smplExp SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new Statement(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressions ::= pairExp 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pair; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressions ::= arithExp 
            {
              SIRObj RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = aExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressions ::= vectorExp 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = vector; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressions ::= stringExp 
            {
              SIRObj RESULT =null;
		int sExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp sExp = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = sExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expressions ::= charExp 
            {
              SIRObj RESULT =null;
		int chExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp chExp = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = chExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expressions ::= boolExp 
            {
              SIRObj RESULT =null;
		int bExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bExp = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressions ::= tupleExp 
            {
              SIRObj RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = tuple; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressions ::= caseCondExp 
            {
              SIRObj RESULT =null;
		int cCondleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cCondright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj cCond = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = cCond; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literals ::= VAR 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRVar(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literals ::= VAR LPAREN smplExpListE RPAREN 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> exp = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("call", new SIRVar(id), exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literals ::= CALL LPAREN VAR COMMA smplExp RPAREN 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literals ::= CAR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literals ::= CAR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literals ::= CDR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literals ::= CDR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literals ::= SUBSTR LPAREN stringExp COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literals ::= SUBSTR LPAREN stringExp COMMA arithVar COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literals ::= SUBSTR LPAREN stringExp COMMA arithExp COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literals ::= SUBSTR LPAREN stringExp COMMA arithVar COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literals ::= SUBSTR LPAREN stringVar COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // literals ::= SUBSTR LPAREN stringVar COMMA arithVar COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literals ::= SUBSTR LPAREN stringVar COMMA arithExp COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literals ::= SUBSTR LPAREN stringVar COMMA arithVar COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literals ::= vectorExp LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literals ::= vectorVar LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literals ::= SIZE LPAREN vectorExp RPAREN 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("size", vector); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literals ::= SIZE LPAREN vectorVar RPAREN 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("size", vector); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literals ::= LIST LPAREN smplExpListE RPAREN 
            {
              SIRObj RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("list", lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literals ::= LBRACKET smplExpListE RBRACKET 
            {
              SIRObj RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("list", lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFCond ::= IF boolExp THEN stmt ELSE stmt 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRStatement s1 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s2 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new ConditionalStatement(bool, s1, s2);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IFCond ::= IF boolExp THEN stmt 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new ConditionalStatement(bool, s);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // caseCondExp ::= CASE LCURL caseList RCURL 
            {
              SIRObj RESULT =null;
		int cLstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int cLstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SMPLSingleCase> cLst = (ArrayList<SMPLSingleCase>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new CaseCondExp(cLst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseCondExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caseList ::= caseList COMMA singleCase 
            {
              ArrayList<SMPLSingleCase> RESULT =null;
		int cLstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int cLstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SMPLSingleCase> cLst = (ArrayList<SMPLSingleCase>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sCaseleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sCaseright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSingleCase sCase = (SMPLSingleCase)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            cLst.add(sCase);
                                            RESULT = cLst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // caseList ::= singleCase 
            {
              ArrayList<SMPLSingleCase> RESULT =null;
		int sCaseleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sCaseright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SMPLSingleCase sCase = (SMPLSingleCase)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            ArrayList<SMPLSingleCase> cLst = new ArrayList<>();
                                            cLst.add(sCase);
                                            RESULT = cLst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // singleCase ::= boolExp COLON stmtList 
            {
              SMPLSingleCase RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp exp = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLSingleCase(exp, seq); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("singleCase",49, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // singleCase ::= ELSE COLON stmtList 
            {
              SMPLSingleCase RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLSingleCase(new BoolLit(true), seq); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("singleCase",49, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tupleExp ::= LPAREN tupleExpList RPAREN 
            {
              TupleExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		  
                                            RESULT = new TupleExp(lst);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExp",48, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= VAR ASSIGN smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SMPLAssignment(id, exp);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= ids ASSIGN tupleExp 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new TupleAssignment(lst, tuple); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= ids ASSIGN VAR 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = new TupleAssignment(lst, new TupleExp(new SIRVar<CompoundExp>(id)));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= DEF VAR smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment ::= DEF VAR procDefn 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj proc = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, proc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tupleExpList ::= tupleExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tupleExpList ::= smplExp COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            lst.add(exp1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // smplExpListE ::= smplExpList 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // smplExpListE ::= empty 
            {
              ArrayList<SIRObj> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // smplExpList ::= smplExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // smplExpList ::= smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // smplExp ::= expressions 
            {
              SIRObj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj expr = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // smplExp ::= literals 
            {
              SIRObj RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lit; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procDefn ::= PROC LPAREN paramListE RPAREN LCURL program RCURL 
            {
              SIRObj RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<SIRParam> params = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ProcExp(params, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procDefn ::= PROC paramExp program 
            {
              SIRObj RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ProcExp(param, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ids ::= ids COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ids ::= VAR COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            lst.add(id1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramListE ::= paramList 
            {
              ArrayList<SIRParam> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRParam> lst = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramListE ::= empty 
            {
              ArrayList<SIRParam> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramExp ::= LAZY VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, "lazy"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramExp ::= REF VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, "ref"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paramExp ::= VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramList ::= paramList COMMA paramExp 
            {
              ArrayList<SIRParam> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRParam> lst = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(param);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramList ::= paramExp 
            {
              ArrayList<SIRParam> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRParam> lst = new ArrayList<>();
                                            lst.add(param);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bExpListE ::= bExpList 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bExpListE ::= empty 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bExpList ::= bExpList COMMA boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bExpList ::= boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolVar ::= literals 
            {
              BoolExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BoolLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolVar",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolExp ::= boolTerm LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolExp ::= NOT boolExp 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolExp ::= boolVar LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolExp ::= boolTerm LOGIC boolVar 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolExp ::= NOT boolVar 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // boolExp ::= boolTerm 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boolTerm ::= arithExp RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolTerm ::= arithVar RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // boolTerm ::= arithExp RATIONAL arithVar 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // boolTerm ::= boolFactor 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // boolFactor ::= BOOL 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            if (bool.equals("#t")) {
                                                RESULT = new BoolLit(true); 
                                            } else {
                                                RESULT = new BoolLit(false);
                                            }
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolFactor ::= LPAREN boolExp RPAREN 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boolFactor ::= ISPAIR LPAREN smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("pair?", exp)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // boolFactor ::= EQV LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("eqv?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // boolFactor ::= EQUAL LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("equal?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cExpListE ::= cExpList 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cExpListE ::= empty 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cExpList ::= cExpList COMMA charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cExpList ::= charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // charVar ::= literals 
            {
              CharExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charVar",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // charExp ::= charTerm 
            {
              CharExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp t = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charExp",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // charTerm ::= charFactor 
            {
              CharExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp f = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charTerm",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // charFactor ::= CHAR 
            {
              CharExp RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(ch.charAt(0), "#c"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // charFactor ::= UNICODE 
            {
              CharExp RESULT =null;
		int unileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String uni = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(uni, "#u"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // strExpListE ::= strExpListE 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // strExpListE ::= empty 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // strExpList ::= strExpList COMMA stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // strExpList ::= stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stringVar ::= literals 
            {
              StringExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringVar",44, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stringExp ::= stringExp CONCAT stringTerm 
            {
              StringExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		StringExp e1 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e2 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringConcat(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stringExp ::= stringVar CONCAT stringTerm 
            {
              StringExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		StringExp e1 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e2 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringConcat(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stringExp ::= stringExp CONCAT stringVar 
            {
              StringExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		StringExp e1 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e2 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringConcat(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stringExp ::= stringVar CONCAT stringVar 
            {
              StringExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		StringExp e1 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e2 = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringConcat(e1, e2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stringExp ::= stringTerm 
            {
              StringExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp t = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stringTerm ::= stringFactor 
            {
              StringExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp f = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringTerm",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // stringFactor ::= STRING 
            {
              StringExp RESULT =null;
		int sLitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sLitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String sLit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(sLit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringFactor",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // aExpListE ::= aExpList 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // aExpListE ::= empty 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // aExpList ::= aExpList COMMA arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // aExpList ::= arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arithVar ::= literals 
            {
              AIRExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithVar",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arithExp ::= arithExp PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arithExp ::= arithExp MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arithExp ::= arithVar PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arithExp ::= arithVar MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithExp ::= arithExp PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arithExp ::= arithExp MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithExp ::= arithVar PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arithExp ::= arithVar MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arithExp ::= arithTerm 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arithTerm ::= arithTerm DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arithTerm ::= arithTerm MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arithTerm ::= arithTerm TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arithTerm ::= arithTerm DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arithTerm ::= arithTerm MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arithTerm ::= arithVar TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arithTerm ::= arithVar DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arithTerm ::= arithVar MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arithTerm ::= arithVar TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithTerm ::= arithVar DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithTerm ::= arithVar MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithTerm ::= arithFactor 
            {
              AIRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arithFactor ::= INTEGER 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer alit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arithFactor ::= REAL 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double alit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, "#r"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arithFactor ::= HEX 
            {
              AIRExp RESULT =null;
		int hexleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hexright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer hex = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(hex, "#x"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arithFactor ::= BINARY 
            {
              AIRExp RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer bin = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(bin, "#b"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arithFactor ::= LPAREN MINUS arithTerm RPAREN 
            {
              AIRExp RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aExp);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arithFactor ::= LPAREN MINUS arithVar RPAREN 
            {
              AIRExp RESULT =null;
		int aVarleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aVarright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aVar = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aVar);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arithFactor ::= LPAREN arithExp RPAREN 
            {
              AIRExp RESULT =null;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aexp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = aexp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // pairVar ::= literals 
            {
              CompoundExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairVar",46, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // vectorVar ::= literals 
            {
              CompoundExp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VectorLit(lit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorVar",47, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // pairExp ::= PAIR LPAREN smplExp COMMA smplExp RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj e1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj e2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new PairExp(new SIRFunctionExp("pair", e1, e2) );
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // vectorExp ::= LBCOLON smplExpListE RBCOLON 
            {
              VectorExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                        SIRObj[] result = new SIRObj[lst.size()];
                                        result = lst.toArray(result);
                                        RESULT = new VectorExp(new SIRFunctionExp("vector", result)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorExp",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
