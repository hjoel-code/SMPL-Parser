
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.lang.*;
import smpl.lang.arith.*;
import smpl.lang.bool.*;
import smpl.lang.chars.*;
import smpl.lang.compound.*;
import smpl.lang.statements.*;
import smpl.lang.string.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\007\003\000\002\010" +
    "\005\000\002\010\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\006\000\002\011\006\000\002\011\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\006\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\012\000\002\014\012\000" +
    "\002\014\012\000\002\014\012\000\002\014\012\000\002" +
    "\014\012\000\002\014\012\000\002\014\012\000\002\014" +
    "\006\000\002\014\006\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\005\000\002\016\003\000" +
    "\002\016\006\000\002\050\010\000\002\050\007\000\002" +
    "\060\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\047\005" +
    "\000\002\047\005\000\002\046\003\000\002\046\003\000" +
    "\002\045\005\000\002\045\003\000\002\013\003\000\002" +
    "\013\003\000\002\015\011\000\002\015\007\000\002\003" +
    "\005\000\002\003\005\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\003\000" +
    "\002\002\005\000\002\002\003\000\002\044\003\000\002" +
    "\044\003\000\002\043\005\000\002\043\003\000\002\051" +
    "\003\000\002\030\005\000\002\030\004\000\002\030\005" +
    "\000\002\030\004\000\002\030\003\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\007\000\002\032" +
    "\011\000\002\032\011\000\002\040\003\000\002\040\003" +
    "\000\002\037\005\000\002\037\003\000\002\055\003\000" +
    "\002\025\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\036\003\000\002\036\003\000\002\035" +
    "\005\000\002\035\003\000\002\054\003\000\002\022\003" +
    "\000\002\023\003\000\002\024\003\000\002\042\003\000" +
    "\002\042\003\000\002\041\005\000\002\041\003\000\002" +
    "\053\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\006\000\002\021\006\000\002\021" +
    "\005\000\002\056\003\000\002\057\003\000\002\033\010" +
    "\000\002\034\005\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\064\005\041\006\065\013\014\014\017\015" +
    "\042\016\050\017\055\020\022\021\044\022\040\023\051" +
    "\032\020\034\006\041\061\044\027\047\016\050\043\051" +
    "\064\052\054\053\053\054\023\055\060\056\011\057\031" +
    "\063\035\001\002\000\004\002\u0107\001\002\000\016\033" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\042\uffcf\064\uffcf\001\002" +
    "\000\056\005\041\013\014\014\017\015\042\016\050\021" +
    "\044\022\040\023\051\032\020\034\006\035\uff78\041\061" +
    "\044\027\047\016\050\043\051\077\052\054\053\053\054" +
    "\023\055\060\056\011\057\031\001\002\000\016\033\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\042\ufff8\064\ufff8\001\002\000" +
    "\070\002\000\005\041\006\065\013\014\014\017\015\042" +
    "\016\050\017\055\020\022\021\044\022\040\023\051\032" +
    "\020\034\006\041\061\044\027\046\000\047\016\050\043" +
    "\051\064\052\054\053\053\054\023\055\060\056\011\057" +
    "\031\063\035\001\002\000\016\033\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\042\uffa8\064\uffa8\001\002\000\022\033\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\042\uffb9\061\u0101\064\uffb9\065\uffb9" +
    "\001\002\000\016\033\uffa9\035\uffa9\036\uffa9\037\uffa9\042" +
    "\uffa9\064\uffa9\001\002\000\004\032\374\001\002\000\016" +
    "\033\ufff3\035\ufff3\036\ufff3\037\ufff3\042\ufff3\064\ufff3\001" +
    "\002\000\036\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\033\uff83\035\uff83\036\uff83\037\uff83\042\uff83\060\uff83\061" +
    "\uff83\064\uff83\065\uff83\001\002\000\004\032\365\001\002" +
    "\000\056\005\041\013\014\014\017\015\042\016\050\021" +
    "\044\022\040\023\051\026\135\032\020\034\006\041\061" +
    "\044\027\047\016\050\043\051\077\052\054\053\053\054" +
    "\023\055\060\056\011\057\031\001\002\000\016\025\175" +
    "\026\176\027\157\030\156\031\155\060\361\001\002\000" +
    "\004\032\356\001\002\000\036\025\uff81\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\033\uff81\035\uff81\036\uff81\037\uff81\042" +
    "\uff81\060\uff81\061\uff81\064\uff81\065\uff81\001\002\000\006" +
    "\036\ufffc\064\ufffc\001\002\000\016\033\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\042\uffa0\064\uffa0\001\002\000\016\033\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\042\uffaa\064\uffaa\001\002\000" +
    "\030\015\304\021\044\022\040\032\301\044\027\047\016" +
    "\050\043\051\302\053\053\054\023\057\031\001\002\000" +
    "\036\025\uff91\026\uff91\027\146\030\145\031\144\033\uff91" +
    "\035\uff91\036\uff91\037\uff91\042\uff91\060\uff91\061\uff91\064" +
    "\uff91\065\uff91\001\002\000\022\033\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\042\uffb4\061\uffb4\064\uffb4\065\uffb4\001\002\000" +
    "\006\036\ufffd\064\ufffd\001\002\000\016\033\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\042\ufff5\064\ufff5\001\002\000\020\033" +
    "\ufff6\034\351\035\ufff6\036\ufff6\037\ufff6\042\ufff6\064\ufff6" +
    "\001\002\000\030\015\304\021\044\022\040\032\301\044" +
    "\027\047\016\050\043\051\302\053\053\054\023\057\031" +
    "\001\002\000\036\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\033\uff84\035\uff84\036\uff84\037\uff84\042\uff84\060\uff84" +
    "\061\uff84\064\uff84\065\uff84\001\002\000\016\033\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\042\uffa1\064\uffa1\001\002\000\004" +
    "\043\335\001\002\000\004\032\327\001\002\000\006\032" +
    "\322\043\305\001\002\000\036\025\uff82\026\uff82\027\uff82" +
    "\030\uff82\031\uff82\033\uff82\035\uff82\036\uff82\037\uff82\042" +
    "\uff82\060\uff82\061\uff82\064\uff82\065\uff82\001\002\000\004" +
    "\043\314\001\002\000\004\061\277\001\002\000\024\025" +
    "\140\026\141\033\ufff7\035\ufff7\036\ufff7\037\ufff7\042\ufff7" +
    "\060\274\064\ufff7\001\002\000\016\033\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\042\ufff2\064\ufff2\001\002\000\004\032\271" +
    "\001\002\000\004\032\233\001\002\000\016\033\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\042\ufff4\064\ufff4\001\002\000\036" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\033\uff80\035" +
    "\uff80\036\uff80\037\uff80\042\uff80\060\uff80\061\uff80\064\uff80" +
    "\065\uff80\001\002\000\016\033\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\042\uff9f\064\uff9f\001\002\000\004\051\203\001\002" +
    "\000\006\036\ufff9\064\ufff9\001\002\000\004\034\130\001" +
    "\002\000\016\033\uffa7\035\uffa7\036\uffa7\037\uffa7\042\uffa7" +
    "\064\uffa7\001\002\000\056\005\041\013\014\014\017\015" +
    "\042\016\050\021\044\022\040\023\051\032\020\034\006" +
    "\041\061\042\uff78\044\027\047\016\050\043\051\077\052" +
    "\054\053\053\054\023\055\060\056\011\057\031\001\002" +
    "\000\016\033\uffce\035\uffce\036\uffce\037\uffce\042\uffce\064" +
    "\uffce\001\002\000\022\033\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\042\uffb5\061\uffb5\064\uffb5\065\uffb5\001\002\000\034\004" +
    "\123\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\100" +
    "\034\uff7b\036\uffdf\037\122\060\uff9a\061\uffbe\064\uffdf\001" +
    "\002\000\004\032\117\001\002\000\004\036\116\001\002" +
    "\000\006\004\071\037\070\001\002\000\004\051\115\001" +
    "\002\000\006\032\074\051\072\001\002\000\006\036\uffd8" +
    "\064\uffd8\001\002\000\006\036\uffd9\064\uffd9\001\002\000" +
    "\054\005\041\013\014\014\017\015\042\016\050\021\044" +
    "\022\040\023\051\032\020\034\006\041\061\044\027\047" +
    "\016\050\043\051\077\052\054\053\053\054\023\055\060" +
    "\056\011\057\031\001\002\000\006\033\113\037\112\001" +
    "\002\000\004\037\110\001\002\000\040\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\100\033\uffdf\034\uff7b\035" +
    "\uffdf\036\uffdf\037\uffdf\042\uffdf\060\uff9a\061\uffbe\064\uffdf" +
    "\001\002\000\056\005\041\013\014\014\017\015\042\016" +
    "\050\021\044\022\040\023\051\032\020\033\uff78\034\006" +
    "\041\061\044\027\047\016\050\043\051\077\052\054\053" +
    "\053\054\023\055\060\056\011\057\031\001\002\000\010" +
    "\033\uffd2\035\uffd2\042\uffd2\001\002\000\004\033\107\001" +
    "\002\000\012\033\uffd3\035\uffd3\037\105\042\uffd3\001\002" +
    "\000\012\033\uffd0\035\uffd0\037\uffd0\042\uffd0\001\002\000" +
    "\054\005\041\013\014\014\017\015\042\016\050\021\044" +
    "\022\040\023\051\032\020\034\006\041\061\044\027\047" +
    "\016\050\043\051\077\052\054\053\053\054\023\055\060" +
    "\056\011\057\031\001\002\000\012\033\uffd1\035\uffd1\037" +
    "\uffd1\042\uffd1\001\002\000\016\033\uffde\035\uffde\036\uffde" +
    "\037\uffde\042\uffde\064\uffde\001\002\000\054\005\041\013" +
    "\014\014\017\015\042\016\050\021\044\022\040\023\051" +
    "\032\020\034\006\041\061\044\027\047\016\050\043\051" +
    "\077\052\054\053\053\054\023\055\060\056\011\057\031" +
    "\001\002\000\006\033\uffd4\037\uffd4\001\002\000\054\005" +
    "\041\013\014\014\017\015\042\016\050\021\044\022\040" +
    "\023\051\032\020\034\006\041\061\044\027\047\016\050" +
    "\043\051\077\052\054\053\053\054\023\055\060\056\011" +
    "\057\031\001\002\000\016\033\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\042\uffdb\064\uffdb\001\002\000\006\033\uffd5\037\uffd5" +
    "\001\002\000\006\004\uffcb\037\uffcb\001\002\000\070\002" +
    "\ufffe\005\ufffe\006\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\032\ufffe\034" +
    "\ufffe\041\ufffe\044\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\063" +
    "\ufffe\001\002\000\054\005\041\013\014\014\017\015\042" +
    "\016\050\021\044\022\040\023\051\032\020\034\006\041" +
    "\061\044\027\047\016\050\043\051\077\052\054\053\053" +
    "\054\023\055\060\056\011\057\031\001\002\000\004\033" +
    "\121\001\002\000\006\036\ufffb\064\ufffb\001\002\000\004" +
    "\051\125\001\002\000\054\005\041\013\014\014\017\015" +
    "\042\016\050\021\044\022\040\023\051\032\020\034\006" +
    "\041\061\044\027\047\016\050\043\051\077\052\054\053" +
    "\053\054\023\055\060\056\011\057\031\001\002\000\006" +
    "\036\uffda\064\uffda\001\002\000\006\004\uffca\037\uffca\001" +
    "\002\000\004\042\127\001\002\000\020\033\uff79\034\uff79" +
    "\035\uff79\036\uff79\037\uff79\042\uff79\064\uff79\001\002\000" +
    "\016\032\134\047\016\050\043\051\132\053\053\054\023" +
    "\001\002\000\014\025\175\026\176\027\157\030\156\031" +
    "\155\001\002\000\036\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\033\uff9a\035\uff9a\036\uff9a\037\uff9a\042\uff9a\060" +
    "\uff9a\061\uff9a\064\uff9a\065\uff9a\001\002\000\010\025\140" +
    "\026\141\035\174\001\002\000\020\026\135\032\134\047" +
    "\016\050\043\051\132\053\053\054\023\001\002\000\016" +
    "\032\134\047\016\050\043\051\132\053\053\054\023\001" +
    "\002\000\010\025\140\026\141\033\137\001\002\000\036" +
    "\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\033\uff7d\035" +
    "\uff7d\036\uff7d\037\uff7d\042\uff7d\060\uff7d\061\uff7d\064\uff7d" +
    "\065\uff7d\001\002\000\016\032\134\047\016\050\043\051" +
    "\132\053\053\054\023\001\002\000\016\032\134\047\016" +
    "\050\043\051\132\053\053\054\023\001\002\000\036\025" +
    "\uff94\026\uff94\027\157\030\156\031\155\033\uff94\035\uff94" +
    "\036\uff94\037\uff94\042\uff94\060\uff94\061\uff94\064\uff94\065" +
    "\uff94\001\002\000\036\025\uff98\026\uff98\027\146\030\145" +
    "\031\144\033\uff98\035\uff98\036\uff98\037\uff98\042\uff98\060" +
    "\uff98\061\uff98\064\uff98\065\uff98\001\002\000\016\032\134" +
    "\047\016\050\043\051\132\053\053\054\023\001\002\000" +
    "\016\032\134\047\016\050\043\051\132\053\053\054\023" +
    "\001\002\000\016\032\134\047\016\050\043\051\132\053" +
    "\053\054\023\001\002\000\036\025\uff90\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\033\uff90\035\uff90\036\uff90\037\uff90\042" +
    "\uff90\060\uff90\061\uff90\064\uff90\065\uff90\001\002\000\036" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\033\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\042\uff8d\060\uff8d\061\uff8d\064\uff8d" +
    "\065\uff8d\001\002\000\036\025\uff8f\026\uff8f\027\uff8f\030" +
    "\uff8f\031\uff8f\033\uff8f\035\uff8f\036\uff8f\037\uff8f\042\uff8f" +
    "\060\uff8f\061\uff8f\064\uff8f\065\uff8f\001\002\000\036\025" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c\035\uff8c" +
    "\036\uff8c\037\uff8c\042\uff8c\060\uff8c\061\uff8c\064\uff8c\065" +
    "\uff8c\001\002\000\036\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\033\uff8e\035\uff8e\036\uff8e\037\uff8e\042\uff8e\060" +
    "\uff8e\061\uff8e\064\uff8e\065\uff8e\001\002\000\036\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\033\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\042\uff8b\060\uff8b\061\uff8b\064\uff8b\065\uff8b" +
    "\001\002\000\016\032\134\047\016\050\043\051\132\053" +
    "\053\054\023\001\002\000\016\032\134\047\016\050\043" +
    "\051\132\053\053\054\023\001\002\000\016\032\134\047" +
    "\016\050\043\051\132\053\053\054\023\001\002\000\036" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\042\uff8a\060\uff8a\061\uff8a\064\uff8a" +
    "\065\uff8a\001\002\000\036\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\033\uff87\035\uff87\036\uff87\037\uff87\042\uff87" +
    "\060\uff87\061\uff87\064\uff87\065\uff87\001\002\000\036\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\033\uff89\035\uff89" +
    "\036\uff89\037\uff89\042\uff89\060\uff89\061\uff89\064\uff89\065" +
    "\uff89\001\002\000\036\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\033\uff86\035\uff86\036\uff86\037\uff86\042\uff86\060" +
    "\uff86\061\uff86\064\uff86\065\uff86\001\002\000\036\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\033\uff88\035\uff88\036" +
    "\uff88\037\uff88\042\uff88\060\uff88\061\uff88\064\uff88\065\uff88" +
    "\001\002\000\036\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\033\uff85\035\uff85\036\uff85\037\uff85\042\uff85\060\uff85" +
    "\061\uff85\064\uff85\065\uff85\001\002\000\036\025\uff95\026" +
    "\uff95\027\157\030\156\031\155\033\uff95\035\uff95\036\uff95" +
    "\037\uff95\042\uff95\060\uff95\061\uff95\064\uff95\065\uff95\001" +
    "\002\000\036\025\uff99\026\uff99\027\146\030\145\031\144" +
    "\033\uff99\035\uff99\036\uff99\037\uff99\042\uff99\060\uff99\061" +
    "\uff99\064\uff99\065\uff99\001\002\000\012\027\157\030\156" +
    "\031\155\033\173\001\002\000\012\027\146\030\145\031" +
    "\144\033\172\001\002\000\036\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\033\uff7f\035\uff7f\036\uff7f\037\uff7f\042" +
    "\uff7f\060\uff7f\061\uff7f\064\uff7f\065\uff7f\001\002\000\036" +
    "\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\033\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\042\uff7e\060\uff7e\061\uff7e\064\uff7e" +
    "\065\uff7e\001\002\000\016\033\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\042\uffe4\064\uffe4\001\002\000\016\032\134\047\016" +
    "\050\043\051\132\053\053\054\023\001\002\000\016\032" +
    "\134\047\016\050\043\051\132\053\053\054\023\001\002" +
    "\000\036\025\uff92\026\uff92\027\157\030\156\031\155\033" +
    "\uff92\035\uff92\036\uff92\037\uff92\042\uff92\060\uff92\061\uff92" +
    "\064\uff92\065\uff92\001\002\000\036\025\uff96\026\uff96\027" +
    "\146\030\145\031\144\033\uff96\035\uff96\036\uff96\037\uff96" +
    "\042\uff96\060\uff96\061\uff96\064\uff96\065\uff96\001\002\000" +
    "\036\025\uff93\026\uff93\027\157\030\156\031\155\033\uff93" +
    "\035\uff93\036\uff93\037\uff93\042\uff93\060\uff93\061\uff93\064" +
    "\uff93\065\uff93\001\002\000\036\025\uff97\026\uff97\027\146" +
    "\030\145\031\144\033\uff97\035\uff97\036\uff97\037\uff97\042" +
    "\uff97\060\uff97\061\uff97\064\uff97\065\uff97\001\002\000\056" +
    "\005\041\007\205\013\014\014\017\015\042\016\050\021" +
    "\044\022\040\023\051\032\020\034\006\041\061\044\027" +
    "\047\016\050\043\051\077\052\054\053\053\054\023\055" +
    "\060\056\011\057\031\001\002\000\006\036\uffd6\064\uffd6" +
    "\001\002\000\012\011\213\012\210\032\212\051\207\001" +
    "\002\000\006\036\uffd7\064\uffd7\001\002\000\010\033\uffc5" +
    "\037\uffc5\045\uffc5\001\002\000\004\051\232\001\002\000" +
    "\004\045\227\001\002\000\012\011\213\012\210\033\uff78" +
    "\051\207\001\002\000\004\051\214\001\002\000\010\033" +
    "\uffc7\037\uffc7\045\uffc7\001\002\000\006\033\uffc9\037\225" +
    "\001\002\000\004\033\221\001\002\000\006\033\uffc3\037" +
    "\uffc3\001\002\000\004\033\uffc8\001\002\000\004\045\222" +
    "\001\002\000\064\005\041\006\065\013\014\014\017\015" +
    "\042\016\050\017\055\020\022\021\044\022\040\023\051" +
    "\032\020\034\006\041\061\044\027\047\016\050\043\051" +
    "\064\052\054\053\053\054\023\055\060\056\011\057\031" +
    "\063\035\001\002\000\004\046\224\001\002\000\006\036" +
    "\uffcd\064\uffcd\001\002\000\010\011\213\012\210\051\207" +
    "\001\002\000\006\033\uffc4\037\uffc4\001\002\000\064\005" +
    "\041\006\065\013\014\014\017\015\042\016\050\017\055" +
    "\020\022\021\044\022\040\023\051\032\020\034\006\041" +
    "\061\044\027\047\016\050\043\051\064\052\054\053\053" +
    "\054\023\055\060\056\011\057\031\063\035\001\002\000" +
    "\004\046\231\001\002\000\006\036\uffcc\064\uffcc\001\002" +
    "\000\010\033\uffc6\037\uffc6\045\uffc6\001\002\000\006\051" +
    "\234\052\054\001\002\000\004\037\uffa2\001\002\000\004" +
    "\037\254\001\002\000\004\037\237\001\002\000\016\032" +
    "\134\047\016\050\043\051\132\053\053\054\023\001\002" +
    "\000\016\025\175\026\176\027\157\030\156\031\155\037" +
    "\247\001\002\000\010\025\140\026\141\037\242\001\002" +
    "\000\016\032\134\047\016\050\043\051\132\053\053\054" +
    "\023\001\002\000\016\025\175\026\176\027\157\030\156" +
    "\031\155\033\246\001\002\000\010\025\140\026\141\033" +
    "\245\001\002\000\016\033\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\042\uffe9\064\uffe9\001\002\000\016\033\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\042\uffe7\064\uffe7\001\002\000\016\032\134" +
    "\047\016\050\043\051\132\053\053\054\023\001\002\000" +
    "\016\025\175\026\176\027\157\030\156\031\155\033\253" +
    "\001\002\000\010\025\140\026\141\033\252\001\002\000" +
    "\016\033\uffe6\035\uffe6\036\uffe6\037\uffe6\042\uffe6\064\uffe6" +
    "\001\002\000\016\033\uffe8\035\uffe8\036\uffe8\037\uffe8\042" +
    "\uffe8\064\uffe8\001\002\000\016\032\134\047\016\050\043" +
    "\051\132\053\053\054\023\001\002\000\016\025\175\026" +
    "\176\027\157\030\156\031\155\037\264\001\002\000\010" +
    "\025\140\026\141\037\257\001\002\000\016\032\134\047" +
    "\016\050\043\051\132\053\053\054\023\001\002\000\016" +
    "\025\175\026\176\027\157\030\156\031\155\033\263\001" +
    "\002\000\010\025\140\026\141\033\262\001\002\000\016" +
    "\033\uffed\035\uffed\036\uffed\037\uffed\042\uffed\064\uffed\001" +
    "\002\000\016\033\uffeb\035\uffeb\036\uffeb\037\uffeb\042\uffeb" +
    "\064\uffeb\001\002\000\016\032\134\047\016\050\043\051" +
    "\132\053\053\054\023\001\002\000\016\025\175\026\176" +
    "\027\157\030\156\031\155\033\270\001\002\000\010\025" +
    "\140\026\141\033\267\001\002\000\016\033\uffea\035\uffea" +
    "\036\uffea\037\uffea\042\uffea\064\uffea\001\002\000\016\033" +
    "\uffec\035\uffec\036\uffec\037\uffec\042\uffec\064\uffec\001\002" +
    "\000\056\005\041\013\014\014\017\015\042\016\050\021" +
    "\044\022\040\023\051\032\020\033\uff78\034\006\041\061" +
    "\044\027\047\016\050\043\051\077\052\054\053\053\054" +
    "\023\055\060\056\011\057\031\001\002\000\004\033\273" +
    "\001\002\000\016\033\uffe1\035\uffe1\036\uffe1\037\uffe1\042" +
    "\uffe1\064\uffe1\001\002\000\016\032\134\047\016\050\043" +
    "\051\132\053\053\054\023\001\002\000\034\025\175\026" +
    "\176\027\157\030\156\031\155\033\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\042\uffb6\061\uffb6\064\uffb6\065\uffb6\001\002\000" +
    "\026\025\140\026\141\033\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\042\uffb8\061\uffb8\064\uffb8\065\uffb8\001\002\000\030\015" +
    "\304\021\044\022\040\032\301\044\027\047\016\050\043" +
    "\051\302\053\053\054\023\057\031\001\002\000\010\025" +
    "\140\026\141\060\274\001\002\000\032\015\304\021\044" +
    "\022\040\026\135\032\301\044\027\047\016\050\043\051" +
    "\302\053\053\054\023\057\031\001\002\000\036\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\042\uffbe\060\uff9a\061\uffbe\064\uffbe\065\uffbe" +
    "\001\002\000\020\033\uffbb\035\uffbb\036\uffbb\037\uffbb\042" +
    "\uffbb\064\uffbb\065\uffbb\001\002\000\004\043\305\001\002" +
    "\000\004\032\306\001\002\000\054\005\041\013\014\014" +
    "\017\015\042\016\050\021\044\022\040\023\051\032\020" +
    "\034\006\041\061\044\027\047\016\050\043\051\077\052" +
    "\054\053\053\054\023\055\060\056\011\057\031\001\002" +
    "\000\004\033\310\001\002\000\022\033\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\042\uffb2\061\uffb2\064\uffb2\065\uffb2\001\002" +
    "\000\012\025\140\026\141\033\137\060\274\001\002\000" +
    "\004\033\313\001\002\000\022\033\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\042\uffb3\061\uffb3\064\uffb3\065\uffb3\001\002\000" +
    "\004\032\315\001\002\000\054\005\041\013\014\014\017" +
    "\015\042\016\050\021\044\022\040\023\051\032\020\034" +
    "\006\041\061\044\027\047\016\050\043\051\077\052\054" +
    "\053\053\054\023\055\060\056\011\057\031\001\002\000" +
    "\004\037\317\001\002\000\054\005\041\013\014\014\017" +
    "\015\042\016\050\021\044\022\040\023\051\032\020\034" +
    "\006\041\061\044\027\047\016\050\043\051\077\052\054" +
    "\053\053\054\023\055\060\056\011\057\031\001\002\000" +
    "\004\033\321\001\002\000\022\033\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\042\uffb1\061\uffb1\064\uffb1\065\uffb1\001\002\000" +
    "\054\005\041\013\014\014\017\015\042\016\050\021\044" +
    "\022\040\023\051\032\020\034\006\041\061\044\027\047" +
    "\016\050\043\051\077\052\054\053\053\054\023\055\060" +
    "\056\011\057\031\001\002\000\004\037\324\001\002\000" +
    "\054\005\041\013\014\014\017\015\042\016\050\021\044" +
    "\022\040\023\051\032\020\034\006\041\061\044\027\047" +
    "\016\050\043\051\077\052\054\053\053\054\023\055\060" +
    "\056\011\057\031\001\002\000\004\033\326\001\002\000" +
    "\016\033\uff7a\035\uff7a\036\uff7a\037\uff7a\042\uff7a\064\uff7a" +
    "\001\002\000\006\041\061\051\330\001\002\000\004\033" +
    "\uff7b\001\002\000\004\033\334\001\002\000\004\033\333" +
    "\001\002\000\016\033\uffe2\035\uffe2\036\uffe2\037\uffe2\042" +
    "\uffe2\064\uffe2\001\002\000\016\033\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\042\uffe3\064\uffe3\001\002\000\004\032\336\001" +
    "\002\000\054\005\041\013\014\014\017\015\042\016\050" +
    "\021\044\022\040\023\051\032\020\034\006\041\061\044" +
    "\027\047\016\050\043\051\077\052\054\053\053\054\023" +
    "\055\060\056\011\057\031\001\002\000\004\037\340\001" +
    "\002\000\054\005\041\013\014\014\017\015\042\016\050" +
    "\021\044\022\040\023\051\032\020\034\006\041\061\044" +
    "\027\047\016\050\043\051\077\052\054\053\053\054\023" +
    "\055\060\056\011\057\031\001\002\000\004\033\342\001" +
    "\002\000\022\033\uffb0\035\uffb0\036\uffb0\037\uffb0\042\uffb0" +
    "\061\uffb0\064\uffb0\065\uffb0\001\002\000\004\065\344\001" +
    "\002\000\064\005\041\006\065\013\014\014\017\015\042" +
    "\016\050\017\055\020\022\021\044\022\040\023\051\032" +
    "\020\034\006\041\061\044\027\047\016\050\043\051\064" +
    "\052\054\053\053\054\023\055\060\056\011\057\031\063" +
    "\035\001\002\000\006\036\347\064\346\001\002\000\064" +
    "\005\041\006\065\013\014\014\017\015\042\016\050\017" +
    "\055\020\022\021\044\022\040\023\051\032\020\034\006" +
    "\041\061\044\027\047\016\050\043\051\064\052\054\053" +
    "\053\054\023\055\060\056\011\057\031\063\035\001\002" +
    "\000\006\036\uffdc\064\uffdc\001\002\000\006\036\uffdd\064" +
    "\uffdd\001\002\000\016\032\134\047\016\050\043\051\132" +
    "\053\053\054\023\001\002\000\010\025\140\026\141\035" +
    "\353\001\002\000\016\033\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\042\uffe5\064\uffe5\001\002\000\022\033\uffba\035\uffba\036" +
    "\uffba\037\uffba\042\uffba\061\277\064\uffba\065\uffba\001\002" +
    "\000\020\033\uffbc\035\uffbc\036\uffbc\037\uffbc\042\uffbc\064" +
    "\uffbc\065\uffbc\001\002\000\054\005\041\013\014\014\017" +
    "\015\042\016\050\021\044\022\040\023\051\032\020\034" +
    "\006\041\061\044\027\047\016\050\043\051\077\052\054" +
    "\053\053\054\023\055\060\056\011\057\031\001\002\000" +
    "\004\033\360\001\002\000\006\036\ufffa\064\ufffa\001\002" +
    "\000\016\032\134\047\016\050\043\051\132\053\053\054" +
    "\023\001\002\000\026\025\140\026\141\033\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\042\uffb7\061\uffb7\064\uffb7\065\uffb7\001" +
    "\002\000\006\033\313\037\ufff3\001\002\000\014\025\140" +
    "\026\141\033\137\037\ufff7\060\274\001\002\000\006\015" +
    "\370\051\366\001\002\000\004\033\uff7c\001\002\000\004" +
    "\033\373\001\002\000\004\032\322\001\002\000\004\033" +
    "\372\001\002\000\016\033\uffef\035\uffef\036\uffef\037\uffef" +
    "\042\uffef\064\uffef\001\002\000\016\033\uffee\035\uffee\036" +
    "\uffee\037\uffee\042\uffee\064\uffee\001\002\000\006\015\370" +
    "\051\366\001\002\000\004\033\u0100\001\002\000\004\033" +
    "\377\001\002\000\016\033\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\042\ufff1\064\ufff1\001\002\000\016\033\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\042\ufff0\064\ufff0\001\002\000\030\015\304" +
    "\021\044\022\040\032\301\044\027\047\016\050\043\051" +
    "\302\053\053\054\023\057\031\001\002\000\020\033\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\042\uffbd\064\uffbd\065\uffbd\001" +
    "\002\000\004\036\u0104\001\002\000\070\002\uffff\005\uffff" +
    "\006\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020" +
    "\uffff\021\uffff\022\uffff\023\uffff\032\uffff\034\uffff\041\uffff" +
    "\044\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053" +
    "\uffff\054\uffff\055\uffff\056\uffff\057\uffff\063\uffff\001\002" +
    "\000\004\035\u0106\001\002\000\016\033\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\042\uffe0\064\uffe0\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\070\003\066\007\003\010\007\011\065\012" +
    "\031\013\055\014\061\016\004\017\045\020\027\021\035" +
    "\022\032\023\036\024\024\025\051\026\025\027\012\030" +
    "\014\031\011\032\062\033\006\034\033\050\023\051\044" +
    "\053\020\057\056\060\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\006\100\013\103\014\061\016\004" +
    "\017\045\020\027\021\035\022\032\023\036\024\024\025" +
    "\051\026\025\027\012\030\014\031\011\032\062\033\006" +
    "\034\033\045\102\046\u0104\051\044\053\020\057\056\060" +
    "\046\001\001\000\002\001\001\000\064\003\066\011\u0102" +
    "\012\031\013\055\014\061\016\004\017\045\020\027\021" +
    "\035\022\032\023\036\024\024\025\051\026\025\027\012" +
    "\030\014\031\011\032\062\033\006\034\033\050\023\051" +
    "\044\053\020\057\056\060\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\013\075\014\061\016\004\017\363\020\027\021\035\022" +
    "\032\023\036\024\024\025\051\026\025\027\012\030\362" +
    "\031\011\032\062\033\006\034\033\047\074\051\044\053" +
    "\020\057\056\060\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\017\277\020\027\021\035" +
    "\030\354\031\011\032\062\051\353\053\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\277\020\027\021" +
    "\035\030\342\031\011\032\062\051\044\053\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\006\100\013\103\014\061\016\004\017\045\020\027\021" +
    "\035\022\032\023\036\024\024\025\051\026\025\027\012" +
    "\030\014\031\011\032\062\033\006\034\033\045\102\046" +
    "\125\051\044\053\020\057\056\060\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\013\075\014\061\016\004\017\045\020\027" +
    "\021\035\022\032\023\036\024\024\025\051\026\025\027" +
    "\012\030\014\031\011\032\062\033\006\034\033\047\074" +
    "\051\044\053\020\057\056\060\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\006\100" +
    "\013\103\014\061\016\004\017\045\020\027\021\035\022" +
    "\032\023\036\024\024\025\051\026\025\027\012\030\014" +
    "\031\011\032\062\033\006\034\033\045\102\046\101\051" +
    "\044\053\020\057\056\060\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\013\105\014\061\016\004\017\045\020\027\021\035" +
    "\022\032\023\036\024\024\025\051\026\025\027\012\030" +
    "\014\031\011\032\062\033\006\034\033\051\044\053\020" +
    "\057\056\060\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\013\110\014\061\016\004\017\045\020\027" +
    "\021\035\022\032\023\036\024\024\025\051\026\025\027" +
    "\012\030\014\031\011\032\062\033\006\034\033\051\044" +
    "\053\020\057\056\060\046\001\001\000\002\001\001\000" +
    "\054\013\113\014\061\016\004\017\045\020\027\021\035" +
    "\022\032\023\036\024\024\025\051\026\025\027\012\030" +
    "\014\031\011\032\062\033\006\034\033\051\044\053\020" +
    "\057\056\060\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\013\117" +
    "\014\061\016\004\017\045\020\027\021\035\022\032\023" +
    "\036\024\024\025\051\026\025\027\012\030\014\031\011" +
    "\032\062\033\006\034\033\051\044\053\020\057\056\060" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\013\123\014\061\016\004\017\045\020" +
    "\027\021\035\022\032\023\036\024\024\025\051\026\025" +
    "\027\012\030\014\031\011\032\062\033\006\034\033\051" +
    "\044\053\020\057\056\060\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\132\020\027\021\035\053\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\135\020\027\021\035\053\130\001\001\000\010\020\170" +
    "\021\035\053\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\166\021\035\053\165\001\001\000\010" +
    "\020\142\021\035\053\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\152\053\153\001\001\000\006" +
    "\021\150\053\151\001\001\000\006\021\146\053\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\163\053\164\001\001\000\006\021\161\053\162" +
    "\001\001\000\006\021\157\053\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\201\021\035\053\200\001\001\000\010\020\177\021\035" +
    "\053\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\013\205\014\061" +
    "\015\203\016\004\017\045\020\027\021\035\022\032\023" +
    "\036\024\024\025\051\026\025\027\012\030\014\031\011" +
    "\032\062\033\006\034\033\051\044\053\020\057\056\060" +
    "\046\001\001\000\002\001\001\000\004\005\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\214\004\215\005\216\006\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\003\066\007\222\010\007\011" +
    "\065\012\031\013\055\014\061\016\004\017\045\020\027" +
    "\021\035\022\032\023\036\024\024\025\051\026\025\027" +
    "\012\030\014\031\011\032\062\033\006\034\033\050\023" +
    "\051\044\053\020\057\056\060\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\225\001\001\000\002" +
    "\001\001\000\070\003\066\007\227\010\007\011\065\012" +
    "\031\013\055\014\061\016\004\017\045\020\027\021\035" +
    "\022\032\023\036\024\024\025\051\026\025\027\012\030" +
    "\014\031\011\032\062\033\006\034\033\050\023\051\044" +
    "\053\020\057\056\060\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\234\023\036" +
    "\024\024\054\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\240\020\027\021\035" +
    "\053\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\243\020\027\021\035\053\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\250\020\027\021\035\053\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\255\020\027\021\035\053\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\260\020\027\021\035\053\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\265\020\027\021\035\053\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\006\100\013\103\014\061\016\004\017\045" +
    "\020\027\021\035\022\032\023\036\024\024\025\051\026" +
    "\025\027\012\030\014\031\011\032\062\033\006\034\033" +
    "\045\102\046\271\051\044\053\020\057\056\060\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\275" +
    "\020\027\021\035\053\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\017\277\020\027\021\035\030\302" +
    "\031\011\032\062\051\044\053\020\001\001\000\002\001" +
    "\001\000\022\017\310\020\027\021\035\030\311\031\011" +
    "\032\062\051\044\053\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\013\306\014\061\016\004\017\045\020\027\021\035\022" +
    "\032\023\036\024\024\025\051\026\025\027\012\030\014" +
    "\031\011\032\062\033\006\034\033\051\044\053\020\057" +
    "\056\060\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\013\315\014\061\016\004\017\045" +
    "\020\027\021\035\022\032\023\036\024\024\025\051\026" +
    "\025\027\012\030\014\031\011\032\062\033\006\034\033" +
    "\051\044\053\020\057\056\060\046\001\001\000\002\001" +
    "\001\000\054\013\317\014\061\016\004\017\045\020\027" +
    "\021\035\022\032\023\036\024\024\025\051\026\025\027" +
    "\012\030\014\031\011\032\062\033\006\034\033\051\044" +
    "\053\020\057\056\060\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\013\322\014\061\016\004\017\045" +
    "\020\027\021\035\022\032\023\036\024\024\025\051\026" +
    "\025\027\012\030\014\031\011\032\062\033\006\034\033" +
    "\051\044\053\020\057\056\060\046\001\001\000\002\001" +
    "\001\000\054\013\324\014\061\016\004\017\045\020\027" +
    "\021\035\022\032\023\036\024\024\025\051\026\025\027" +
    "\012\030\014\031\011\032\062\033\006\034\033\051\044" +
    "\053\020\057\056\060\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\330\057\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\013\336" +
    "\014\061\016\004\017\045\020\027\021\035\022\032\023" +
    "\036\024\024\025\051\026\025\027\012\030\014\031\011" +
    "\032\062\033\006\034\033\051\044\053\020\057\056\060" +
    "\046\001\001\000\002\001\001\000\054\013\340\014\061" +
    "\016\004\017\045\020\027\021\035\022\032\023\036\024" +
    "\024\025\051\026\025\027\012\030\014\031\011\032\062" +
    "\033\006\034\033\051\044\053\020\057\056\060\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\066\011\344\012\031\013\055\014\061\016" +
    "\004\017\045\020\027\021\035\022\032\023\036\024\024" +
    "\025\051\026\025\027\012\030\014\031\011\032\062\033" +
    "\006\034\033\050\023\051\044\053\020\057\056\060\046" +
    "\001\001\000\002\001\001\000\064\003\066\011\347\012" +
    "\031\013\055\014\061\016\004\017\045\020\027\021\035" +
    "\022\032\023\036\024\024\025\051\026\025\027\012\030" +
    "\014\031\011\032\062\033\006\034\033\050\023\051\044" +
    "\053\020\057\056\060\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\351\020\027\021\035\053\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\013\356\014\061\016\004" +
    "\017\045\020\027\021\035\022\032\023\036\024\024\025" +
    "\051\026\025\027\012\030\014\031\011\032\062\033\006" +
    "\034\033\051\044\053\020\057\056\060\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\361\020\027" +
    "\021\035\053\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\370\056\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\375\056\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\277" +
    "\020\027\021\035\030\u0101\031\011\032\062\051\044\053" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // No longer necessary    
    
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
        System.out.println(ioe.getMessage());
        throw ioe;
    }
    
    }


    SMPLLexer lexer;

    public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

    public SMPLParser(String file) throws FileNotFoundException {
              this(new SMPLLexer(new FileReader(file)));
    }

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(new InputStreamReader(is)));
                }

    public void report_error(String message, Object info) {
        System.err.println(message + info);
    }

    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error while reading: ", cur_token);
        System.err.println ("Last token read is " +
           lexer.getText());
    }
      

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {

          
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram start_val = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SIRProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SIRProgram(seq);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt SEMI 
            {
              SIRSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt SEMI 
            {
              SIRSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            SIRSequence seq = new SIRSequence();
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment 
            {
              SIRStatement RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement assign = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = assign;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IFCond 
            {
              SIRStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ConditionalStatement cond = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = cond;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= PRINT LPAREN smplExp RPAREN 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintStmt(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= PRINTLN LPAREN smplExp RPAREN 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new PrintStmt(exp, true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= smplExp 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Statement(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expressions ::= pairExp 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pair; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressions ::= arithExp 
            {
              SIRObj RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = aExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressions ::= vectorExp 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (VectorExp) vector; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressions ::= stringExp 
            {
              SIRObj RESULT =null;
		int sExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp sExp = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = sExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expressions ::= charExp 
            {
              SIRObj RESULT =null;
		int chExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp chExp = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = chExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expressions ::= boolExp 
            {
              SIRObj RESULT =null;
		int bExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bExp = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expressions ::= tupleExp 
            {
              SIRObj RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = tuple; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expressions ::= CAR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressions ::= CAR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressions ::= CDR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressions ::= CDR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressions ::= SUBSTR LPAREN stringExp COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressions ::= SUBSTR LPAREN stringExp COMMA arithVar COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions ::= SUBSTR LPAREN stringExp COMMA arithExp COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= SUBSTR LPAREN stringExp COMMA arithVar COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressions ::= SUBSTR LPAREN stringVar COMMA arithExp COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressions ::= SUBSTR LPAREN stringVar COMMA arithVar COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressions ::= SUBSTR LPAREN stringVar COMMA arithExp COMMA arithVar RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expressions ::= SUBSTR LPAREN stringVar COMMA arithVar COMMA arithExp RPAREN 
            {
              SIRObj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		StringExp string = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SubString(string, exp1, exp2); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expressions ::= vectorExp LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressions ::= vectorVar LBRACKET arithExp RBRACKET 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp exp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("ele", vector, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressions ::= SIZE LPAREN vectorExp RPAREN 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		VectorExp vector = (VectorExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("size", vector); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressions ::= SIZE LPAREN vectorVar RPAREN 
            {
              SIRObj RESULT =null;
		int vectorleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vectorright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp vector = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("size", vector); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressions ::= LIST LPAREN smplExpListE RPAREN 
            {
              SIRObj RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("list", lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressions ::= LBRACKET smplExpListE RBRACKET 
            {
              SIRObj RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("list", lst); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literals ::= VAR 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRVar(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literals ::= VAR LPAREN smplExpListE RPAREN 
            {
              SIRObj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> exp = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("call", new SIRVar(id), exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFCond ::= IF boolExp THEN stmt ELSE stmt 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRStatement s1 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s2 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new ConditionalStatement(bool, s1, s2);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFCond ::= IF boolExp THEN stmt SEMI 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new ConditionalStatement(bool, s);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tupleExp ::= LPAREN tupleExpList RPAREN 
            {
              TupleExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		  
                                            RESULT = new TupleExp(lst);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExp",46, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment ::= VAR ASSIGN smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SMPLAssignment(id, exp);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment ::= ids ASSIGN tupleExp 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new TupleAssignment(lst, tuple); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment ::= ids ASSIGN VAR 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = new TupleAssignment(lst, new TupleExp(new SIRVar<CompoundExp>(id)));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= DEF VAR smplExp 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment ::= DEF VAR procDefn 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj proc = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SMPLAssignment(id, proc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tupleExpList ::= tupleExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tupleExpList ::= smplExp COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            lst.add(exp1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // smplExpListE ::= smplExpList 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // smplExpListE ::= empty 
            {
              ArrayList<SIRObj> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // smplExpList ::= smplExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // smplExpList ::= smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // smplExp ::= literals 
            {
              SIRObj RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lit; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // smplExp ::= expressions 
            {
              SIRObj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj expr = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // procDefn ::= PROC LPAREN paramListE RPAREN LCURL program RCURL 
            {
              SIRObj RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList<SIRParam> params = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ProcExp(params, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // procDefn ::= PROC paramExp LCURL program RCURL 
            {
              SIRObj RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram body = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ProcExp(param, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ids ::= ids COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ids ::= VAR COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            lst.add(id1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramListE ::= paramList 
            {
              ArrayList<SIRParam> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRParam> lst = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramListE ::= empty 
            {
              ArrayList<SIRParam> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramExp ::= LAZY VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, "lazy"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramExp ::= REF VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, "ref"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramExp ::= VAR 
            {
              SIRParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRParam(id, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramExp",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramList ::= paramList COMMA paramExp 
            {
              ArrayList<SIRParam> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRParam> lst = (ArrayList<SIRParam>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(param);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramList ::= paramExp 
            {
              ArrayList<SIRParam> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRParam param = (SIRParam)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRParam> lst = new ArrayList<>();
                                            lst.add(param);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bExpListE ::= bExpList 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bExpListE ::= empty 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bExpList ::= bExpList COMMA boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bExpList ::= boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolVar ::= VAR 
            {
              BoolExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BoolLit(new SIRVar<BoolExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolVar",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolExp ::= boolTerm LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boolExp ::= NOT boolExp 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boolExp ::= boolVar LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boolExp ::= NOT boolVar 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boolExp ::= boolTerm 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boolTerm ::= arithExp RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolTerm ::= arithVar RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolTerm ::= arithExp RATIONAL arithVar 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolTerm ::= boolFactor 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolFactor ::= BOOL 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            if (bool.equals("#t")) {
                                                RESULT = new BoolLit(true); 
                                            } else {
                                                RESULT = new BoolLit(false);
                                            }
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolFactor ::= LPAREN boolExp RPAREN 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolFactor ::= PAIR QUES LPAREN smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("pair?", exp)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolFactor ::= EQV QUES LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("eqv?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolFactor ::= EQUAL QUES LPAREN smplExp COMMA smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("equal?", exp1, exp2)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cExpListE ::= cExpList 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cExpListE ::= empty 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cExpList ::= cExpList COMMA charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cExpList ::= charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // charVar ::= VAR 
            {
              CharExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(new SIRVar<CharExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charVar",43, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // charExp ::= charTerm 
            {
              CharExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp t = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // charTerm ::= charFactor 
            {
              CharExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp f = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charTerm",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // charFactor ::= CHAR 
            {
              CharExp RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(ch.charAt(0), "#c"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // charFactor ::= UNICODE 
            {
              CharExp RESULT =null;
		int unileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String uni = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(uni, "#u"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // strExpListE ::= strExpListE 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // strExpListE ::= empty 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // strExpList ::= strExpList COMMA stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // strExpList ::= stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stringVar ::= VAR 
            {
              StringExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(new SIRVar<StringExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringVar",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stringExp ::= stringTerm 
            {
              StringExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp t = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stringTerm ::= stringFactor 
            {
              StringExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp f = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringTerm",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stringFactor ::= STRING 
            {
              StringExp RESULT =null;
		int sLitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sLitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String sLit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(sLit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringFactor",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // aExpListE ::= aExpList 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // aExpListE ::= empty 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // aExpList ::= aExpList COMMA arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // aExpList ::= arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arithVar ::= VAR 
            {
              AIRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(new SIRVar<AIRExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithVar",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arithExp ::= arithExp PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arithExp ::= arithExp MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arithExp ::= arithVar PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arithExp ::= arithVar MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arithExp ::= arithExp PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arithExp ::= arithExp MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arithExp ::= arithVar PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arithExp ::= arithVar MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arithExp ::= arithTerm 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // arithTerm ::= arithTerm DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // arithTerm ::= arithTerm MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // arithTerm ::= arithTerm TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arithTerm ::= arithTerm DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arithTerm ::= arithTerm MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arithTerm ::= arithVar TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arithTerm ::= arithVar DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arithTerm ::= arithVar MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithTerm ::= arithVar TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arithTerm ::= arithVar DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithTerm ::= arithVar MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arithTerm ::= arithFactor 
            {
              AIRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arithFactor ::= INTEGER 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer alit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // arithFactor ::= REAL 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double alit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, "#r"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arithFactor ::= HEX 
            {
              AIRExp RESULT =null;
		int hexleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hexright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer hex = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(hex, "#x"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arithFactor ::= BINARY 
            {
              AIRExp RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer bin = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(bin, "#b"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arithFactor ::= LPAREN MINUS arithTerm RPAREN 
            {
              AIRExp RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aExp);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arithFactor ::= LPAREN MINUS arithVar RPAREN 
            {
              AIRExp RESULT =null;
		int aVarleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aVarright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aVar = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aVar);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arithFactor ::= LPAREN arithExp RPAREN 
            {
              AIRExp RESULT =null;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aexp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = aexp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // pairVar ::= VAR 
            {
              CompoundExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairLit(new SIRVar<CompoundExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairVar",44, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // vectorVar ::= VAR 
            {
              CompoundExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new VectorLit(new SIRVar<CompoundExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorVar",45, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // pairExp ::= PAIR LPAREN smplExp COMMA smplExp RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj e1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj e2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new PairExp(new SIRFunctionExp("pair", e1, e2) );
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // vectorExp ::= LBCOLON smplExpListE RBCOLON 
            {
              VectorExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
						SIRObj[] result = new SIRObj[lst.size()];
						result = lst.toArray(result);
						RESULT = new VectorExp(new SIRFunctionExp("vector", result)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vectorExp",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
