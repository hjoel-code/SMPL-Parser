
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package smpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import smpl.lang.*;
import smpl.lang.arith.*;
import smpl.lang.bool.*;
import smpl.lang.chars.*;
import smpl.lang.compound.*;
import smpl.lang.statements.*;
import smpl.lang.string.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SMPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\007\000\002\010\007\000\002\010\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\044\010\000\002\044\007\000\002\053\005\000" +
    "\002\011\006\000\002\011\006\000\002\011\005\000\002" +
    "\043\005\000\002\043\005\000\002\042\003\000\002\042" +
    "\003\000\002\041\005\000\002\041\003\000\002\012\003" +
    "\000\002\012\003\000\002\003\005\000\002\003\005\000" +
    "\002\004\003\000\002\004\003\000\002\002\005\000\002" +
    "\002\003\000\002\040\003\000\002\040\003\000\002\037" +
    "\005\000\002\037\003\000\002\045\003\000\002\025\005" +
    "\000\002\025\004\000\002\025\005\000\002\025\004\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\003\000\002\027\005\000\002\027\007\000\002\034" +
    "\003\000\002\034\003\000\002\033\005\000\002\033\003" +
    "\000\002\051\003\000\002\022\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\032\003\000\002" +
    "\032\003\000\002\031\005\000\002\031\003\000\002\050" +
    "\003\000\002\017\003\000\002\020\003\000\002\021\003" +
    "\000\002\036\003\000\002\036\003\000\002\035\005\000" +
    "\002\035\003\000\002\047\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\006\000\002\016\005\000\002\052\003\000" +
    "\002\030\010\000\002\005\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\044\006\051\010\013\011\016\012\036\015" +
    "\022\023\017\035\026\036\015\037\037\040\047\041\044" +
    "\042\045\043\021\044\046\045\010\046\030\051\033\001" +
    "\002\000\004\002\227\001\002\000\052\002\ufff9\006\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\015\ufff9\023\ufff9\027\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\051\ufff9\052\ufff9\001\002\000" +
    "\056\002\ufff8\006\ufff8\010\ufff8\011\ufff8\012\ufff8\015\ufff8" +
    "\023\ufff8\024\ufff8\027\ufff8\030\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\051\ufff8\052\ufff8\001\002\000\046\002\000\006" +
    "\051\010\013\011\016\012\036\015\022\023\017\035\026" +
    "\036\015\037\037\040\047\041\044\042\045\043\021\044" +
    "\046\045\010\046\030\051\033\001\002\000\056\002\uffc4" +
    "\006\uffc4\010\uffc4\011\uffc4\012\uffc4\015\uffc4\023\uffc4\024" +
    "\uffc4\027\uffc4\030\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\051" +
    "\uffc4\052\uffc4\001\002\000\062\002\uffd1\006\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\015\uffd1\023\uffd1\024\uffd1\027\uffd1\030" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\050\224\051\uffd1\052" +
    "\uffd1\053\uffd1\001\002\000\056\002\uffc5\006\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\015\uffc5\023\uffc5\024\uffc5\027\uffc5\030" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\051\uffc5\052\uffc5\001" +
    "\002\000\004\023\217\001\002\000\056\002\ufff4\006\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\015\ufff4\023\ufff4\024\ufff4\027" +
    "\ufff4\030\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\051\ufff4\052" +
    "\ufff4\001\002\000\076\002\uffa4\006\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\027\uffa4\030\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\001\002\000\004\023\210\001\002\000\040\010\013\011" +
    "\016\012\036\017\114\023\017\035\026\036\015\037\037" +
    "\040\064\041\044\042\045\043\021\044\046\045\010\046" +
    "\030\001\002\000\014\016\202\017\203\020\135\021\134" +
    "\022\133\001\002\000\076\002\uffa2\006\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\027\uffa2\030\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\001\002\000\004\023\176\001\002\000\052\002\ufffc" +
    "\006\ufffc\010\ufffc\011\ufffc\012\ufffc\015\ufffc\023\ufffc\027" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\051\ufffc\052\ufffc\001" +
    "\002\000\056\002\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\015\uffbc\023\uffbc\024\uffbc\027\uffbc\030\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\051\uffbc\052\uffbc\001\002\000\056\002" +
    "\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\015\uffc6\023\uffc6" +
    "\024\uffc6\027\uffc6\030\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\051\uffc6\052\uffc6\001\002\000\024\012\145\023\150\035" +
    "\026\036\015\037\037\040\146\042\045\043\021\046\030" +
    "\001\002\000\076\002\uffaf\006\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\124\021\123\022\121" +
    "\023\uffaf\024\uffaf\027\uffaf\030\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\001" +
    "\002\000\062\002\uffce\006\uffce\010\uffce\011\uffce\012\uffce" +
    "\015\uffce\023\uffce\024\uffce\027\uffce\030\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce\053\uffce\001" +
    "\002\000\052\002\ufffd\006\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\015\ufffd\023\ufffd\027\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\051\ufffd\052\ufffd\001\002\000\056\002\ufff6\006\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\015\ufff6\023\ufff6\024\ufff6\027\ufff6" +
    "\030\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\051\ufff6\052\ufff6" +
    "\001\002\000\024\012\145\023\150\035\026\036\015\037" +
    "\037\040\146\042\045\043\021\046\030\001\002\000\076" +
    "\002\uffa5\006\uffa5\010\uffa5\011\uffa5\012\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\027\uffa5\030\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\001\002\000\056\002" +
    "\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\023\uffbd" +
    "\024\uffbd\027\uffbd\030\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\051\uffbd\052\uffbd\001\002\000\006\023\161\034\155\001" +
    "\002\000\076\002\uffa3\006\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\027\uffa3\030\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\001\002" +
    "\000\004\050\144\001\002\000\064\002\ufff7\006\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\015\ufff7\016\106\017\107\023\ufff7" +
    "\024\ufff7\027\ufff7\030\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\105\051\ufff7\052\ufff7\001\002\000\056\002\ufff3\006" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3\023\ufff3\024\ufff3" +
    "\027\ufff3\030\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\051\ufff3" +
    "\052\ufff3\001\002\000\056\002\ufff5\006\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\015\ufff5\023\ufff5\024\ufff5\027\ufff5\030\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\051\ufff5\052\ufff5\001\002" +
    "\000\056\002\uffbb\006\uffbb\010\uffbb\011\uffbb\012\uffbb\015" +
    "\uffbb\023\uffbb\024\uffbb\027\uffbb\030\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\051\uffbb\052\uffbb\001\002\000\076\002\uffa1" +
    "\006\uffa1\010\uffa1\011\uffa1\012\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\027\uffa1" +
    "\030\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\001\002\000\056\002\uffc3\006" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\015\uffc3\023\uffc3\024\uffc3" +
    "\027\uffc3\030\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\051\uffc3" +
    "\052\uffc3\001\002\000\022\004\101\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\030\100\050\uffd6\001\002\000\062" +
    "\002\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\015\uffcf\023" +
    "\uffcf\024\uffcf\027\uffcf\030\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\004" +
    "\023\074\001\002\000\046\002\ufffe\006\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\015\ufffe\023\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\051\ufffe\001\002\000\006\004\055\030\054\001\002" +
    "\000\004\040\073\001\002\000\006\023\060\040\057\001" +
    "\002\000\004\027\072\001\002\000\052\002\uffe9\006\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\015\uffe9\023\uffe9\027\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\051\uffe9\052\uffe9\001\002\000" +
    "\036\010\013\011\016\012\036\023\017\035\026\036\015" +
    "\037\037\040\064\041\044\042\045\043\021\044\046\045" +
    "\010\046\030\001\002\000\010\024\uffe1\027\uffe1\030\uffe1" +
    "\001\002\000\004\030\070\001\002\000\006\024\066\030" +
    "\065\001\002\000\024\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\024\uffe2\027\uffe2\030\uffe2\050\uffd6\001\002\000" +
    "\036\010\013\011\016\012\036\023\017\035\026\036\015" +
    "\037\037\040\064\041\044\042\045\043\021\044\046\045" +
    "\010\046\030\001\002\000\056\002\uffec\006\uffec\010\uffec" +
    "\011\uffec\012\uffec\015\uffec\023\uffec\024\uffec\027\uffec\030" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\051\uffec\052\uffec\001" +
    "\002\000\006\024\uffe8\030\uffe8\001\002\000\036\010\013" +
    "\011\016\012\036\023\017\035\026\036\015\037\037\040" +
    "\064\041\044\042\045\043\021\044\046\045\010\046\030" +
    "\001\002\000\006\024\uffe7\030\uffe7\001\002\000\052\002" +
    "\uffea\006\uffea\010\uffea\011\uffea\012\uffea\015\uffea\023\uffea" +
    "\027\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\051\uffea\052\uffea" +
    "\001\002\000\006\004\uffe0\030\uffe0\001\002\000\036\010" +
    "\013\011\016\012\036\023\017\035\026\036\015\037\037" +
    "\040\064\041\044\042\045\043\021\044\046\045\010\046" +
    "\030\001\002\000\004\024\076\001\002\000\004\027\077" +
    "\001\002\000\052\002\ufffb\006\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\015\ufffb\023\ufffb\027\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\051\ufffb\052\ufffb\001\002\000\004\040\104\001\002" +
    "\000\036\010\013\011\016\012\036\023\017\035\026\036" +
    "\015\037\037\040\064\041\044\042\045\043\021\044\046" +
    "\045\010\046\030\001\002\000\004\027\103\001\002\000" +
    "\052\002\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb" +
    "\023\uffeb\027\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\051\uffeb" +
    "\052\uffeb\001\002\000\006\004\uffdf\030\uffdf\001\002\000" +
    "\016\023\113\036\015\037\037\040\111\042\045\043\021" +
    "\001\002\000\016\023\113\036\015\037\037\040\111\042" +
    "\045\043\021\001\002\000\016\023\113\036\015\037\037" +
    "\040\111\042\045\043\021\001\002\000\076\002\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\135\021\134\022\133\023\uffb0\024\uffb0\027\uffb0\030" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\001\002\000\076\002\uffb6\006\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\027\uffb6\030\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\001\002\000\076\002\uffb4\006\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\015\uffb4\016\uffb4\017\uffb4\020\124" +
    "\021\123\022\121\023\uffb4\024\uffb4\027\uffb4\030\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\001\002\000\020\017\114\023\113\036\015" +
    "\037\037\040\111\042\045\043\021\001\002\000\016\023" +
    "\113\036\015\037\037\040\111\042\045\043\021\001\002" +
    "\000\010\016\106\017\107\024\116\001\002\000\076\002" +
    "\uff9f\006\uff9f\010\uff9f\011\uff9f\012\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\027" +
    "\uff9f\030\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\001\002\000\010\020\135" +
    "\021\134\022\133\001\002\000\012\020\124\021\123\022" +
    "\121\024\122\001\002\000\016\023\113\036\015\037\037" +
    "\040\111\042\045\043\021\001\002\000\076\002\uffa0\006" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\027\uffa0\030" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\001\002\000\016\023\113\036\015" +
    "\037\037\040\111\042\045\043\021\001\002\000\016\023" +
    "\113\036\015\037\037\040\111\042\045\043\021\001\002" +
    "\000\076\002\uffae\006\uffae\010\uffae\011\uffae\012\uffae\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\027\uffae\030\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\001\002\000" +
    "\076\002\uffab\006\uffab\010\uffab\011\uffab\012\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\027\uffab\030\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\001\002\000\076" +
    "\002\uffad\006\uffad\010\uffad\011\uffad\012\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\027\uffad\030\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\001\002\000\076\002" +
    "\uffaa\006\uffaa\010\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\027" +
    "\uffaa\030\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\001\002\000\076\002\uffac" +
    "\006\uffac\010\uffac\011\uffac\012\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\027\uffac" +
    "\030\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\001\002\000\076\002\uffa9\006" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\015\uffa9\016\uffa9\017\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\027\uffa9\030" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\001\002\000\014\023\113\036\015" +
    "\037\037\042\045\043\021\001\002\000\014\023\113\036" +
    "\015\037\037\042\045\043\021\001\002\000\014\023\113" +
    "\036\015\037\037\042\045\043\021\001\002\000\076\002" +
    "\uffa8\006\uffa8\010\uffa8\011\uffa8\012\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\027" +
    "\uffa8\030\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002\000\076\002\uffa7" +
    "\006\uffa7\010\uffa7\011\uffa7\012\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\027\uffa7" +
    "\030\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\001\002\000\076\002\uffa6\006" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\027\uffa6\030" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\001\002\000\076\002\uffb1\006\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\135\021\134\022\133\023\uffb1\024\uffb1\027\uffb1\030\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\001\002\000\076\002\uffb5\006\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\015\uffb5\016\uffb5\017\uffb5\020\124" +
    "\021\123\022\121\023\uffb5\024\uffb5\027\uffb5\030\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\001\002\000\066\002\uffd0\006\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\015\uffd0\016\106\017\107\023\uffd0\024" +
    "\uffd0\027\uffd0\030\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\001\002\000\024\012\145" +
    "\023\150\035\026\036\015\037\037\040\146\042\045\043" +
    "\021\046\030\001\002\000\004\034\155\001\002\000\074" +
    "\002\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\015\uffd6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffd6\024\uffd6" +
    "\027\uffd6\030\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\001\002\000\010\016\106\017" +
    "\107\047\105\001\002\000\026\012\145\017\114\023\150" +
    "\035\026\036\015\037\037\040\146\042\045\043\021\046" +
    "\030\001\002\000\060\002\uffd3\006\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\015\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\051\uffd3\052\uffd3\053\uffd3\001" +
    "\002\000\012\016\106\017\107\024\116\047\105\001\002" +
    "\000\004\024\154\001\002\000\062\002\uffcd\006\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\015\uffcd\023\uffcd\024\uffcd\027\uffcd" +
    "\030\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\001\002\000\004\023\156\001\002\000" +
    "\036\010\013\011\016\012\036\023\017\035\026\036\015" +
    "\037\037\040\064\041\044\042\045\043\021\044\046\045" +
    "\010\046\030\001\002\000\004\024\160\001\002\000\062" +
    "\002\uffcc\006\uffcc\010\uffcc\011\uffcc\012\uffcc\015\uffcc\023" +
    "\uffcc\024\uffcc\027\uffcc\030\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000\036" +
    "\010\013\011\016\012\036\023\017\035\026\036\015\037" +
    "\037\040\064\041\044\042\045\043\021\044\046\045\010" +
    "\046\030\001\002\000\004\030\163\001\002\000\036\010" +
    "\013\011\016\012\036\023\017\035\026\036\015\037\037" +
    "\040\064\041\044\042\045\043\021\044\046\045\010\046" +
    "\030\001\002\000\004\024\165\001\002\000\056\002\uff9d" +
    "\006\uff9d\010\uff9d\011\uff9d\012\uff9d\015\uff9d\023\uff9d\024" +
    "\uff9d\027\uff9d\030\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\051" +
    "\uff9d\052\uff9d\001\002\000\004\053\167\001\002\000\044" +
    "\006\051\010\013\011\016\012\036\015\022\023\017\035" +
    "\026\036\015\037\037\040\047\041\044\042\045\043\021" +
    "\044\046\045\010\046\030\051\033\001\002\000\006\027" +
    "\172\052\171\001\002\000\044\006\051\010\013\011\016" +
    "\012\036\015\022\023\017\035\026\036\015\037\037\040" +
    "\047\041\044\042\045\043\021\044\046\045\010\046\030" +
    "\051\033\001\002\000\052\002\uffed\006\uffed\010\uffed\011" +
    "\uffed\012\uffed\015\uffed\023\uffed\027\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\051\uffed\052\uffed\001\002\000\052\002\uffee" +
    "\006\uffee\010\uffee\011\uffee\012\uffee\015\uffee\023\uffee\027" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\051\uffee\052\uffee\001" +
    "\002\000\062\002\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\015\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\050\144\051\uffd2\052\uffd2\053\uffd2\001" +
    "\002\000\060\002\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\015\uffd4\023\uffd4\024\uffd4\027\uffd4\030\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000" +
    "\036\010\013\011\016\012\036\023\017\035\026\036\015" +
    "\037\037\040\064\041\044\042\045\043\021\044\046\045" +
    "\010\046\030\001\002\000\004\024\200\001\002\000\004" +
    "\027\201\001\002\000\052\002\ufffa\006\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\015\ufffa\023\ufffa\027\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\051\ufffa\052\ufffa\001\002\000\016\023\113" +
    "\036\015\037\037\040\111\042\045\043\021\001\002\000" +
    "\016\023\113\036\015\037\037\040\111\042\045\043\021" +
    "\001\002\000\076\002\uffb2\006\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\124\021\123\022\121" +
    "\023\uffb2\024\uffb2\027\uffb2\030\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\001" +
    "\002\000\076\002\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\124\021\123\022\121\023" +
    "\uffb3\024\uffb3\027\uffb3\030\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002" +
    "\000\014\016\106\017\107\024\116\030\ufff7\047\105\001" +
    "\002\000\006\024\154\030\ufff4\001\002\000\006\012\213" +
    "\040\211\001\002\000\004\024\uff9e\001\002\000\004\024" +
    "\216\001\002\000\004\023\161\001\002\000\004\024\215" +
    "\001\002\000\056\002\ufff0\006\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\015\ufff0\023\ufff0\024\ufff0\027\ufff0\030\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\051\ufff0\052\ufff0\001\002\000\056" +
    "\002\uffef\006\uffef\010\uffef\011\uffef\012\uffef\015\uffef\023" +
    "\uffef\024\uffef\027\uffef\030\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\051\uffef\052\uffef\001\002\000\006\012\213\040\211" +
    "\001\002\000\004\024\223\001\002\000\004\024\222\001" +
    "\002\000\056\002\ufff2\006\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\015\ufff2\023\ufff2\024\ufff2\027\ufff2\030\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\051\ufff2\052\ufff2\001\002\000\056\002" +
    "\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1\023\ufff1" +
    "\024\ufff1\027\ufff1\030\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\051\ufff1\052\ufff1\001\002\000\024\012\145\023\150\035" +
    "\026\036\015\037\037\040\146\042\045\043\021\046\030" +
    "\001\002\000\060\002\uffd5\006\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\015\uffd5\023\uffd5\024\uffd5\027\uffd5\030\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002" +
    "\000\046\002\uffff\006\uffff\010\uffff\011\uffff\012\uffff\015" +
    "\uffff\023\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\051\uffff\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\060\003\052\006\003\007\006\010\051\011" +
    "\030\013\004\014\040\015\026\016\033\017\031\020\034" +
    "\021\023\022\042\023\024\024\011\025\013\026\010\027" +
    "\047\030\005\044\022\045\037\047\017\053\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\052\010\225\011\030\013\004\014\040\015\026" +
    "\016\033\017\031\020\034\021\023\022\042\023\024\024" +
    "\011\025\013\026\010\027\047\030\005\044\022\045\037" +
    "\047\017\053\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\012\061\013" +
    "\060\014\205\015\026\016\033\017\031\020\034\021\023" +
    "\022\042\023\024\024\011\025\206\026\010\027\047\030" +
    "\005\043\062\045\037\047\017\053\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\146" +
    "\015\026\016\033\025\174\026\010\027\047\045\173\047" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\146\015\026\016" +
    "\033\025\165\026\010\027\047\045\037\047\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\012\061\013\060\014\040\015" +
    "\026\016\033\017\031\020\034\021\023\022\042\023\024" +
    "\024\011\025\013\026\010\027\047\030\005\043\062\045" +
    "\037\047\017\053\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\012" +
    "\066\013\060\014\040\015\026\016\033\017\031\020\034" +
    "\021\023\022\042\023\024\024\011\025\013\026\010\027" +
    "\047\030\005\045\037\047\017\053\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\012\070\013\060\014" +
    "\040\015\026\016\033\017\031\020\034\021\023\022\042" +
    "\023\024\024\011\025\013\026\010\027\047\030\005\045" +
    "\037\047\017\053\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\012\074\013\060\014" +
    "\040\015\026\016\033\017\031\020\034\021\023\022\042" +
    "\023\024\024\011\025\013\026\010\027\047\030\005\045" +
    "\037\047\017\053\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\012" +
    "\101\013\060\014\040\015\026\016\033\017\031\020\034" +
    "\021\023\022\042\023\024\024\011\025\013\026\010\027" +
    "\047\030\005\045\037\047\017\053\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\142\015\026\016\033\047\017\001\001\000\010\015\141" +
    "\016\033\047\140\001\001\000\010\015\111\016\033\047" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\114\015\026\016\033\047\017\001" +
    "\001\000\010\015\117\016\033\047\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\130\047\131\001\001\000\002\001\001" +
    "\000\006\016\126\047\127\001\001\000\006\016\124\047" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\137\001\001\000\004\016\136\001\001" +
    "\000\004\016\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\146\015\026\016\033\025" +
    "\150\026\010\027\047\045\037\047\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\151\015\026\016\033\025\152\026\010\027\047\045\037" +
    "\047\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\012\156\013\060\014\040\015\026\016\033\017\031\020" +
    "\034\021\023\022\042\023\024\024\011\025\013\026\010" +
    "\027\047\030\005\045\037\047\017\053\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\012\161\013\060" +
    "\014\040\015\026\016\033\017\031\020\034\021\023\022" +
    "\042\023\024\024\011\025\013\026\010\027\047\030\005" +
    "\045\037\047\017\053\041\001\001\000\002\001\001\000" +
    "\046\012\163\013\060\014\040\015\026\016\033\017\031" +
    "\020\034\021\023\022\042\023\024\024\011\025\013\026" +
    "\010\027\047\030\005\045\037\047\017\053\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\003\052\010\167\011\030\013\004\014\040\015\026" +
    "\016\033\017\031\020\034\021\023\022\042\023\024\024" +
    "\011\025\013\026\010\027\047\030\005\044\022\045\037" +
    "\047\017\053\041\001\001\000\002\001\001\000\054\003" +
    "\052\010\172\011\030\013\004\014\040\015\026\016\033" +
    "\017\031\020\034\021\023\022\042\023\024\024\011\025" +
    "\013\026\010\027\047\030\005\044\022\045\037\047\017" +
    "\053\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\012\176\013\060" +
    "\014\040\015\026\016\033\017\031\020\034\021\023\022" +
    "\042\023\024\024\011\025\013\026\010\027\047\030\005" +
    "\045\037\047\017\053\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\204\016\033" +
    "\047\116\001\001\000\010\015\203\016\033\047\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\213\052\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\220\052\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\146\015" +
    "\026\016\033\025\224\026\010\027\047\045\037\047\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // No longer necessary    
    
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
        System.out.println(ioe.getMessage());
        throw ioe;
    }
    
    }


    SMPLLexer lexer;

    public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

    public SMPLParser(String file) throws FileNotFoundException {
              this(new SMPLLexer(new FileReader(file)));
    }

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(new InputStreamReader(is)));
                }

    public void report_error(String message, Object info) {
        System.err.println(message + info);
    }

    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error while reading: ", cur_token);
        System.err.println ("Last token read is " +
           lexer.getText());
    }
      

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SMPLParser$actions {

          
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action_part00000000(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRProgram start_val = (SIRProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              SIRProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new SIRProgram(seq);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              SIRSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRSequence seq = (SIRSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              SIRSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            SIRSequence seq = new SIRSequence();
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= assignment 
            {
              SIRStatement RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement assign = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = assign;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IFCond 
            {
              SIRStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ConditionalStatement cond = (ConditionalStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = cond;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= PRINT LPAREN smplExp RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new PrintStmt(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= PRINTLN LPAREN smplExp RPAREN SEMI 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		 RESULT = new PrintStmt(exp, true); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= literals 
            {
              SIRStatement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new Statement(exp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literals ::= pairExp 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (PairExp) pair; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literals ::= arithExp 
            {
              SIRObj RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (AIRExp) aExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literals ::= stringExp 
            {
              SIRObj RESULT =null;
		int sExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp sExp = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (StringExp) sExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literals ::= charExp 
            {
              SIRObj RESULT =null;
		int chExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp chExp = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (CharExp) chExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literals ::= boolExp 
            {
              SIRObj RESULT =null;
		int bExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bExp = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = (BoolExp) bExp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literals ::= tupleExp 
            {
              SIRObj RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = tuple; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literals ::= CAR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literals ::= CAR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("car", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literals ::= CDR LPAREN pairExp RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		PairExp pair = (PairExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literals ::= CDR LPAREN pairVar RPAREN 
            {
              SIRObj RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		CompoundExp pair = (CompoundExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new SIRFunctionExp("cdr", pair); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("literals",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IFCond ::= IF boolExp THEN stmt ELSE stmt 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRStatement s1 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRStatement s2 = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
                                            RESULT = new ConditionalStatement(bool, s1, s2);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IFCond ::= IF boolExp THEN stmt SEMI 
            {
              ConditionalStatement RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRStatement s = (SIRStatement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new ConditionalStatement(bool, s);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("IFCond",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tupleExp ::= LPAREN tupleExpList RPAREN 
            {
              TupleExp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		  
                                            RESULT = new TupleExp(lst);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExp",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= VAR ASSIGN smplExp SEMI 
            {
              SIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new SMPLAssignment(id, exp);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assignment ::= ids ASSIGN tupleExp SEMI 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		TupleExp tuple = (TupleExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new TupleAssignment(lst, tuple); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment ::= ids ASSIGN VAR 
            {
              SIRStatement RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		  
                                            RESULT = new TupleAssignment(lst, new TupleExp(new SIRVar<CompoundExp>(id)));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tupleExpList ::= tupleExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tupleExpList ::= smplExp COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            lst.add(exp1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("tupleExpList",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // smplExpListE ::= smplExpList 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // smplExpListE ::= empty 
            {
              ArrayList<SIRObj> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpListE",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // smplExpList ::= smplExpList COMMA smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRObj> lst = (ArrayList<SIRObj>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // smplExpList ::= smplExp 
            {
              ArrayList<SIRObj> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExpList",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // smplExp ::= VAR 
            {
              SIRObj RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SIRVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // smplExp ::= literals 
            {
              SIRObj RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		SIRObj lit = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lit; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("smplExp",8, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ids ::= ids COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ids ::= VAR COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            lst.add(id1);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("paramList",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bExpListE ::= bExpList 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bExpListE ::= empty 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpListE",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bExpList ::= bExpList COMMA boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<BoolExp>> lst = (ArrayList<SIRExp<BoolExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bExpList ::= boolExp 
            {
              ArrayList<SIRExp<BoolExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp e = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bExpList",29, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boolVar ::= VAR 
            {
              BoolExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new BoolLit(new SIRVar<BoolExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolVar",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolExp ::= boolTerm LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolExp ::= NOT boolExp 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolExp ::= boolVar LOGIC boolExp 
            {
              BoolExp RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		BoolExp bool1 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool2 = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolExp ::= NOT boolVar 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolExp ::= boolTerm 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolExp",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolTerm ::= arithExp RATIONAL arithExp 
            {
              BoolExp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp exp1 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp exp2 = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolTerm ::= boolFactor 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolTerm",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolFactor ::= BOOL 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            if (bool.equals("#t")) {
                                                RESULT = new BoolLit(true); 
                                            } else {
                                                RESULT = new BoolLit(false);
                                            }
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // boolFactor ::= LPAREN boolExp RPAREN 
            {
              BoolExp RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		BoolExp bool = (BoolExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = bool; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolFactor ::= PAIR QUES LPAREN smplExp RPAREN 
            {
              BoolExp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj exp = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new BoolFunction(new SIRFunctionExp("pair?", exp)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("boolFactor",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cExpListE ::= cExpList 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cExpListE ::= empty 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpListE",26, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cExpList ::= cExpList COMMA charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<CharExp>> lst = (ArrayList<SIRExp<CharExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cExpList ::= charExp 
            {
              ArrayList<SIRExp<CharExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp e = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cExpList",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // charVar ::= VAR 
            {
              CharExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(new SIRVar<CharExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charVar",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // charExp ::= charTerm 
            {
              CharExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp t = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charExp",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // charTerm ::= charFactor 
            {
              CharExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		CharExp f = (CharExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charTerm",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // charFactor ::= CHAR 
            {
              CharExp RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(ch.charAt(0), "#c"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // charFactor ::= UNICODE 
            {
              CharExp RESULT =null;
		int unileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String uni = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new CharLit(uni, "#u"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("charFactor",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // strExpListE ::= strExpListE 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // strExpListE ::= empty 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpListE",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // strExpList ::= strExpList COMMA stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<StringExp>> lst = (ArrayList<SIRExp<StringExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // strExpList ::= stringExp 
            {
              ArrayList<SIRExp<StringExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp e = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("strExpList",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stringVar ::= VAR 
            {
              StringExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(new SIRVar<StringExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringVar",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stringExp ::= stringTerm 
            {
              StringExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp t = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringExp",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stringTerm ::= stringFactor 
            {
              StringExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StringExp f = (StringExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringTerm",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stringFactor ::= STRING 
            {
              StringExp RESULT =null;
		int sLitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sLitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String sLit = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new StringLit(sLit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stringFactor",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // aExpListE ::= aExpList 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // aExpListE ::= empty 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",28, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // aExpList ::= aExpList COMMA arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList<SIRExp<AIRExp>> lst = (ArrayList<SIRExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            lst.add(e);
                                            RESULT = lst;
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // aExpList ::= arithExp 
            {
              ArrayList<SIRExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arithVar ::= VAR 
            {
              AIRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(new SIRVar<AIRExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithVar",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arithExp ::= arithExp PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arithExp ::= arithExp MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arithExp ::= arithVar PLUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arithExp ::= arithVar MINUS arithTerm 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arithExp ::= arithExp PLUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arithExp ::= arithExp MINUS arithVar 
            {
              AIRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp e = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arithExp ::= arithTerm 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arithTerm ::= arithTerm DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arithTerm ::= arithTerm MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arithTerm ::= arithTerm TIMES arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arithTerm ::= arithTerm DIV arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arithTerm ::= arithTerm MOD arithVar 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arithTerm ::= arithVar TIMES arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arithTerm ::= arithVar DIV arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arithTerm ::= arithVar MOD arithFactor 
            {
              AIRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		AIRExp t = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arithTerm ::= arithFactor 
            {
              AIRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		AIRExp f = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arithFactor ::= INTEGER 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer alit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, ""); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arithFactor ::= REAL 
            {
              AIRExp RESULT =null;
		int alitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int alitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Double alit = (Double)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(alit, "#r"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arithFactor ::= HEX 
            {
              AIRExp RESULT =null;
		int hexleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int hexright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer hex = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(hex, "#x"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // arithFactor ::= BINARY 
            {
              AIRExp RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer bin = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new AIRLit(bin, "#b"); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // arithFactor ::= LPAREN MINUS arithTerm RPAREN 
            {
              AIRExp RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aExp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aExp);
                                            RESULT = new ArithCalc(calc); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arithFactor ::= LPAREN arithExp RPAREN 
            {
              AIRExp RESULT =null;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		AIRExp aexp = (AIRExp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = aexp; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pairVar ::= VAR 
            {
              CompoundExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new PairLit(new SIRVar<CompoundExp>(var)); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairVar",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // pairExp ::= PAIR LPAREN smplExp COMMA smplExp RPAREN 
            {
              PairExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		SIRObj e1 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SIRObj e2 = (SIRObj)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                                            RESULT = new PairExp(new SIRFunctionExp("pair", e1, e2) );
                                        
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairExp",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SMPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
              return CUP$SMPLParser$do_action_part00000000(
                               CUP$SMPLParser$act_num,
                               CUP$SMPLParser$parser,
                               CUP$SMPLParser$stack,
                               CUP$SMPLParser$top);
    }
}

}
