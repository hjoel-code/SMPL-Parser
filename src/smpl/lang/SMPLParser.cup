package smpl.lang;


import java_cup.runtime.*;
import java.io.*;
import java.util.*;


import smpl.lang.*;
import smpl.lang.arith.*;
import smpl.lang.bool.*;
import smpl.lang.chars.*;
import smpl.lang.compound.*;
import smpl.lang.statements.*;
import smpl.lang.string.*;
import smpl.values.type.compound.SMPLSingleCase;


/* Preliminaries to set up and use the scanner.  */
action code {:          :};

parser code {:
    SMPLLexer lexer;

    public SMPLParser(SMPLLexer l) {
                    super(l);
                    lexer = l;
                }

    public SMPLParser(String file) throws FileNotFoundException {
              this(new SMPLLexer(new FileReader(file)));
    }

                public SMPLParser(InputStream is) {
                    this(new SMPLLexer(new InputStreamReader(is)));
                }

    public void report_error(String message, Object info) {
        System.err.println(message + info);
    }

    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error while reading: ", cur_token);
        System.err.println ("Last token read is " +
           lexer.getText());
    }
      :};

init with {:
    // No longer necessary    
    :};
scan with {:
    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
        System.out.println(ioe.getMessage());
        throw ioe;
    }
    :};

/* Terminals (tokens returned by the scanner). */

/* Keywords */
terminal ASSIGN, SIZE, PRINT, PROC, CALL, LAZY, REF;
terminal CAR, CDR, PAIR, LIST, DEF, PRINTLN, EQV, EQUAL, SUBSTR, ISPAIR;
terminal CONCAT, READ, READINT, CASE;

/* Arithmetic operators */ 
terminal PLUS, MINUS, TIMES, DIV, MOD;

/* Punctuation */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, SEMI, COMMA, COLON;
terminal LBCOLON, RBCOLON, QUES, NOT, LCURL, RCURL;

terminal Integer INTEGER;
terminal Double REAL;
terminal String VAR;
terminal String STRING;
terminal Integer BINARY;
terminal Integer HEX;
terminal String UNICODE;
terminal String CHAR;
terminal String BOOL;
terminal String RATIONAL;
terminal String LOGIC;
terminal String EMPTY;



/* Non terminals */

/* *** Logic extensions (in support of IF) *** */
terminal IF, ELSE, THEN;

// place your extensions here, if you do this problem

/* *** End of logic extensions *** */

non terminal ArrayList<SIRParam> paramList;
non terminal ArrayList<String> ids;
non terminal ArrayList<SIRParam> paramListE;
non terminal SIRParam paramExp;
non terminal empty;


// Non-Terminals

non terminal SIRProgram program;
non terminal SIRSequence stmtList;
non terminal SIRStatement stmt, assignment;
non terminal SIRObj smplExp, expressions, procDefn, literals, caseCondExp;
non terminal AIRExp arithExp, arithTerm, arithFactor;
non terminal StringExp stringExp, stringTerm, stringFactor;
non terminal CharExp charExp, charTerm, charFactor;

non terminal BoolExp boolExp, boolTerm, boolFactor;
non terminal PairExp pairExp;
non terminal VectorExp vectorExp;

non terminal ArrayList<SIRExp<StringExp>> strExpList, strExpListE;  
non terminal ArrayList<SIRExp<CharExp>> cExpList, cExpListE;
non terminal ArrayList<SIRExp<AIRExp>> aExpList, aExpListE;
non terminal ArrayList<SIRExp<BoolExp>> bExpList, bExpListE;
non terminal ArrayList<SIRObj> smplExpList, smplExpListE, tupleExpList;
non terminal ArrayList<SMPLSingleCase> caseList;

non terminal ConditionalStatement IFCond;
non terminal BoolExp boolVar, predicate;
non terminal AIRExp arithVar;
non terminal StringExp stringVar;
non terminal CharExp charVar;
non terminal CompoundExp pairVar;
non terminal CompoundExp vectorVar;
non terminal TupleExp tupleExp;
non terminal SMPLSingleCase singleCase;


start with program;

program                         ::=     stmtList:seq {:
                                            RESULT = new SIRProgram(seq);
                                        :};


stmtList                        ::=     stmtList:seq stmt:s {:
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        :} |

                                        stmt:s {:
                                            SIRSequence seq = new SIRSequence();
                                            seq.addStatement(s);
                                            RESULT = seq;
                                        :};



stmt                            ::=     assignment:assign SEMI {: RESULT = assign; :} |
                                        IFCond:cond SEMI{: RESULT = cond; :} |
                                        PRINT LPAREN smplExp:exp RPAREN SEMI {: RESULT = new PrintStmt(exp); :} |
                                        PRINTLN LPAREN smplExp:exp RPAREN SEMI {: RESULT = new PrintStmt(exp, true); :} |
                                        READINT LPAREN RPAREN SEMI {: RESULT = new SMPLReadInt(); :} |
                                        READ LPAREN RPAREN SEMI {: RESULT = new SMPLReadStr(); :} |
                                        smplExp:exp SEMI {: RESULT = new Statement(exp); :};


expressions                     ::=     pairExp:pair {: RESULT = pair; :} |
                                        arithExp:aExp {: RESULT = aExp; :} |
                                        vectorExp:vector {: RESULT = vector; :} |
                                        stringExp:sExp {: RESULT = sExp; :} |
                                        charExp:chExp {: RESULT = chExp; :} |
                                        boolExp:bExp {: RESULT = bExp; :} | 
                                        tupleExp:tuple {: RESULT = tuple; :} |
                                        caseCondExp:cCond {: RESULT = cCond; :};



literals                        ::=     VAR:id {: RESULT = new SIRVar(id); :} |
                                        VAR:id LPAREN smplExpListE:exp RPAREN {: RESULT = new SIRFunctionExp("call", new SIRVar(id), exp); :} |
                                        CALL LPAREN VAR:id COMMA smplExp RPAREN |

                                        CAR LPAREN pairExp:pair RPAREN {: RESULT = new SIRFunctionExp("car", pair); :} |
                                        CAR LPAREN pairVar:pair RPAREN {: RESULT = new SIRFunctionExp("car", pair); :} |
                                        CDR LPAREN pairExp:pair RPAREN {: RESULT = new SIRFunctionExp("cdr", pair); :} |
                                        CDR LPAREN pairVar:pair RPAREN {: RESULT = new SIRFunctionExp("cdr", pair); :} |
                                        
                                        SUBSTR LPAREN stringExp:string COMMA arithExp:exp1 COMMA arithExp:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |
                                        SUBSTR LPAREN stringExp:string COMMA arithVar:exp1 COMMA arithVar:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |
                                        SUBSTR LPAREN stringExp:string COMMA arithExp:exp1 COMMA arithVar:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |
                                        SUBSTR LPAREN stringExp:string COMMA arithVar:exp1 COMMA arithExp:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |

                                        SUBSTR LPAREN stringVar:string COMMA arithExp:exp1 COMMA arithExp:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |
                                        SUBSTR LPAREN stringVar:string COMMA arithVar:exp1 COMMA arithVar:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |
                                        SUBSTR LPAREN stringVar:string COMMA arithExp:exp1 COMMA arithVar:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |
                                        SUBSTR LPAREN stringVar:string COMMA arithVar:exp1 COMMA arithExp:exp2  RPAREN {: RESULT = new SubString(string, exp1, exp2); :} |
                                        
                                        vectorExp:vector LBRACKET arithExp:exp RBRACKET {: RESULT = new SIRFunctionExp("ele", vector, exp); :} |
                                        vectorVar:vector LBRACKET arithExp:exp RBRACKET {: RESULT = new SIRFunctionExp("ele", vector, exp); :} |
                                        
                                        SIZE LPAREN vectorExp:vector RPAREN {: RESULT = new SIRFunctionExp("size", vector); :} |
                                        SIZE LPAREN vectorVar:vector RPAREN {: RESULT = new SIRFunctionExp("size", vector); :} |
                                        LIST LPAREN smplExpListE:lst RPAREN {: RESULT = new SIRFunctionExp("list", lst); :} | 
                                        LBRACKET smplExpListE:lst RBRACKET {: RESULT = new SIRFunctionExp("list", lst); :};


// IF Statement

IFCond                          ::=     IF boolExp:bool THEN stmt:s1 ELSE stmt:s2 {:
                                            RESULT = new ConditionalStatement(bool, s1, s2);
                                        :} | 
                                        IF boolExp:bool THEN stmt:s {:
                                            RESULT = new ConditionalStatement(bool, s);
                                        :}; 


caseCondExp                     ::=     CASE LCURL caseList:cLst RCURL {: RESULT = new CaseCondExp(cLst); :};

caseList                        ::=     caseList:cLst COMMA singleCase:sCase {:
                                            cLst.add(sCase);
                                            RESULT = cLst; :} |
                                        singleCase:sCase {:
                                            ArrayList<SMPLSingleCase> cLst = new ArrayList<>();
                                            cLst.add(sCase);
                                            RESULT = cLst; :}; 

singleCase                      ::=     boolExp:exp COLON stmtList:seq {: RESULT = new SMPLSingleCase(exp, seq); :} |
                                        ELSE COLON stmtList:seq {: RESULT = new SMPLSingleCase(new BoolLit(true), seq); :};                                       


tupleExp                        ::=     LPAREN tupleExpList:lst RPAREN {:  
                                            RESULT = new TupleExp(lst);
                                        :};


assignment                      ::=     VAR:id ASSIGN smplExp:exp {:
                                            RESULT = new SMPLAssignment(id, exp);
                                        :} |

                                        ids:lst ASSIGN tupleExp:tuple {: RESULT = new TupleAssignment(lst, tuple); :} |

                                        ids:lst ASSIGN VAR:id {:  
                                            RESULT = new TupleAssignment(lst, new TupleExp(new SIRVar<CompoundExp>(id)));
                                        :} |
                                        DEF VAR:id smplExp:exp {: RESULT = new SMPLAssignment(id, exp); :} |
                                        DEF VAR:id procDefn:proc {: RESULT = new SMPLAssignment(id, proc); :};



tupleExpList                    ::=     tupleExpList:lst COMMA smplExp:exp {: 
                                            lst.add(exp);
                                            RESULT = lst;
                                        :} |

                                        smplExp:exp  COMMA smplExp:exp1 {: 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            lst.add(exp1);
                                            RESULT = lst;
                                        :};


smplExpListE                      ::=   smplExpList:lst {: RESULT = lst; :} |

                                        empty {: RESULT = new ArrayList<>(); :};



smplExpList                       ::=   smplExpList:lst COMMA smplExp:exp {: 
                                            lst.add(exp);
                                            RESULT = lst;
                                        :} |

                                        smplExp:exp {: 
                                            ArrayList<SIRObj> lst = new ArrayList<>();
                                            lst.add(exp);
                                            RESULT = lst;
                                        :};


smplExp                         ::=     expressions:expr {: RESULT = expr; :} |
                                        literals:lit {: RESULT = lit; :};


procDefn                        ::=     PROC LPAREN paramListE:params RPAREN LCURL program:body RCURL {: RESULT = new ProcExp(params, body); :} |
                                        PROC paramExp:param program:body  {: RESULT = new ProcExp(param, body); :}; 

// Parameter List for Function Definitions

ids                             ::=     ids:lst COMMA VAR:id {: 
                                            lst.add(id);
                                            RESULT = lst;
                                        :} |

                                        VAR:id COMMA VAR:id1 {: 
                                            ArrayList<String> lst = new ArrayList<>();
                                            lst.add(id);
                                            lst.add(id1);
                                            RESULT = lst;
                                        :};


paramListE                      ::=     paramList:lst {: RESULT = lst; :} |

                                        empty {: RESULT = new ArrayList<>(); :};

paramExp                        ::=     LAZY VAR:id {: RESULT = new SIRParam(id, "lazy"); :} | 
                                        REF VAR:id {: RESULT = new SIRParam(id, "ref"); :} |
                                        VAR:id {: RESULT = new SIRParam(id, ""); :} ;

paramList                       ::=     paramList:lst COMMA paramExp:param {: 
                                            lst.add(param);
                                            RESULT = lst;
                                        :} |

                                        paramExp:param {: 
                                            ArrayList<SIRParam> lst = new ArrayList<>();
                                            lst.add(param);
                                            RESULT = lst;
                                        :};

// Boolean Expressions


bExpListE                       ::=     bExpList:lst {: 
                                            RESULT = lst;
                                        :} |
                                        empty {: RESULT = new ArrayList<>(); :};


bExpList                        ::=     bExpList:lst COMMA boolExp:e {: 
                                            lst.add(e);
                                            RESULT = lst;
                                        :} |

                                        boolExp:e {: 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        :};


boolVar                         ::=     literals:lit {: RESULT = new BoolLit(lit); :};


boolExp                         ::=     boolTerm:bool1 LOGIC:op boolExp:bool2 {: 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        :} |

                                        NOT boolExp:bool {: 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        :} |

                                        boolVar:bool1 LOGIC:op boolExp:bool2 {: 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        :} |

                                        boolTerm:bool1 LOGIC:op boolVar:bool2 {: 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, bool1, bool2)); 
                                        :} |

                                        NOT boolVar:bool {: 
                                            RESULT = new BoolCalc(new SIRUnaryExp<BoolExp>("not", bool));
                                        :} |

                                        boolTerm:bool {: RESULT = bool; :};


boolTerm                        ::=     arithExp:exp1 RATIONAL:op arithExp:exp2 {: 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        :} |

                                        arithVar:exp1 RATIONAL:op arithExp:exp2 {: 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        :} |

                                        arithExp:exp1 RATIONAL:op arithVar:exp2 {: 
                                            RESULT = new BoolCalc(new SIRBinaryExp<BoolExp>(op, exp1, exp2)); 
                                        :} |

                                        boolFactor:bool {: RESULT = bool; :};


boolFactor                      ::=     BOOL:bool {: 
                                            if (bool.equals("#t")) {
                                                RESULT = new BoolLit(true); 
                                            } else {
                                                RESULT = new BoolLit(false);
                                            }
                                        :} |

                                        LPAREN boolExp:bool RPAREN {: RESULT = bool; :} |

                                        ISPAIR LPAREN smplExp:exp RPAREN {: RESULT = new BoolFunction(new SIRFunctionExp("pair?", exp)); :} |
                                        EQV LPAREN smplExp:exp1 COMMA smplExp:exp2 RPAREN {: RESULT = new BoolFunction(new SIRFunctionExp("eqv?", exp1, exp2)); :} |
                                        EQUAL LPAREN smplExp:exp1 COMMA smplExp:exp2 RPAREN {: RESULT = new BoolFunction(new SIRFunctionExp("equal?", exp1, exp2)); :};



// Character Expressions

cExpListE                       ::=     cExpList:lst {: 
                                            RESULT = lst;
                                        :} |
                                        empty {: RESULT = new ArrayList<>(); :};


cExpList                        ::=     cExpList:lst COMMA charExp:e {: 
                                            lst.add(e);
                                            RESULT = lst;
                                        :} |

                                        charExp:e {: 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        :};


charVar                         ::=     literals:lit {: RESULT = new CharLit(lit); :};


charExp                         ::=     charTerm:t {: RESULT = t; :};


charTerm                        ::=     charFactor: f {: RESULT = f; :};


charFactor                      ::=     CHAR:ch {: RESULT = new CharLit(ch.charAt(0), "#c"); :} |
                                        UNICODE:uni {: RESULT = new CharLit(uni, "#u"); :};



// String Expressions

strExpListE                     ::=     strExpListE:lst {: 
                                            RESULT = lst;
                                        :} |
                                        empty {: RESULT = new ArrayList<>(); :};


strExpList                      ::=     strExpList:lst COMMA stringExp:e {: 
                                            lst.add(e);
                                            RESULT = lst;
                                        :} |

                                        stringExp:e {: 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        :};


stringVar                       ::=     literals:lit {: RESULT = new StringLit(lit); :};


stringExp                       ::=     stringExp:e1 CONCAT stringTerm:e2 {: RESULT = new StringConcat(e1, e2); :} |
                                        stringVar:e1 CONCAT stringTerm:e2 {: RESULT = new StringConcat(e1, e2); :} |
                                        stringExp:e1 CONCAT stringVar:e2 {: RESULT = new StringConcat(e1, e2); :} |
                                        stringVar:e1 CONCAT stringVar:e2 {: RESULT = new StringConcat(e1, e2); :} |
                                        stringTerm:t {: RESULT = t; :};                    


stringTerm                      ::=     stringFactor:f {: RESULT = f; :};


stringFactor                    ::=     STRING:sLit {: RESULT = new StringLit(sLit); :};


// Arithmetic Expressions


aExpListE                       ::=     aExpList:lst {: 
                                            RESULT = lst;
                                        :} |
                                        empty {: RESULT = new ArrayList<>(); :};


aExpList                        ::=     aExpList:lst COMMA arithExp:e {: 
                                            lst.add(e);
                                            RESULT = lst;
                                        :} |

                                        arithExp:e {: 
                                            RESULT = new ArrayList<>();
                                            RESULT.add(e);
                                        :};


arithVar                        ::=     literals:lit {: RESULT = new AIRLit(lit); :};


arithExp                        ::=     arithExp:e PLUS arithTerm:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithExp:e MINUS arithTerm:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); :} |
                                        
                                        arithVar:e PLUS arithTerm:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithVar:e MINUS arithTerm:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); :} |

                                        arithExp:e PLUS arithVar:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithExp:e MINUS arithVar:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); :} |

                                        arithVar:e PLUS arithVar:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("+", e, t);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithVar:e MINUS arithVar:t {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("-", e, t);
                                            RESULT = new ArithCalc(calc); :} |

                                        arithTerm:t {: RESULT = t; :};


arithTerm                       ::=     arithTerm:t TIMES arithFactor:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithTerm:t DIV arithFactor:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithTerm:t MOD arithFactor:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); :} |

                                        arithTerm:t TIMES arithVar:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithTerm:t DIV arithVar:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithTerm:t MOD arithVar:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); :} |

                                        arithVar:t TIMES arithFactor:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithVar:t DIV arithFactor:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithVar:t MOD arithFactor:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); :} |

                                        arithVar:t TIMES arithVar:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("*", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithVar:t DIV arithVar:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("/", t, f);
                                            RESULT = new ArithCalc(calc); :} |
                                        arithVar:t MOD arithVar:f {: 
                                            SIRBinaryExp<AIRExp> calc = new SIRBinaryExp<AIRExp>("%", t, f);
                                            RESULT = new ArithCalc(calc); :} |

                                        arithFactor:f {: RESULT = f; :};

arithFactor                     ::=     INTEGER:alit {: RESULT = new AIRLit(alit, ""); :} |
                                        REAL:alit {: RESULT = new AIRLit(alit, "#r"); :} |
                                        HEX:hex {: RESULT = new AIRLit(hex, "#x"); :} |
                                        BINARY:bin {: RESULT = new AIRLit(bin, "#b"); :} |
                                        LPAREN MINUS arithTerm:aExp RPAREN {: 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aExp);
                                            RESULT = new ArithCalc(calc); :} |
                                        LPAREN MINUS arithVar:aVar RPAREN {: 
                                            SIRUnaryExp<AIRExp> calc = new SIRUnaryExp<AIRExp>("-", aVar);
                                            RESULT = new ArithCalc(calc); :} |
                                        LPAREN arithExp:aexp RPAREN {: RESULT = aexp; :};


pairVar                         ::=     literals:lit {: RESULT = new PairLit(lit); :};

vectorVar                       ::=     literals:lit {: RESULT = new VectorLit(lit); :};


pairExp                         ::=     PAIR LPAREN smplExp:e1 COMMA smplExp:e2 RPAREN {:
                                            RESULT = new PairExp(new SIRFunctionExp("pair", e1, e2) );
                                        :};


vectorExp		            	::=	    LBCOLON smplExpListE:lst RBCOLON {:
                                        SIRObj[] result = new SIRObj[lst.size()];
                                        result = lst.toArray(result);
                                        RESULT = new VectorExp(new SIRFunctionExp("vector", result)); :};

empty                           ::=     ;
